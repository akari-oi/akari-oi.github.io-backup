{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"louhc\u7684\u7b97\u6cd5\u535a\u5ba2,\u5b66\u4e60\u7b14\u8bb0\u4e4b\u7c7b\u7684\u653e\u5728\u8fd9\u91cc","title":"\u4e3b\u9875"},{"location":"control/","text":"Material color palette \u989c\u8272\u4e3b\u9898 \u00b6 Primary colors \u4e3b\u8272 \u00b6 \u9ed8\u8ba4\u4e3a white \u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) Accent colors \u8f85\u52a9\u8272 \u00b6 \u9ed8\u8ba4\u4e3a pink \u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) // #758 document.getElementsByClassName('md-nav__title')[1].click()","title":"\u4eea\u8868\u76d8"},{"location":"control/#material-color-palette","text":"","title":"Material color palette \u989c\u8272\u4e3b\u9898"},{"location":"control/#primary-colors","text":"\u9ed8\u8ba4\u4e3a white \u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","title":"Primary colors \u4e3b\u8272"},{"location":"control/#accent-colors","text":"\u9ed8\u8ba4\u4e3a pink \u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) // #758 document.getElementsByClassName('md-nav__title')[1].click()","title":"Accent colors \u8f85\u52a9\u8272"},{"location":"ds/leftist-tree/","text":"\u5de6\u504f\u6811 \u00b6 \u5de6\u504f\u6811\u662f\u4e00\u79cd\u53ef\u4ee5\u5408\u5e76\u7684\u201c\u5806\u201d\u3002\u8fd9\u91cc\u6253\u4e86\u5f15\u53f7\uff0c\u662f\u56e0\u4e3a\u5de6\u504f\u6811 \u5e76\u4e0d\u662f\u5806 \uff0c\u4f46\u662f\u80fd\u5b8c\u6210\u4e0e\u5806\u7c7b\u4f3c\u7684\u529f\u80fd\u3002 \u800c\u4e14\u8fd8\u80fd\u652f\u6301\u53ef\u6301\u4e45\u5316 \u3002 \u5728\u53ef\u5408\u5e76\u5bf9\u4e2d\uff0c\u5de6\u504f\u6811\u662f\u6700\u5e38\u7528\u7684\u3002\u867d\u7136\u5b83\u7684\u6548\u7387\u4e0d\u53ca\u6590\u6ce2\u90a3\u5951\u5806\u4e0e\u914d\u5bf9\u5806\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u662f\u540c\u4e00\u4e2a\u7ea7\u522b\uff0c\u5355\u6b21\u64cd\u4f5c\u6700\u574f\u60c5\u51b5\u4e0b\u90fd\u662f O(log_2n) O(log_2n) \u7684\u3002\u800c\u4e14\u4e0d\u50cf\u6590\u6ce2\u90a3\u5951\u5806\uff0c\u7801\u91cf\u5927\uff0c\u96be\u7406\u89e3\uff0c\u5728\u7ade\u8d5b\u4e2d\u7528\u592a\u4e0d\u5408\u7b97\u4e86\uff0c\u914d\u5bf9\u5806\u4e0d\u8d44\u74f7\u53ef\u6301\u4e45\u5316\u3002\u3002\u3002\u3002\u3002 \u653e\u5f20\u8868\u683c\uff0c\u770b\u770b\u4f60\u6253\u7b97\u5b66\u54ea\u79cd\uff1f\u8fd9\u91cc\uff08\u76ee\u524d\uff09\u53ea\u6709\u5de6\u504f\u6811\u3002 \u5176\u4ed6\u7684\u9664\u4e86\u4e8c\u53c9\u5806\u535a\u4e3b\u90fd\u4e0d\u4f1a \uff08\u8bdd\u8bf4\u5de6\u504f\u6811\u4e3b\u8981\u7684\u4f18\u52bf\u8fd8\u662f\u5728\u4e8e\u53ef\u6301\u4e45\u5316 \u6307\u6807 \u4e8c\u53c9\u5806 \u5de6\u504f\u6811/\u659c\u5806 \u4e8c\u9879\u5806 \u6590\u6ce2\u90a3\u5951\u5806 \u914d\u5bf9\u5806 \u5efa\u5806 O(n) O(n) O(n) O(n) O(n) O(n) O(n) O(n) O(n) O(n) \u63d2\u5165\u8282\u70b9 O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(1) O(1) O(1) O(1) \u53d6\u6700\u503c\u8282\u70b9 O(1) O(1) O(1) O(1) O(log_2n) O(log_2n) O(1) O(1) O(1) O(1) \u5220\u9664\u6700\u503c\u8282\u70b9 O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) \u5220\u9664\u4efb\u610f \u5df2\u77e5 \u8282\u70b9 O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) \u5408\u5e76 O(nlog_2n) O(nlog_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(1) O(1) O(1) O(1) \u7a7a\u95f4 -- -- - - + + ++ ++ - - \u4ee3\u7801\u590d\u6742\u5ea6 -- -- - - ++ ++ +++ +++ - - \u5df2\u77e5 \uff1a\u8868\u793a\u77e5\u9053\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u503c\u3002 -- -- \u8868\u793a\u5f88\u5c0f\uff0c - - \u8868\u793a\u8f83\u5c0f\uff0c + + \u8868\u793a\u4e00\u822c\uff0c ++ ++ \u8868\u793a\u8f83\u5927\uff0c +++ +++ \u8868\u793a\u5f88\u5927\u3002 \u5de6\u504f\u6811\u7684\u57fa\u672c\u7ed3\u6784\u4e0e\u5806\u6709\u8bb8\u591a\u76f8\u4f3c\u4e4b\u5904\u3002\u5b83\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 x x \uff0c\u8bbe\u5176\u5de6\u513f\u5b50\u4e3a ls ls \uff0c\u53f3\u513f\u5b50\u4e3a rs rs \uff0c\u503c\u4e3a v_x v_x \u603b\u662f\u6ee1\u8db3 v_x \\le v_{ls},v_x\\le v_{rs} v_x \\le v_{ls},v_x\\le v_{rs} \uff08\u5982\u679c\u5b58\u5728\u5de6\u53f3\u513f\u5b50\uff09\u3002 \u518d\u6b21\u660e\u786e\u4e00\u904d\uff0c \u5de6\u504f\u6811\u4e0d\u662f\u5806\uff0c\u5b83\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811 \u3002\u201c\u5de6\u504f\u201d\u7684\u610f\u4e49\u5c31\u5728\u4e8e\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u5426\u5219\u4e00\u6761\u94fe\u5c31\u80fd\u628a\u590d\u6742\u5ea6\u5361\u5230 O(n^2) O(n^2) \uff09\u3002\u6765\u770b\u770b\u4f55\u4e3a\u201c\u5de6\u504f\u201d\u3002 \u5148\u8bb2\u4e00\u8bb2\u5916\u8282\u70b9\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u5de6\u513f\u5b50\u6216\u6ca1\u6709\u53f3\u513f\u5b50\uff08\u6216\u8005\u90fd\u6ca1\u6709\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u88ab\u79f0\u4e3a \u5916\u8282\u70b9 \u3002\u6211\u4eec\u8bbe dis_{x} dis_{x} \u8868\u793a x x \u4e0e\u6700\u8fd1\u7684\u5916\u8282\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\uff08\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\u4e3a1\uff09\u3002\u7279\u522b\u5730\uff0c\u7a7a\u8282\u70b90\u7684 dis dis \u4e3a -1 -1 \u3002\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u81ea\u7136\u5730\u5b8c\u6210\u5916\u8282\u70b9\u7684 dis dis \u4e3a0\uff09 \u5de6\u504f\u5373\u4e3a\u5bf9\u4e8e \u4efb\u610f\u8282\u70b9 x x \uff0c\u6ee1\u8db3 dis_{ls}\\ge dis_{rs} dis_{ls}\\ge dis_{rs} \u3002\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230 dis_x=dis_{rs}+1 dis_x=dis_{rs}+1 \uff09 \u4e3a\u4ec0\u4e48\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\u5462\uff1f \u5f88\u660e\u663e\uff0c\u4e00\u822c\u5730\uff0c\u8282\u70b9\u603b\u662f\u96c6\u4e2d\u4e8e\u5de6\u5b50\u6811\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u64cd\u4f5c\u96c6\u4e2d\u4e8e\u53f3\u5b50\u6811\u6765\u51cf\u5c11\u64cd\u4f5c\u3002 \u6765\u770b\u770b\u66f4\u4e25\u8c28\u7684\u8bc1\u660e\u3002 \u5f15\u7406\uff1a\u6700\u5927dis\u4e3ak\u7684\u5de6\u504f\u6811\u8282\u70b9\u4e2a\u6570\u81f3\u5c11\u4e3a 2^{k+1}-1 2^{k+1}-1 \uff08\u6ee1\u4e8c\u53c9\u6811\uff09\u3002 \u6211\u4eec\u8fd0\u7528\u53cd\u8bc1\u6cd5\u3002\u6211\u4eec\u5c06\u6df1\u5ea6\u5927\u4e8ek\u7684\u8282\u70b9\u53bb\u9664\uff0c\u5f97\u5230\u6811T\uff0c\u5982\u679c\u6811T\u4e0d\u662f\u6ee1\u4e8c\u53c9\u6811\uff0c\u5219\u6811T\u4e2d\u5fc5\u5b9a\u6709\u4e00\u4e2a\u5916\u8282\u70b9 x x \u6df1\u5ea6\u5c0f\u4e8ek\uff0c\u4e0e\u6839\u8282\u70b9dis\u4e3ak\u77db\u76fe\uff0c\u539f\u547d\u9898\u6210\u7acb\u3002 \u5b9a\u7406\uff1a \u7531\u5bf9\u4e8e\u4e00\u4e2a\u6709 n n \u4e2a\u8282\u70b9\u7684\u5de6\u504f\u6811\uff0c\u6700\u5927\u8ddd\u79bb\u4e0d\u8d85\u8fc7 \\log_2(n+1)-1 \\log_2(n+1)-1 \u8bc1\u660e \uff1a \u8bbe max\\{dist\\}=k max\\{dist\\}=k \uff0c\u7531\u5f15\u7406\u5f97 n\\geq 2^{k+1}-1 n\\geq 2^{k+1}-1 \uff0c\u79fb\u9879\u5f97\uff1a k\\leq \\log_2(n+1)-1 k\\leq \\log_2(n+1)-1 \u3002 \u8fd9\u5c31\u4fdd\u8bc1\u4e86 O(log_2n) O(log_2n) \u7684\u590d\u6742\u5ea6\u3002 \u5408\u5e76 \u00b6 \u5408\u5e76\u64cd\u4f5c\u4e0eFHQ Treap\u5341\u5206\u7c7b\u4f3c\uff0c\u5982\u679c\u4f60\u4f1aFHQ Treap\uff0c\u8fd9\u5c06\u5f88\u597d\u7406\u89e3\u3002 1 2 3 4 5 6 7 8 int Merge ( int x , int y ){ if ( ! x || ! y ){ return x | y ; } //\u5982\u679c\u6709\u4e00\u4e2a\u5806\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u5806 if ( val [ x ] > val [ y ] || ( val [ x ] == val [ y ] && x > y ) ) swap ( x , y ); //\u4f7fx\u7684\u503c\u5c0f\u4e8ey(\u5c06x\u505a\u4e3a\u6839\u8282\u70b9) R [ x ] = Merge ( R [ x ], y ); fa [ R [ x ]] = x ; //R[x]\u53ef\u80fd\u5df2\u88ab\u66f4\u6539\uff0c\u66f4\u65b0R[x]\u7684\u7236\u4eb2 if ( dis [ L [ x ]] < dis [ R [ x ]] ) swap ( L [ x ], R [ x ] ); //\u7ef4\u6301\u5de6\u504f\u6027\u8d28 dis [ x ] = dis [ R [ x ]] + 1 ; //\u66f4\u65b0dis return x ; } val[x] \u8bb0\u5f55\u8be5\u8282\u70b9\u4fdd\u5b58\u7684\u503c\uff0c L[x] \u8868\u793a x x \u7684\u5de6\u513f\u5b50\uff08\u6ca1\u6709\u7684\u8bdd\u5c31\u4e3a0\uff09\uff0c R[x] \u8868\u793a x x \u7684\u53f3\u513f\u5b50\uff08\u6ca1\u6709\u7684\u8bdd\u5c31\u4e3a0\uff09\u3002 fa[x] \u8bb0\u5f55\u8be5\u8282\u70b9\u7684\u7236\u4eb2\u3002 Merge\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4e24\u4e2a\u5806\uff08\u5df2\u77e5\u6839\u8282\u70b9\uff09\u5408\u5e76\u6210\u4e00\u4e2a\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002\u7531\u4e8e\u8981\u4fdd\u6301\u5806\u7684\u6027\u8d28\uff0c\u6839\u8282\u70b9\u7684\u503c\u80af\u5b9a\u8981\u662f\u6700\u5c0f\u7684\u3002\u8981\u5408\u5e76\u7684\u4e24\u4e2a\u5806\u4e2d\uff0c\u503c\u6700\u5c0f\u7684\u80af\u5b9a\u662f x x \u4e0e y y \uff0c\u5982\u679c y y \u7684\u503c\u6bd4 x x \u5c0f\uff0c\u90a3 x x \u80af\u5b9a\u4e0d\u80fd\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019 x x \u4e0d\u80fd\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u53ea\u80fd\u628a y y \u4f5c\u4e3a\u6839\u8282\u70b9\u4e86\u3002\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u4eec\u76f4\u63a5\u4ea4\u6362x\u4e0ey\uff08\u6ce8\u610f\uff1a\u4e0d\u662fval\uff0c\u4ea4\u6362\u7684\u662f\u4e24\u4e2a\u5806\u7684\u4f4d\u7f6e\uff09\u3002\u8fd9\u6837 x x \u5c31\u80af\u5b9a\u4e3a\u6839\u8282\u70b9\u4e86\u3002\u6211\u4eec\u4e0d\u6539\u53d8 x x \u7684\u5de6\u5b50\u6811\uff08\u56e0\u4e3a\u662f\u5de6\u504f\u7684\u561b\uff0c\u5de6\u5b50\u6811\u592a\u8d39\u65f6\uff09\uff0c\u5c06\u539f\u6765 x x \u7684\u53f3\u5b50\u6811\u4e0e y y \u5408\u5e76\u4f5c\u4e3a x x \u7684\u53f3\u5b50\u6811\u3002\u6ce8\u610f\u8981\u66f4\u65b0 dis dis \u4e0e fa fa \u7684\u503c\u3002 \u8fd8\u6709\u4e00\u4e2a\u524d\u9762\u63d0\u5230\u8fc7\u7684\u5c0f\u7ec6\u8282\uff1a dis[0] \u5728\u4e3b\u7a0b\u5e8f\u4e2d\u5fc5\u987b\u8d4b\u4e3a-1 \u5220\u9664 \u00b6 \u5220\u9664\u6839\u8282\u70b9\u64cd\u4f5c\u5c31\u66f4\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u5408\u5e76\u5de6\u53f3\u513f\u5b50\u5373\u53ef\u3002 1 2 #define Del(x) val[x] = -1, fa[L[x]] = fa[R[x]] = 0, Merge( L[x], R[x] ) //\u6ce8\u610f\u5148\u628a\u7236\u4eb2\u8d4b\u4e3a0 \u4f8b\u9898 \u00b6 \u6d1b\u8c37 P3377 \u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09 \u00b6 \u6a21\u677f\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <bits/stdc++.h> using namespace std ; #define MAXN 100005 int N , M , t ; int L [ MAXN ], R [ MAXN ]; int fa [ MAXN ], val [ MAXN ], dis [ MAXN ]; int Merge ( int x , int y ){ if ( ! x || ! y ){ return x | y ; } if ( val [ x ] > val [ y ] || ( val [ x ] == val [ y ] && x > y ) ) swap ( x , y ); R [ x ] = Merge ( R [ x ], y ); if ( dis [ L [ x ]] < dis [ R [ x ]] ) swap ( L [ x ], R [ x ] ); dis [ x ] = dis [ R [ x ]] + 1 ; return x ; } #define Del(x) ( val[x] = -1, Merge( L[x], R[x] ) ) int find ( int x ){ return x == fa [ x ] ? x : ( fa [ x ] = find ( fa [ x ]) ); } //\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u66b4\u529b\u8df3\uff0c\u56e0\u4e3a\u5de6\u504f\u6811\u53ea\u80fd\u4fdd\u8bc1\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\uff0c\u5982\u679c\u662f\u5de6\u5b50\u6811\u66b4\u529b\u5f80\u4e0a\u8df3\u5c31\u53ef\u80fd\u9000\u5316\u6210O(N^2) int main (){ scanf ( \"%d%d\" , & N , & M ); for ( int i = 1 ; i <= N ; ++ i ) scanf ( \"%d\" , & val [ i ] ), fa [ i ] = i ; dis [ 0 ] = - 1 ; for ( int i = 1 ; i <= M ; ++ i ){ int opt , x , y ; scanf ( \"%d\" , & opt ); if ( opt == 1 ){ scanf ( \"%d%d\" , & x , & y ); if ( val [ x ] == - 1 || val [ y ] == - 1 ) continue ; x = find ( x ); y = find ( y ); if ( x != y ) fa [ x ] = fa [ y ] = Merge ( x , y ); } else { scanf ( \"%d\" , & x ); if ( val [ x ] == - 1 ) printf ( \"-1 \\n \" ); else printf ( \"%d \\n \" , val [ x = find ( x )] ), t = Del ( x ), fa [ t ] = fa [ x ] = t ; } } return 0 ; } \u6d1b\u8c37 P1456 Monkey King \u00b6 \u8fd9\u9898\u8981\u4fee\u6539\u503c\u3002\u3002\u3002\u5176\u5b9e\u66b4\u529b\u4e00\u70b9\uff0c\u76f4\u63a5\u5220\u53bb\uff0c\u518d\u5408\u5e76\u5c31OK\u3002\u3002\u3002 \u5177\u4f53\u4e00\u70b9\uff1a \u5220\u53bb\u4e24\u4e2a\u5de6\u504f\u6811\u7684\u6839\u8282\u70b9\uff08\u7528x\u3001y\u4fdd\u5b58\u7f16\u53f7\uff0ct1\u3001t2\u4fdd\u5b58\u5220\u53bbx\u3001y\u540e\u7684\u5de6\u504f\u6811\u6839\u8282\u70b9\u7f16\u53f7\uff09\uff08\u5220\u9664\u65b9\u6cd5\u540c\u4e0a\uff09 val[x] \u4e0e val[y] \u51cf\u534a \u521d\u59cb\u5316x\u3001y\uff08 L[x]=R[x]=fa[x]=0 \uff0cy\u4e5f\u4e00\u6837\uff09 \u5408\u5e76x\u3001y\u3001t1\u3001t2 \u8fd4\u56de val[\u6839\u8282\u70b9] \u4e0d\u96be\u7406\u89e3\u5427\uff1f\u6ce8\u610f\u4e00\u4e2a\u5c0f\u4f18\u5316\uff0c\u5148\u5408\u5e76x\u3001y\u3002\u56e0\u4e3ax\u3001y\u90fd\u53ea\u5269\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u5408\u5e76\u590d\u6742\u5ea6\u662f O(1) O(1) \u7684\u3002\u8fd9\u53ea\u662f\u4f18\u5316\u5e38\u6570\uff0c\u4e0d\u4f18\u5316\u4e5f\u80fd\u8fc7\u3002 \u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 int fight ( int x , int y ){ x = find ( x ); y = find ( y ); if ( x == y ) return - 1 ; fa [ L [ x ]] = fa [ R [ x ]] = fa [ L [ y ]] = fa [ R [ y ]] = 0 ; int t1 , t2 ; t1 = Merge ( L [ x ], R [ x ] ); t2 = Merge ( L [ y ], R [ y ] ); val [ x ] >>= 1 ; val [ y ] >>= 1 ; L [ x ] = R [ x ] = L [ y ] = R [ y ] = dis [ x ] = dis [ y ] = 0 ; x = Merge ( x , y ); x = Merge ( x , t1 ); x = Merge ( x , t2 ); return val [ x ]; } \u8fd8\u6709\u4e00\u4e2a\u7325\u7410\u7684\u5751\u70b9\uff1a\u591a\u7ec4\u6570\u636e\uff01\u8bb0\u5f97\u521d\u59cb\u5316\u3002 \u6d1b\u8c37 P1552 [APIO2012]\u6d3e\u9063 \u00b6 \u5bf9\u4e8e\u6bcf\u4e2a\u5fcd\u8005\uff0c\u5bf9\u5176\u6240\u6709\u4e0b\u5c5e(\u5b50\u6811\u5185\u6240\u6709\u5143\u7d20\uff0c\u5305\u62ec\u81ea\u5df1)\u5efa\u5806\uff0c\u56e0\u4e3a\u6240\u6709\u5fcd\u8005\u90fd\u662f\u7b49\u4ef7\u7684\uff0c\u6240\u4ee5\u5f53\u8d85\u8fc7\u9884\u7b97\u65f6\uff0c\u5c06\u6700\u8d35\u7684\u5fcd\u8005\u5220\u53bb\uff0c\u76f4\u5230\u5c06\u4ef7\u683c\u63a7\u5236\u5728\u9884\u7b97\u8303\u56f4\u5185\uff0c\u53ef\u4ee5\u5f97\u51fa\u7531\u8be5\u5fcd\u8005\u9886\u5bfc\u80fd\u5f97\u5230\u7684\u6700\u5927\u6ee1\u610f\u5ea6\u3002 \u5f53\u7136\uff0c\u771f\u7684\u5bf9\u6240\u6709\u5b50\u6811\u5efa\u5806\u4e0d\u73b0\u5b9e\u3002\u56e0\u4e3a\u5728\u67d0\u4e2a\u5fcd\u8005\u6ca1\u6709\u7528\u5230\u7684\u4e0b\u5c5e\uff0c\u5176\u6240\u6709\u4e0a\u53f8\u90fd\u4e0d\u4f1a\u518d\u7528\u5230\u3002\u6240\u4ee5\u6bcf\u6b21\u505a\u5b8c\u540e\uff0c\u76f4\u63a5\u5408\u5e76\u5230\u76f4\u63a5\u4e0a\u53f8\u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; #define MAXN 100005 #define LL long long #define rgt register int N , M , t ; int B [ MAXN ], L [ MAXN ], rt [ MAXN ], sz [ MAXN ]; int l [ MAXN ], r [ MAXN ], dist [ MAXN ], val [ MAXN ]; LL sum [ MAXN ], ans ; int Merge ( rgt int x , rgt int y ){ if ( ! x || ! y ) return x | y ; if ( val [ x ] < val [ y ] || ( val [ x ] == val [ y ] && x > y ) ) swap ( x , y ); r [ x ] = Merge ( r [ x ], y ); if ( dist [ l [ x ]] < dist [ r [ x ]] ) swap ( l [ x ], r [ x ] ); dist [ x ] = dist [ r [ x ]] + 1 ; return x ; } int main (){ scanf ( \"%d%d\" , & N , & M ); dist [ 0 ] = - 1 ; for ( rgt int i = 1 ; i <= N ; ++ i ) scanf ( \"%d%d%d\" , & B [ i ], & val [ i ], & L [ i ] ), sum [ i ] = val [ i ], rt [ i ] = i , sz [ i ] = 1 ; for ( rgt int i = N , x ; i >= 1 ; -- i ){ while ( sum [ i ] > M ) sum [ i ] -= val [ rt [ i ]], rt [ i ] = Merge ( l [ rt [ i ]], r [ rt [ i ]] ), -- sz [ i ]; ans = max ( ans , 1ll * L [ i ] * sz [ i ] ); if ( B [ i ] ) sz [ B [ i ]] += sz [ i ], sum [ B [ i ]] += sum [ i ], rt [ B [ i ]] = Merge ( rt [ B [ i ]], rt [ i ] ); } printf ( \"%lld \\n \" , ans ); return 0 ; } \u6d1b\u8c37 P3261 [JLOI2015]\u57ce\u6c60\u653b\u5360 \u00b6 \u8fd8\u662f\u5efa\u5de6\u504f\u6811\uff0c\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u4e0d\u65ad\u5408\u5e76\u5230\u5176\u7236\u4eb2\u8282\u70b9\uff0c\u5c06\u6218\u6597\u529b\u4e0d\u591f\u7684\u5168\u90e8\u5f39\u51fa\u5373\u53ef\u3002\u5f39\u51fa\u65f6\u53ef\u4ee5\u8bb0\u5f55\u5176\u6b7b\u53bb\u57ce\u5e02\u7684\u6df1\u5ea6\uff0c\u4e0e\u5176\u521d\u59cb\u57ce\u5e02\u6df1\u5ea6\u7684\u5dee\u5373\u4e3a\u653b\u5360\u57ce\u6c60\u6570\u3002 \u800c\u6bcf\u4e2a\u57ce\u5e02\u727a\u7272\u7684\u9a91\u58eb\u6570\uff0c\u8bb0\u5f55\u5728\u8be5\u57ce\u5e02\u5f39\u51fa\u51e0\u6b21\u5373\u53ef\u3002 \u6218\u6597\u529b\u53d8\u5316\u53ef\u4ee5\u50cf\u7ebf\u6bb5\u6811\u90a3\u6837\u6253\u4e2a\u61d2\u6807\u8bb0\uff0c\u4e0d\u96be\u5b9e\u73b0\u3002 \u522b\u5fd8\u4e86\u6700\u540e\u8fd8 \u8001\u4e0d\u6b7b \u6d3b\u7740\u7684\u9a91\u58eb\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <bits/stdc++.h> using namespace std ; #define MAXN 300005 #define i64 long long #define getchar() ( p1 == p2 && ( p1 = bf, p2 = bf + fread( bf, 1, 1 << 21, stdin ), p1 == p2 ) ? EOF : *p1++ ) char bf [ 1 << 21 ], * p1 , * p2 ; template < typename T > inline void read ( T & x ){ x = 0 ; char t ( getchar ()), flg ( 0 ); for ( ; ! isdigit ( t ); t = getchar () ) flg = t == '-' ; for ( ; isdigit ( t ); t = getchar () ) x = x * 10 + ( t & 15 ); flg ? x = - x : x ; } int N , M , w [ MAXN ], r [ MAXN ], c [ MAXN ]; i64 h [ MAXN ], v [ MAXN ], s [ MAXN ], t1 [ MAXN ], t2 [ MAXN ]; int d [ MAXN ], ls [ MAXN ], rs [ MAXN ], f [ MAXN ], a [ MAXN ], ans [ MAXN ], sm [ MAXN ]; inline void swp ( int & x , int & y ){ x ^= y ^= x ^= y ; } inline void tag1 ( int c , i64 x ){ if ( c ) t1 [ c ] += x , s [ c ] += x ; } inline void tag2 ( int c , i64 x ){ if ( c ) t2 [ c ] *= x , t1 [ c ] *= x , s [ c ] *= x ; } inline void pushdown ( int c ){ if ( t2 [ c ] != 1 ) tag2 ( ls [ c ], t2 [ c ]), tag2 ( rs [ c ], t2 [ c ]), t2 [ c ] = 1 ; if ( t1 [ c ] ) tag1 ( ls [ c ], t1 [ c ]), tag1 ( rs [ c ], t1 [ c ]), t1 [ c ] = 0 ; } int Merge ( int x , int y ){ if ( ! x || ! y ) return x | y ; pushdown ( x ), pushdown ( y ); if ( s [ x ] > s [ y ] ) swp ( x , y ); rs [ x ] = Merge ( rs [ x ], y ); if ( d [ ls [ x ]] < d [ rs [ x ]] ) swp ( ls [ x ], rs [ x ] ); d [ x ] = d [ rs [ x ]] + 1 ; return x ; } inline void pop ( int & x ){ pushdown ( x ), x = Merge ( ls [ x ], rs [ x ] ); } int main (){ read ( N ), read ( M ); for ( int i = 1 ; i <= N ; ++ i ) read ( h [ i ]); for ( int i = 2 ; i <= N ; ++ i ) read ( f [ i ]), read ( a [ i ]), read ( v [ i ]); for ( int i = 1 ; i <= M ; ++ i ) t2 [ i ] = 1 , read ( s [ i ]), read ( c [ i ]), r [ c [ i ]] = Merge ( r [ c [ i ]], i ); for ( int i = 1 ; i <= N ; ++ i ) w [ i ] = w [ f [ i ]] + 1 ; for ( int i = N ; i ; -- i ){ while ( r [ i ] && s [ r [ i ]] < h [ i ] ) sm [ r [ i ]] = w [ c [ r [ i ]]] - w [ i ], pop ( r [ i ]), ++ ans [ i ]; a [ i ] ? tag2 ( r [ i ], v [ i ]) : tag1 ( r [ i ], v [ i ]), r [ f [ i ]] = Merge ( r [ f [ i ]], r [ i ] ); } while ( r [ 0 ] ) sm [ r [ 0 ]] = w [ c [ r [ 0 ]]], pop ( r [ 0 ]); for ( int i = 1 ; i <= N ; ++ i ) printf ( \"%d \\n \" , ans [ i ] ); for ( int i = 1 ; i <= M ; ++ i ) printf ( \"%d \\n \" , sm [ i ] ); return 0 ; } \u6d1b\u8c37 P4971 \u65ad\u7f6a\u8005 \u00b6 \u636e\u8bf4\u8fd9\u9898\u6709\u95ee\u9898\u3002\"\u6700\u5927\u7f6a\u6076\u503c\u7684\u4e8b\"\u53ef\u80fd\u6709\u591a\u4e2a\u3002\u5e76\u4e14\u4e24\u4ef6\u4e8b\u5373\u4f7f\u7f6a\u6076\u503c\u76f8\u540c,\u5b83\u4eec\u4e5f\u4e0d\u80fd\u7b49\u4ef7\u3002 \u6240\u4ee5\u8fd9\u9898\u53ea\u80fd\u5199\u5f97\u548c\u6807\u7b97\u4e00\u6837\u3002\u4f46\u662f\u4f3c\u4e4e\u4e5f\u4e0d\u662f\u5f88\u79d1\u5b66\uff0c\u56e0\u4e3a\u5220\u9664\u4efb\u610f\u8282\u70b9\u65f6\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u94fe\u4e0adis\u90fd\u9700\u8981\u66f4\u65b0\uff0c\u8fd9\u53ef\u80fd\u4f1a\u9000\u5316\u6210O(N)\uff0c\u800c\u6807\u7b97\u4e2d\u6839\u672c\u5c31\u6ca1\u6709\u66f4\u65b0\u3002\u4e0d\u8fc7dis\u53ea\u662f\u4e00\u4e2a\u4fdd\u8bc1\u5e73\u8861\u7684\u4e1c\u897f\uff0c\u56e0\u6b64\u4e0d\u4f1a\u5f71\u54cd\u6b63\u786e\u6027\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> using namespace std ; #define MAXN 2000005 #define getchar() ( ( p1 == p2 ? p1 = bf, p2 = bf + fread( bf, 1, 1 << 21, stdin ), p1 : p1 ) == p2 ? EOF : *p1++ ) #define rgt register #define LL long long #define int long long char bf [ 1 << 21 ], * p1 , * p2 ; template < typename T > void read ( rgt T & x ){ x = 0 ; rgt char t ( getchar ()); bool flg ( 0 ); for ( ; ! isdigit ( t ); t = getchar () ) if ( t == '-' ) flg = 1 ; for ( ; isdigit ( t ); t = getchar () ) x = x * 10 + ( t & 15 ); x = flg ? - x : x ; } int T , W , K , N , M ; LL sum , mx ; int L [ MAXN ], R [ MAXN ], val [ MAXN ], dis [ MAXN ], fa [ MAXN ]; bool vis [ MAXN ]; int find ( rgt int x ){ return fa [ x ] == x ? x : ( fa [ x ] = find ( fa [ x ]) ); } int Merge ( rgt int x , rgt int y ){ if ( ! x || ! y ) return x | y ; if ( val [ x ] < val [ y ] ) swap ( x , y ); fa [ R [ x ] = Merge ( R [ x ], y )] = x ; if ( dis [ L [ x ]] < dis [ R [ x ]] ) swap ( L [ x ], R [ x ] ); dis [ x ] = dis [ R [ x ]] + 1 ; return x ; } inline void dec ( int x , int v , bool flg ){ val [ x ] = max ( val [ x ] - v , 0ll ); fa [ L [ x ]] = L [ x ]; fa [ R [ x ]] = R [ x ]; int l ( L [ x ]), r ( R [ x ]), t ; L [ x ] = R [ x ] = dis [ x ] = 0 ; t = Merge ( l , r ); flg ? Merge ( find ( x ), t ) : Merge ( t , x ); } signed main (){ read ( T ); read ( W ); read ( K ); dis [ 0 ] = - 1 ; while ( T -- ){ read ( N ); read ( M ); for ( rgt int i = 1 ; i <= N ; ++ i ) read ( val [ i ]), L [ i ] = R [ i ] = dis [ i ] = 0 , fa [ i ] = i , vis [ i ] = 0 ; for ( rgt int i = 1 , opt , x , y ; i <= M ; ++ i ){ read ( opt ); read ( x ); if ( opt == 2 ) dec ( x , val [ x ], 1 ); else if ( opt == 3 ) read ( y ), dec ( find ( x ), y , 0 ); else read ( y ), Merge ( find ( x ), find ( y ) ); } sum = 0 ; mx = 0 ; for ( int i = 1 , t ; i <= N ; ++ i ){ t = find ( i ); if ( ! vis [ t ] ) vis [ t ] = 1 , mx = max ( ( LL ) val [ t ], mx ), sum += val [ t ]; } if ( W == 2 ) sum -= mx ; if ( W == 3 ) sum += mx ; if ( ! sum ) printf ( \"Gensokyo 0 \\n \" ); else printf ( ( sum <= K ? \"Heaven %lld \\n \" : \"Hell %lld \\n \" ), sum ); } return 0 ; } \u4e0d\u8fc7\u8fd9\u9898\u6bd4\u8f83\u6709\u8da3\u7684\u662f\u5220\u9664\u4efb\u610f\u8282\u70b9\u3002 \u5bf9\u6b64\uff0c\u5982\u679c\u9898\u76ee\u4e0d\u51fa\u9505\u7684\u8bdd\uff0c\u5220\u9664\u4efb\u610f\u8282\u70b9\u8fd8\u53ef\u4ee5\u6253\u6807\u8bb0\u6765\u5b9e\u73b0\uff0c\u5373\u4e0d\u771f\u7684\u5220\u9664\uff0c\u7559\u5728\u8fd9\u91cc\uff0c\u7b49\u5230\u5806\u9876\u518d\u5220\u9664\u5806\u9876\uff0c\u548c\u66ff\u7f6a\u7f8a\u6811\u7684\u5220\u9664\u65b9\u5f0f\u6bd4\u8f83\u50cf\u3002 \u6d1b\u8c37 P3642 [APIO2016]\u70df\u706b\u8868\u6f14 \u00b6 \u6d1b\u8c37 P4331 [BOI2004]Sequence \u6570\u5b57\u5e8f\u5217 \u00b6 \u6d1b\u8c37 P2483 \u3010\u6a21\u677f\u3011k\u77ed\u8def\uff08[SDOI2010]\u9b54\u6cd5\u732a\u5b66\u9662\uff09 \u00b6 A* \u88ab\u5361\u6389\u4e86qwq\uff0c\u53ea\u597d\u7528\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u505a\u3002","title":"\u5de6\u504f\u6811"},{"location":"ds/leftist-tree/#_1","text":"\u5de6\u504f\u6811\u662f\u4e00\u79cd\u53ef\u4ee5\u5408\u5e76\u7684\u201c\u5806\u201d\u3002\u8fd9\u91cc\u6253\u4e86\u5f15\u53f7\uff0c\u662f\u56e0\u4e3a\u5de6\u504f\u6811 \u5e76\u4e0d\u662f\u5806 \uff0c\u4f46\u662f\u80fd\u5b8c\u6210\u4e0e\u5806\u7c7b\u4f3c\u7684\u529f\u80fd\u3002 \u800c\u4e14\u8fd8\u80fd\u652f\u6301\u53ef\u6301\u4e45\u5316 \u3002 \u5728\u53ef\u5408\u5e76\u5bf9\u4e2d\uff0c\u5de6\u504f\u6811\u662f\u6700\u5e38\u7528\u7684\u3002\u867d\u7136\u5b83\u7684\u6548\u7387\u4e0d\u53ca\u6590\u6ce2\u90a3\u5951\u5806\u4e0e\u914d\u5bf9\u5806\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u662f\u540c\u4e00\u4e2a\u7ea7\u522b\uff0c\u5355\u6b21\u64cd\u4f5c\u6700\u574f\u60c5\u51b5\u4e0b\u90fd\u662f O(log_2n) O(log_2n) \u7684\u3002\u800c\u4e14\u4e0d\u50cf\u6590\u6ce2\u90a3\u5951\u5806\uff0c\u7801\u91cf\u5927\uff0c\u96be\u7406\u89e3\uff0c\u5728\u7ade\u8d5b\u4e2d\u7528\u592a\u4e0d\u5408\u7b97\u4e86\uff0c\u914d\u5bf9\u5806\u4e0d\u8d44\u74f7\u53ef\u6301\u4e45\u5316\u3002\u3002\u3002\u3002\u3002 \u653e\u5f20\u8868\u683c\uff0c\u770b\u770b\u4f60\u6253\u7b97\u5b66\u54ea\u79cd\uff1f\u8fd9\u91cc\uff08\u76ee\u524d\uff09\u53ea\u6709\u5de6\u504f\u6811\u3002 \u5176\u4ed6\u7684\u9664\u4e86\u4e8c\u53c9\u5806\u535a\u4e3b\u90fd\u4e0d\u4f1a \uff08\u8bdd\u8bf4\u5de6\u504f\u6811\u4e3b\u8981\u7684\u4f18\u52bf\u8fd8\u662f\u5728\u4e8e\u53ef\u6301\u4e45\u5316 \u6307\u6807 \u4e8c\u53c9\u5806 \u5de6\u504f\u6811/\u659c\u5806 \u4e8c\u9879\u5806 \u6590\u6ce2\u90a3\u5951\u5806 \u914d\u5bf9\u5806 \u5efa\u5806 O(n) O(n) O(n) O(n) O(n) O(n) O(n) O(n) O(n) O(n) \u63d2\u5165\u8282\u70b9 O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(1) O(1) O(1) O(1) \u53d6\u6700\u503c\u8282\u70b9 O(1) O(1) O(1) O(1) O(log_2n) O(log_2n) O(1) O(1) O(1) O(1) \u5220\u9664\u6700\u503c\u8282\u70b9 O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) \u5220\u9664\u4efb\u610f \u5df2\u77e5 \u8282\u70b9 O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) \u5408\u5e76 O(nlog_2n) O(nlog_2n) O(log_2n) O(log_2n) O(log_2n) O(log_2n) O(1) O(1) O(1) O(1) \u7a7a\u95f4 -- -- - - + + ++ ++ - - \u4ee3\u7801\u590d\u6742\u5ea6 -- -- - - ++ ++ +++ +++ - - \u5df2\u77e5 \uff1a\u8868\u793a\u77e5\u9053\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u503c\u3002 -- -- \u8868\u793a\u5f88\u5c0f\uff0c - - \u8868\u793a\u8f83\u5c0f\uff0c + + \u8868\u793a\u4e00\u822c\uff0c ++ ++ \u8868\u793a\u8f83\u5927\uff0c +++ +++ \u8868\u793a\u5f88\u5927\u3002 \u5de6\u504f\u6811\u7684\u57fa\u672c\u7ed3\u6784\u4e0e\u5806\u6709\u8bb8\u591a\u76f8\u4f3c\u4e4b\u5904\u3002\u5b83\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 x x \uff0c\u8bbe\u5176\u5de6\u513f\u5b50\u4e3a ls ls \uff0c\u53f3\u513f\u5b50\u4e3a rs rs \uff0c\u503c\u4e3a v_x v_x \u603b\u662f\u6ee1\u8db3 v_x \\le v_{ls},v_x\\le v_{rs} v_x \\le v_{ls},v_x\\le v_{rs} \uff08\u5982\u679c\u5b58\u5728\u5de6\u53f3\u513f\u5b50\uff09\u3002 \u518d\u6b21\u660e\u786e\u4e00\u904d\uff0c \u5de6\u504f\u6811\u4e0d\u662f\u5806\uff0c\u5b83\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811 \u3002\u201c\u5de6\u504f\u201d\u7684\u610f\u4e49\u5c31\u5728\u4e8e\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u5426\u5219\u4e00\u6761\u94fe\u5c31\u80fd\u628a\u590d\u6742\u5ea6\u5361\u5230 O(n^2) O(n^2) \uff09\u3002\u6765\u770b\u770b\u4f55\u4e3a\u201c\u5de6\u504f\u201d\u3002 \u5148\u8bb2\u4e00\u8bb2\u5916\u8282\u70b9\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u5de6\u513f\u5b50\u6216\u6ca1\u6709\u53f3\u513f\u5b50\uff08\u6216\u8005\u90fd\u6ca1\u6709\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u88ab\u79f0\u4e3a \u5916\u8282\u70b9 \u3002\u6211\u4eec\u8bbe dis_{x} dis_{x} \u8868\u793a x x \u4e0e\u6700\u8fd1\u7684\u5916\u8282\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\uff08\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\u4e3a1\uff09\u3002\u7279\u522b\u5730\uff0c\u7a7a\u8282\u70b90\u7684 dis dis \u4e3a -1 -1 \u3002\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u81ea\u7136\u5730\u5b8c\u6210\u5916\u8282\u70b9\u7684 dis dis \u4e3a0\uff09 \u5de6\u504f\u5373\u4e3a\u5bf9\u4e8e \u4efb\u610f\u8282\u70b9 x x \uff0c\u6ee1\u8db3 dis_{ls}\\ge dis_{rs} dis_{ls}\\ge dis_{rs} \u3002\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230 dis_x=dis_{rs}+1 dis_x=dis_{rs}+1 \uff09 \u4e3a\u4ec0\u4e48\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\u5462\uff1f \u5f88\u660e\u663e\uff0c\u4e00\u822c\u5730\uff0c\u8282\u70b9\u603b\u662f\u96c6\u4e2d\u4e8e\u5de6\u5b50\u6811\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u64cd\u4f5c\u96c6\u4e2d\u4e8e\u53f3\u5b50\u6811\u6765\u51cf\u5c11\u64cd\u4f5c\u3002 \u6765\u770b\u770b\u66f4\u4e25\u8c28\u7684\u8bc1\u660e\u3002 \u5f15\u7406\uff1a\u6700\u5927dis\u4e3ak\u7684\u5de6\u504f\u6811\u8282\u70b9\u4e2a\u6570\u81f3\u5c11\u4e3a 2^{k+1}-1 2^{k+1}-1 \uff08\u6ee1\u4e8c\u53c9\u6811\uff09\u3002 \u6211\u4eec\u8fd0\u7528\u53cd\u8bc1\u6cd5\u3002\u6211\u4eec\u5c06\u6df1\u5ea6\u5927\u4e8ek\u7684\u8282\u70b9\u53bb\u9664\uff0c\u5f97\u5230\u6811T\uff0c\u5982\u679c\u6811T\u4e0d\u662f\u6ee1\u4e8c\u53c9\u6811\uff0c\u5219\u6811T\u4e2d\u5fc5\u5b9a\u6709\u4e00\u4e2a\u5916\u8282\u70b9 x x \u6df1\u5ea6\u5c0f\u4e8ek\uff0c\u4e0e\u6839\u8282\u70b9dis\u4e3ak\u77db\u76fe\uff0c\u539f\u547d\u9898\u6210\u7acb\u3002 \u5b9a\u7406\uff1a \u7531\u5bf9\u4e8e\u4e00\u4e2a\u6709 n n \u4e2a\u8282\u70b9\u7684\u5de6\u504f\u6811\uff0c\u6700\u5927\u8ddd\u79bb\u4e0d\u8d85\u8fc7 \\log_2(n+1)-1 \\log_2(n+1)-1 \u8bc1\u660e \uff1a \u8bbe max\\{dist\\}=k max\\{dist\\}=k \uff0c\u7531\u5f15\u7406\u5f97 n\\geq 2^{k+1}-1 n\\geq 2^{k+1}-1 \uff0c\u79fb\u9879\u5f97\uff1a k\\leq \\log_2(n+1)-1 k\\leq \\log_2(n+1)-1 \u3002 \u8fd9\u5c31\u4fdd\u8bc1\u4e86 O(log_2n) O(log_2n) \u7684\u590d\u6742\u5ea6\u3002","title":"\u5de6\u504f\u6811"},{"location":"ds/leftist-tree/#_2","text":"\u5408\u5e76\u64cd\u4f5c\u4e0eFHQ Treap\u5341\u5206\u7c7b\u4f3c\uff0c\u5982\u679c\u4f60\u4f1aFHQ Treap\uff0c\u8fd9\u5c06\u5f88\u597d\u7406\u89e3\u3002 1 2 3 4 5 6 7 8 int Merge ( int x , int y ){ if ( ! x || ! y ){ return x | y ; } //\u5982\u679c\u6709\u4e00\u4e2a\u5806\u4e3a0\uff0c\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u5806 if ( val [ x ] > val [ y ] || ( val [ x ] == val [ y ] && x > y ) ) swap ( x , y ); //\u4f7fx\u7684\u503c\u5c0f\u4e8ey(\u5c06x\u505a\u4e3a\u6839\u8282\u70b9) R [ x ] = Merge ( R [ x ], y ); fa [ R [ x ]] = x ; //R[x]\u53ef\u80fd\u5df2\u88ab\u66f4\u6539\uff0c\u66f4\u65b0R[x]\u7684\u7236\u4eb2 if ( dis [ L [ x ]] < dis [ R [ x ]] ) swap ( L [ x ], R [ x ] ); //\u7ef4\u6301\u5de6\u504f\u6027\u8d28 dis [ x ] = dis [ R [ x ]] + 1 ; //\u66f4\u65b0dis return x ; } val[x] \u8bb0\u5f55\u8be5\u8282\u70b9\u4fdd\u5b58\u7684\u503c\uff0c L[x] \u8868\u793a x x \u7684\u5de6\u513f\u5b50\uff08\u6ca1\u6709\u7684\u8bdd\u5c31\u4e3a0\uff09\uff0c R[x] \u8868\u793a x x \u7684\u53f3\u513f\u5b50\uff08\u6ca1\u6709\u7684\u8bdd\u5c31\u4e3a0\uff09\u3002 fa[x] \u8bb0\u5f55\u8be5\u8282\u70b9\u7684\u7236\u4eb2\u3002 Merge\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4e24\u4e2a\u5806\uff08\u5df2\u77e5\u6839\u8282\u70b9\uff09\u5408\u5e76\u6210\u4e00\u4e2a\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002\u7531\u4e8e\u8981\u4fdd\u6301\u5806\u7684\u6027\u8d28\uff0c\u6839\u8282\u70b9\u7684\u503c\u80af\u5b9a\u8981\u662f\u6700\u5c0f\u7684\u3002\u8981\u5408\u5e76\u7684\u4e24\u4e2a\u5806\u4e2d\uff0c\u503c\u6700\u5c0f\u7684\u80af\u5b9a\u662f x x \u4e0e y y \uff0c\u5982\u679c y y \u7684\u503c\u6bd4 x x \u5c0f\uff0c\u90a3 x x \u80af\u5b9a\u4e0d\u80fd\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019 x x \u4e0d\u80fd\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u53ea\u80fd\u628a y y \u4f5c\u4e3a\u6839\u8282\u70b9\u4e86\u3002\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u4eec\u76f4\u63a5\u4ea4\u6362x\u4e0ey\uff08\u6ce8\u610f\uff1a\u4e0d\u662fval\uff0c\u4ea4\u6362\u7684\u662f\u4e24\u4e2a\u5806\u7684\u4f4d\u7f6e\uff09\u3002\u8fd9\u6837 x x \u5c31\u80af\u5b9a\u4e3a\u6839\u8282\u70b9\u4e86\u3002\u6211\u4eec\u4e0d\u6539\u53d8 x x \u7684\u5de6\u5b50\u6811\uff08\u56e0\u4e3a\u662f\u5de6\u504f\u7684\u561b\uff0c\u5de6\u5b50\u6811\u592a\u8d39\u65f6\uff09\uff0c\u5c06\u539f\u6765 x x \u7684\u53f3\u5b50\u6811\u4e0e y y \u5408\u5e76\u4f5c\u4e3a x x \u7684\u53f3\u5b50\u6811\u3002\u6ce8\u610f\u8981\u66f4\u65b0 dis dis \u4e0e fa fa \u7684\u503c\u3002 \u8fd8\u6709\u4e00\u4e2a\u524d\u9762\u63d0\u5230\u8fc7\u7684\u5c0f\u7ec6\u8282\uff1a dis[0] \u5728\u4e3b\u7a0b\u5e8f\u4e2d\u5fc5\u987b\u8d4b\u4e3a-1","title":"\u5408\u5e76"},{"location":"ds/leftist-tree/#_3","text":"\u5220\u9664\u6839\u8282\u70b9\u64cd\u4f5c\u5c31\u66f4\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u5408\u5e76\u5de6\u53f3\u513f\u5b50\u5373\u53ef\u3002 1 2 #define Del(x) val[x] = -1, fa[L[x]] = fa[R[x]] = 0, Merge( L[x], R[x] ) //\u6ce8\u610f\u5148\u628a\u7236\u4eb2\u8d4b\u4e3a0","title":"\u5220\u9664"},{"location":"ds/leftist-tree/#_4","text":"","title":"\u4f8b\u9898"},{"location":"ds/leftist-tree/#p3377","text":"\u6a21\u677f\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <bits/stdc++.h> using namespace std ; #define MAXN 100005 int N , M , t ; int L [ MAXN ], R [ MAXN ]; int fa [ MAXN ], val [ MAXN ], dis [ MAXN ]; int Merge ( int x , int y ){ if ( ! x || ! y ){ return x | y ; } if ( val [ x ] > val [ y ] || ( val [ x ] == val [ y ] && x > y ) ) swap ( x , y ); R [ x ] = Merge ( R [ x ], y ); if ( dis [ L [ x ]] < dis [ R [ x ]] ) swap ( L [ x ], R [ x ] ); dis [ x ] = dis [ R [ x ]] + 1 ; return x ; } #define Del(x) ( val[x] = -1, Merge( L[x], R[x] ) ) int find ( int x ){ return x == fa [ x ] ? x : ( fa [ x ] = find ( fa [ x ]) ); } //\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u66b4\u529b\u8df3\uff0c\u56e0\u4e3a\u5de6\u504f\u6811\u53ea\u80fd\u4fdd\u8bc1\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\uff0c\u5982\u679c\u662f\u5de6\u5b50\u6811\u66b4\u529b\u5f80\u4e0a\u8df3\u5c31\u53ef\u80fd\u9000\u5316\u6210O(N^2) int main (){ scanf ( \"%d%d\" , & N , & M ); for ( int i = 1 ; i <= N ; ++ i ) scanf ( \"%d\" , & val [ i ] ), fa [ i ] = i ; dis [ 0 ] = - 1 ; for ( int i = 1 ; i <= M ; ++ i ){ int opt , x , y ; scanf ( \"%d\" , & opt ); if ( opt == 1 ){ scanf ( \"%d%d\" , & x , & y ); if ( val [ x ] == - 1 || val [ y ] == - 1 ) continue ; x = find ( x ); y = find ( y ); if ( x != y ) fa [ x ] = fa [ y ] = Merge ( x , y ); } else { scanf ( \"%d\" , & x ); if ( val [ x ] == - 1 ) printf ( \"-1 \\n \" ); else printf ( \"%d \\n \" , val [ x = find ( x )] ), t = Del ( x ), fa [ t ] = fa [ x ] = t ; } } return 0 ; }","title":"\u6d1b\u8c37 P3377 \u3010\u6a21\u677f\u3011\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09"},{"location":"ds/leftist-tree/#p1456-monkey-king","text":"\u8fd9\u9898\u8981\u4fee\u6539\u503c\u3002\u3002\u3002\u5176\u5b9e\u66b4\u529b\u4e00\u70b9\uff0c\u76f4\u63a5\u5220\u53bb\uff0c\u518d\u5408\u5e76\u5c31OK\u3002\u3002\u3002 \u5177\u4f53\u4e00\u70b9\uff1a \u5220\u53bb\u4e24\u4e2a\u5de6\u504f\u6811\u7684\u6839\u8282\u70b9\uff08\u7528x\u3001y\u4fdd\u5b58\u7f16\u53f7\uff0ct1\u3001t2\u4fdd\u5b58\u5220\u53bbx\u3001y\u540e\u7684\u5de6\u504f\u6811\u6839\u8282\u70b9\u7f16\u53f7\uff09\uff08\u5220\u9664\u65b9\u6cd5\u540c\u4e0a\uff09 val[x] \u4e0e val[y] \u51cf\u534a \u521d\u59cb\u5316x\u3001y\uff08 L[x]=R[x]=fa[x]=0 \uff0cy\u4e5f\u4e00\u6837\uff09 \u5408\u5e76x\u3001y\u3001t1\u3001t2 \u8fd4\u56de val[\u6839\u8282\u70b9] \u4e0d\u96be\u7406\u89e3\u5427\uff1f\u6ce8\u610f\u4e00\u4e2a\u5c0f\u4f18\u5316\uff0c\u5148\u5408\u5e76x\u3001y\u3002\u56e0\u4e3ax\u3001y\u90fd\u53ea\u5269\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u5408\u5e76\u590d\u6742\u5ea6\u662f O(1) O(1) \u7684\u3002\u8fd9\u53ea\u662f\u4f18\u5316\u5e38\u6570\uff0c\u4e0d\u4f18\u5316\u4e5f\u80fd\u8fc7\u3002 \u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 int fight ( int x , int y ){ x = find ( x ); y = find ( y ); if ( x == y ) return - 1 ; fa [ L [ x ]] = fa [ R [ x ]] = fa [ L [ y ]] = fa [ R [ y ]] = 0 ; int t1 , t2 ; t1 = Merge ( L [ x ], R [ x ] ); t2 = Merge ( L [ y ], R [ y ] ); val [ x ] >>= 1 ; val [ y ] >>= 1 ; L [ x ] = R [ x ] = L [ y ] = R [ y ] = dis [ x ] = dis [ y ] = 0 ; x = Merge ( x , y ); x = Merge ( x , t1 ); x = Merge ( x , t2 ); return val [ x ]; } \u8fd8\u6709\u4e00\u4e2a\u7325\u7410\u7684\u5751\u70b9\uff1a\u591a\u7ec4\u6570\u636e\uff01\u8bb0\u5f97\u521d\u59cb\u5316\u3002","title":"\u6d1b\u8c37 P1456 Monkey King"},{"location":"ds/leftist-tree/#p1552-apio2012","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u5fcd\u8005\uff0c\u5bf9\u5176\u6240\u6709\u4e0b\u5c5e(\u5b50\u6811\u5185\u6240\u6709\u5143\u7d20\uff0c\u5305\u62ec\u81ea\u5df1)\u5efa\u5806\uff0c\u56e0\u4e3a\u6240\u6709\u5fcd\u8005\u90fd\u662f\u7b49\u4ef7\u7684\uff0c\u6240\u4ee5\u5f53\u8d85\u8fc7\u9884\u7b97\u65f6\uff0c\u5c06\u6700\u8d35\u7684\u5fcd\u8005\u5220\u53bb\uff0c\u76f4\u5230\u5c06\u4ef7\u683c\u63a7\u5236\u5728\u9884\u7b97\u8303\u56f4\u5185\uff0c\u53ef\u4ee5\u5f97\u51fa\u7531\u8be5\u5fcd\u8005\u9886\u5bfc\u80fd\u5f97\u5230\u7684\u6700\u5927\u6ee1\u610f\u5ea6\u3002 \u5f53\u7136\uff0c\u771f\u7684\u5bf9\u6240\u6709\u5b50\u6811\u5efa\u5806\u4e0d\u73b0\u5b9e\u3002\u56e0\u4e3a\u5728\u67d0\u4e2a\u5fcd\u8005\u6ca1\u6709\u7528\u5230\u7684\u4e0b\u5c5e\uff0c\u5176\u6240\u6709\u4e0a\u53f8\u90fd\u4e0d\u4f1a\u518d\u7528\u5230\u3002\u6240\u4ee5\u6bcf\u6b21\u505a\u5b8c\u540e\uff0c\u76f4\u63a5\u5408\u5e76\u5230\u76f4\u63a5\u4e0a\u53f8\u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; #define MAXN 100005 #define LL long long #define rgt register int N , M , t ; int B [ MAXN ], L [ MAXN ], rt [ MAXN ], sz [ MAXN ]; int l [ MAXN ], r [ MAXN ], dist [ MAXN ], val [ MAXN ]; LL sum [ MAXN ], ans ; int Merge ( rgt int x , rgt int y ){ if ( ! x || ! y ) return x | y ; if ( val [ x ] < val [ y ] || ( val [ x ] == val [ y ] && x > y ) ) swap ( x , y ); r [ x ] = Merge ( r [ x ], y ); if ( dist [ l [ x ]] < dist [ r [ x ]] ) swap ( l [ x ], r [ x ] ); dist [ x ] = dist [ r [ x ]] + 1 ; return x ; } int main (){ scanf ( \"%d%d\" , & N , & M ); dist [ 0 ] = - 1 ; for ( rgt int i = 1 ; i <= N ; ++ i ) scanf ( \"%d%d%d\" , & B [ i ], & val [ i ], & L [ i ] ), sum [ i ] = val [ i ], rt [ i ] = i , sz [ i ] = 1 ; for ( rgt int i = N , x ; i >= 1 ; -- i ){ while ( sum [ i ] > M ) sum [ i ] -= val [ rt [ i ]], rt [ i ] = Merge ( l [ rt [ i ]], r [ rt [ i ]] ), -- sz [ i ]; ans = max ( ans , 1ll * L [ i ] * sz [ i ] ); if ( B [ i ] ) sz [ B [ i ]] += sz [ i ], sum [ B [ i ]] += sum [ i ], rt [ B [ i ]] = Merge ( rt [ B [ i ]], rt [ i ] ); } printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"\u6d1b\u8c37 P1552 [APIO2012]\u6d3e\u9063"},{"location":"ds/leftist-tree/#p3261-jloi2015","text":"\u8fd8\u662f\u5efa\u5de6\u504f\u6811\uff0c\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u4e0d\u65ad\u5408\u5e76\u5230\u5176\u7236\u4eb2\u8282\u70b9\uff0c\u5c06\u6218\u6597\u529b\u4e0d\u591f\u7684\u5168\u90e8\u5f39\u51fa\u5373\u53ef\u3002\u5f39\u51fa\u65f6\u53ef\u4ee5\u8bb0\u5f55\u5176\u6b7b\u53bb\u57ce\u5e02\u7684\u6df1\u5ea6\uff0c\u4e0e\u5176\u521d\u59cb\u57ce\u5e02\u6df1\u5ea6\u7684\u5dee\u5373\u4e3a\u653b\u5360\u57ce\u6c60\u6570\u3002 \u800c\u6bcf\u4e2a\u57ce\u5e02\u727a\u7272\u7684\u9a91\u58eb\u6570\uff0c\u8bb0\u5f55\u5728\u8be5\u57ce\u5e02\u5f39\u51fa\u51e0\u6b21\u5373\u53ef\u3002 \u6218\u6597\u529b\u53d8\u5316\u53ef\u4ee5\u50cf\u7ebf\u6bb5\u6811\u90a3\u6837\u6253\u4e2a\u61d2\u6807\u8bb0\uff0c\u4e0d\u96be\u5b9e\u73b0\u3002 \u522b\u5fd8\u4e86\u6700\u540e\u8fd8 \u8001\u4e0d\u6b7b \u6d3b\u7740\u7684\u9a91\u58eb\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <bits/stdc++.h> using namespace std ; #define MAXN 300005 #define i64 long long #define getchar() ( p1 == p2 && ( p1 = bf, p2 = bf + fread( bf, 1, 1 << 21, stdin ), p1 == p2 ) ? EOF : *p1++ ) char bf [ 1 << 21 ], * p1 , * p2 ; template < typename T > inline void read ( T & x ){ x = 0 ; char t ( getchar ()), flg ( 0 ); for ( ; ! isdigit ( t ); t = getchar () ) flg = t == '-' ; for ( ; isdigit ( t ); t = getchar () ) x = x * 10 + ( t & 15 ); flg ? x = - x : x ; } int N , M , w [ MAXN ], r [ MAXN ], c [ MAXN ]; i64 h [ MAXN ], v [ MAXN ], s [ MAXN ], t1 [ MAXN ], t2 [ MAXN ]; int d [ MAXN ], ls [ MAXN ], rs [ MAXN ], f [ MAXN ], a [ MAXN ], ans [ MAXN ], sm [ MAXN ]; inline void swp ( int & x , int & y ){ x ^= y ^= x ^= y ; } inline void tag1 ( int c , i64 x ){ if ( c ) t1 [ c ] += x , s [ c ] += x ; } inline void tag2 ( int c , i64 x ){ if ( c ) t2 [ c ] *= x , t1 [ c ] *= x , s [ c ] *= x ; } inline void pushdown ( int c ){ if ( t2 [ c ] != 1 ) tag2 ( ls [ c ], t2 [ c ]), tag2 ( rs [ c ], t2 [ c ]), t2 [ c ] = 1 ; if ( t1 [ c ] ) tag1 ( ls [ c ], t1 [ c ]), tag1 ( rs [ c ], t1 [ c ]), t1 [ c ] = 0 ; } int Merge ( int x , int y ){ if ( ! x || ! y ) return x | y ; pushdown ( x ), pushdown ( y ); if ( s [ x ] > s [ y ] ) swp ( x , y ); rs [ x ] = Merge ( rs [ x ], y ); if ( d [ ls [ x ]] < d [ rs [ x ]] ) swp ( ls [ x ], rs [ x ] ); d [ x ] = d [ rs [ x ]] + 1 ; return x ; } inline void pop ( int & x ){ pushdown ( x ), x = Merge ( ls [ x ], rs [ x ] ); } int main (){ read ( N ), read ( M ); for ( int i = 1 ; i <= N ; ++ i ) read ( h [ i ]); for ( int i = 2 ; i <= N ; ++ i ) read ( f [ i ]), read ( a [ i ]), read ( v [ i ]); for ( int i = 1 ; i <= M ; ++ i ) t2 [ i ] = 1 , read ( s [ i ]), read ( c [ i ]), r [ c [ i ]] = Merge ( r [ c [ i ]], i ); for ( int i = 1 ; i <= N ; ++ i ) w [ i ] = w [ f [ i ]] + 1 ; for ( int i = N ; i ; -- i ){ while ( r [ i ] && s [ r [ i ]] < h [ i ] ) sm [ r [ i ]] = w [ c [ r [ i ]]] - w [ i ], pop ( r [ i ]), ++ ans [ i ]; a [ i ] ? tag2 ( r [ i ], v [ i ]) : tag1 ( r [ i ], v [ i ]), r [ f [ i ]] = Merge ( r [ f [ i ]], r [ i ] ); } while ( r [ 0 ] ) sm [ r [ 0 ]] = w [ c [ r [ 0 ]]], pop ( r [ 0 ]); for ( int i = 1 ; i <= N ; ++ i ) printf ( \"%d \\n \" , ans [ i ] ); for ( int i = 1 ; i <= M ; ++ i ) printf ( \"%d \\n \" , sm [ i ] ); return 0 ; }","title":"\u6d1b\u8c37 P3261 [JLOI2015]\u57ce\u6c60\u653b\u5360"},{"location":"ds/leftist-tree/#p4971","text":"\u636e\u8bf4\u8fd9\u9898\u6709\u95ee\u9898\u3002\"\u6700\u5927\u7f6a\u6076\u503c\u7684\u4e8b\"\u53ef\u80fd\u6709\u591a\u4e2a\u3002\u5e76\u4e14\u4e24\u4ef6\u4e8b\u5373\u4f7f\u7f6a\u6076\u503c\u76f8\u540c,\u5b83\u4eec\u4e5f\u4e0d\u80fd\u7b49\u4ef7\u3002 \u6240\u4ee5\u8fd9\u9898\u53ea\u80fd\u5199\u5f97\u548c\u6807\u7b97\u4e00\u6837\u3002\u4f46\u662f\u4f3c\u4e4e\u4e5f\u4e0d\u662f\u5f88\u79d1\u5b66\uff0c\u56e0\u4e3a\u5220\u9664\u4efb\u610f\u8282\u70b9\u65f6\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u94fe\u4e0adis\u90fd\u9700\u8981\u66f4\u65b0\uff0c\u8fd9\u53ef\u80fd\u4f1a\u9000\u5316\u6210O(N)\uff0c\u800c\u6807\u7b97\u4e2d\u6839\u672c\u5c31\u6ca1\u6709\u66f4\u65b0\u3002\u4e0d\u8fc7dis\u53ea\u662f\u4e00\u4e2a\u4fdd\u8bc1\u5e73\u8861\u7684\u4e1c\u897f\uff0c\u56e0\u6b64\u4e0d\u4f1a\u5f71\u54cd\u6b63\u786e\u6027\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> using namespace std ; #define MAXN 2000005 #define getchar() ( ( p1 == p2 ? p1 = bf, p2 = bf + fread( bf, 1, 1 << 21, stdin ), p1 : p1 ) == p2 ? EOF : *p1++ ) #define rgt register #define LL long long #define int long long char bf [ 1 << 21 ], * p1 , * p2 ; template < typename T > void read ( rgt T & x ){ x = 0 ; rgt char t ( getchar ()); bool flg ( 0 ); for ( ; ! isdigit ( t ); t = getchar () ) if ( t == '-' ) flg = 1 ; for ( ; isdigit ( t ); t = getchar () ) x = x * 10 + ( t & 15 ); x = flg ? - x : x ; } int T , W , K , N , M ; LL sum , mx ; int L [ MAXN ], R [ MAXN ], val [ MAXN ], dis [ MAXN ], fa [ MAXN ]; bool vis [ MAXN ]; int find ( rgt int x ){ return fa [ x ] == x ? x : ( fa [ x ] = find ( fa [ x ]) ); } int Merge ( rgt int x , rgt int y ){ if ( ! x || ! y ) return x | y ; if ( val [ x ] < val [ y ] ) swap ( x , y ); fa [ R [ x ] = Merge ( R [ x ], y )] = x ; if ( dis [ L [ x ]] < dis [ R [ x ]] ) swap ( L [ x ], R [ x ] ); dis [ x ] = dis [ R [ x ]] + 1 ; return x ; } inline void dec ( int x , int v , bool flg ){ val [ x ] = max ( val [ x ] - v , 0ll ); fa [ L [ x ]] = L [ x ]; fa [ R [ x ]] = R [ x ]; int l ( L [ x ]), r ( R [ x ]), t ; L [ x ] = R [ x ] = dis [ x ] = 0 ; t = Merge ( l , r ); flg ? Merge ( find ( x ), t ) : Merge ( t , x ); } signed main (){ read ( T ); read ( W ); read ( K ); dis [ 0 ] = - 1 ; while ( T -- ){ read ( N ); read ( M ); for ( rgt int i = 1 ; i <= N ; ++ i ) read ( val [ i ]), L [ i ] = R [ i ] = dis [ i ] = 0 , fa [ i ] = i , vis [ i ] = 0 ; for ( rgt int i = 1 , opt , x , y ; i <= M ; ++ i ){ read ( opt ); read ( x ); if ( opt == 2 ) dec ( x , val [ x ], 1 ); else if ( opt == 3 ) read ( y ), dec ( find ( x ), y , 0 ); else read ( y ), Merge ( find ( x ), find ( y ) ); } sum = 0 ; mx = 0 ; for ( int i = 1 , t ; i <= N ; ++ i ){ t = find ( i ); if ( ! vis [ t ] ) vis [ t ] = 1 , mx = max ( ( LL ) val [ t ], mx ), sum += val [ t ]; } if ( W == 2 ) sum -= mx ; if ( W == 3 ) sum += mx ; if ( ! sum ) printf ( \"Gensokyo 0 \\n \" ); else printf ( ( sum <= K ? \"Heaven %lld \\n \" : \"Hell %lld \\n \" ), sum ); } return 0 ; } \u4e0d\u8fc7\u8fd9\u9898\u6bd4\u8f83\u6709\u8da3\u7684\u662f\u5220\u9664\u4efb\u610f\u8282\u70b9\u3002 \u5bf9\u6b64\uff0c\u5982\u679c\u9898\u76ee\u4e0d\u51fa\u9505\u7684\u8bdd\uff0c\u5220\u9664\u4efb\u610f\u8282\u70b9\u8fd8\u53ef\u4ee5\u6253\u6807\u8bb0\u6765\u5b9e\u73b0\uff0c\u5373\u4e0d\u771f\u7684\u5220\u9664\uff0c\u7559\u5728\u8fd9\u91cc\uff0c\u7b49\u5230\u5806\u9876\u518d\u5220\u9664\u5806\u9876\uff0c\u548c\u66ff\u7f6a\u7f8a\u6811\u7684\u5220\u9664\u65b9\u5f0f\u6bd4\u8f83\u50cf\u3002","title":"\u6d1b\u8c37 P4971 \u65ad\u7f6a\u8005"},{"location":"ds/leftist-tree/#p3642-apio2016","text":"","title":"\u6d1b\u8c37 P3642 [APIO2016]\u70df\u706b\u8868\u6f14"},{"location":"ds/leftist-tree/#p4331-boi2004sequence","text":"","title":"\u6d1b\u8c37 P4331 [BOI2004]Sequence \u6570\u5b57\u5e8f\u5217"},{"location":"ds/leftist-tree/#p2483-ksdoi2010","text":"A* \u88ab\u5361\u6389\u4e86qwq\uff0c\u53ea\u597d\u7528\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u505a\u3002","title":"\u6d1b\u8c37 P2483 \u3010\u6a21\u677f\u3011k\u77ed\u8def\uff08[SDOI2010]\u9b54\u6cd5\u732a\u5b66\u9662\uff09"},{"location":"ds/bt/fhq-treap/","text":"FHQ Treap \u00b6 \u7b80\u4ecb \u00b6 FHQ Treap\u662f\u4e00\u79cd\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e5f\u53eb\u975e\u65cbTreap\uff0c\u800c\u4e14\u5b83\u80fd\u5b8c\u6210Treap\u4e0eSplay\u80fd\u5b8c\u6210\u7684 \u6240\u6709\u4e8b \uff0c\u4ee3\u7801\u77ed\uff0c\u7406\u89e3\u4e5f\u5bb9\u6613\u3002\u552f\u4e00\u7684\u7f3a\u70b9\u53ef\u80fd\u5728\u4e8e\u5e38\u6570\u8f83\u5927\u3002\uff08\u4e0d\u7528\u62c5\u5fc3\uff0c\u5e38\u6570\u6bd4Splay\u5c0f\uff09 \u57fa\u672c\u64cd\u4f5c \u00b6 FHQ Treap\u548cTreap\u5f88\u50cf\uff0c\u90fd\u662f\u7ed9\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2a\u968f\u673a\u7684\u6743\u503c\uff0c\u4f7f\u5b83\u6ee1\u8db3\u5806\u7684\u6027\u8d28\u3002\u5efa\u8bae\u5148\u4e86\u89e3Treap\uff08\u6ca1\u5fc5\u8981\u5b9e\u73b0\uff0c\u61c2\u5f97\u539f\u7406\u5373\u53ef\uff09\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u503c\u76f8\u540c\uff0cFHQ Treap\u4e0d\u4f1a\u7528\u4e00\u4e2a\u6570\u7ec4cnt\u8bb0\u5f55\u4e2a\u6570\uff0c\u800c\u662f\u76f4\u63a5\u518d\u5f00\u4e00\u4e2a\u8282\u70b9\u3002 FHQ\u7684\u57fa\u672c\u64cd\u4f5c\u53ea\u6709\u4e24\u4e2a\uff1aSplit\u4e0eMerge\u3002 Split\u628a\u4e00\u68f5\u6811\u5206\u6210\u4e24\u68f5\uff0cMerge\u628a\u4e24\u68f5\u6811\u5408\u5e76\u6210\u4e00\u68f5\u3002 \u4ece\u5e8f\u5217\uff08\u4e5f\u5c31\u662f\u5e73\u8861\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff09\u7684\u89d2\u5ea6\u6765\u770b\uff0cSplay\u5c31\u662f\u5c06\u4e00\u4e2a\u5e8f\u5217\u4ece\u67d0\u4e2a\u5730\u65b9\u65ad\u5f00\u53d8\u6210\u4e24\u4e2a\u5e8f\u5217\uff0cMerge\u662f\u5c06\u4e24\u4e2a\u5e8f\u5217\u9996\u5c3e\u76f8\u63a5\u5408\u5e76\u6210\u4e00\u4e2a\u5e8f\u5217\u3002 \u53d8\u91cf&\u51fd\u6570\u7ea6\u5b9a \u00b6 1 2 3 4 int L [ MAXN ], R [ MAXN ], sz [ MAXN ], rk [ MAXN ], val [ MAXN ], tot ; int root ; int New ( int v ){ return val [ ++ tot ] = v , rk [ tot ] = rand (), L [ tot ] = R [ tot ] = 0 , sz [ tot ] = 1 , tot ; } #define Updata(x) sz[x] = sz[L[x]] + sz[R[x]] + 1 \u975e\u6307\u9488\u53ef\u80fd\u66f4\u8ba9\u4eba\u63a5\u53d7\u5427qwq L[i] L[i] \u8868\u793a i i \u7684\u5de6\u513f\u5b50\uff0c R[i] R[i] \u8868\u793a i i \u7684\u53f3\u513f\u5b50\uff0c sz[i] sz[i] \u8868\u793a\u4ee5 i i \u4e3a\u6839\u7684\u5b50\u6811\u5305\u542b\u7684\u8282\u70b9\u6570\uff0c rk[i] rk[i] \u8868\u793a\u4e3a\u4e86\u4fdd\u6301\u5e73\u8861\u968f\u673a\u8d4b\u4e88\u7684\u6743\u503c\uff0c val[i] val[i] \u8868\u793a\u8be5\u8282\u70b9\u4fdd\u5b58\u7684\u503c\uff0c tot tot \u8868\u793a\u8282\u70b9\u6570\uff0c root root \u8868\u793a\u5f53\u524d\u7684\u6839\u8282\u70b9\u3002 New(v) New(v) \u8868\u793a\u65b0\u5efa\u4e00\u4e2a\u503c\u4e3a v v \u7684\u8282\u70b9\uff08\u53ef\u4ee5\u770b\u6210\u4e00\u68f5\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u5e73\u8861\u6811\uff09 Updata(x) Updata(x) \u8868\u793a\u66f4\u65b0\u8282\u70b9 x x \u7684 sz sz \u63d0\u9192\uff1a\u8fd9\u91cc\"\u503c\"\u4e0e\"\u6743\u503c\"\u662f\u4e0d\u4e00\u6837\u7684\uff0c\"\u503c\"\u8868\u793a\u8282\u70b9\u4fdd\u5b58\u7684\u503c\uff0c\"\u6743\u503c\"\u4ec5\u4ec5\u7528\u4e8e\u7ef4\u6301\u5e73\u8861\uff0c\u6ce8\u610f\u533a\u5206 Split \u00b6 \u600e\u4e48\u5206\u5272\u5462\uff1f \u5e38\u89c1\u7684\u5206\u5272\u65b9\u6cd5\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u6309\u503c\u5206\uff0c\u4e00\u79cd\u662f\u6309\u6392\u540d\u5206\uff08\u5b9e\u73b0\u5dee\u4e0d\u591a\uff0c\u8fd9\u91cc\u53ea\u8bb2\u6309\u503c\u5206\uff09\u3002 \u5148\u6765\u770b\u770b\u5b9a\u4e49\u3002 1 void Split ( int c , int k , int & x , int & y ); c\u8868\u793a\u5f53\u524d\u8981\u5206\u5272\u7684\u6811\u7684\u6839\u8282\u70b9\uff0c\u5e76\u4e14\u628a\u503c \\le k \\le k \u7684\u8282\u70b9\u5206\u5272\u51fa\u6765\uff0c\u6784\u6210\u4e00\u68f5\u6811\uff0c\u628a x x \u8d4b\u4e3a\u6839\u8282\u70b9\uff0c\u5176\u4ed6\u8282\u70b9\u53e6\u5916\u6784\u6210\u4e00\u68f5\u6811\uff0c\u628a y y \u8d4b\u4e3a\u5176\u6839\u8282\u70b9\u3002 x x \u3001 y y \u7528\u5f15\u7528(&)\u66f4\u65b9\u4fbf\u5904\u7406\u3002 \u5bf9\u4e8e\u5f53\u524d\u7684\u6811\uff0c\u5982\u679c\u6839\u8282\u70b9 c c \u7684\u503c \\le k \\le k \uff0c c c \u7684\u5de6\u5b50\u6811\u4e5f\u5168\u90e8 \\le k \\le k \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a x x \u8d4b\u4e3a c c \uff0c\u4fdd\u7559\u5de6\u5b50\u6811\uff0c\u5c06\u53f3\u5b50\u6811 \\le k \\le k \u7684\u90e8\u5206\u5206\u5272\u51fa\u6765\u4f5c\u4e3a x x \u7684\u53f3\u5b50\u6811\u3002\u5269\u4e0b\u7684\u90e8\u5206\u81ea\u7136\u4e5f\u5c31\u662f\u5728 > k > k \u7684\u90e8\u5206\u3002 >k >k \u7684\u60c5\u51b5\u540c\u7406\u3002\u5177\u4f53\u6211\u4eec\u7528\u9012\u5f52\u5b9e\u73b0\u3002 1 2 3 4 5 6 void Split ( int c , int k , int & x , int & y ){ if ( c == 0 ){ x = y = 0 ; return ; } //\u5982\u679c\u5f53\u524d\u5904\u7406\u7684\u6811\u4e3a\u7a7a\uff0c\u5206\u51fa\u7684\u4e24\u4e2a\u5b50\u6811\u5f53\u7136\u4e5f\u4e3a\u7a7a\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\u8fd4\u56de\u3002 if ( val [ c ] <= k ) x = c , Split ( R [ c ], k , R [ x ], y ); //\u5982\u679c\u6839\u8282\u70b9\u503c\u5c0f\u4e8e\u7b49\u4e8ek\uff0c\u628ax\u8d4b\u4e3ac\uff0c\u7ee7\u7eed\u5904\u7406\u53f3\u5b50\u6811\uff0c\u5e76\u628a\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u90e8\u5206\u5206\u5230x\u7684\u53f3\u5b50\u6811\uff0c\u5176\u4ed6\u5206\u5230y else y = c , Split ( L [ c ], k , x , L [ y ] ); Updata ( c ); //\u522b\u5fd8\u4e86\u66f4\u65b0sz } Merge \u00b6 \u4e0a\u9762\u5206\u5272\u7684\u64cd\u4f5c\u4e0d\u4f1a\u6539\u53d8\u5806\u7684\u6027\u8d28\u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff0c\u4f46\u662f\u5728\u5408\u5e76\u7684\u65f6\u5019\u8981\u6ce8\u610f\u4fdd\u6301\u5806\u7684\u6027\u8d28\u3002 1 void Merge ( int & c , int x , int y ); \u8868\u793a\u628a\u4ee5 x x \u548c y y \u4e3a\u6839\u8282\u70b9\u7684\u6811\u5408\u5e76\uff0c\u5c06 c c \u8d4b\u4e3a\u6839\u8282\u70b9\u3002 \u6ce8\u610f\uff1a\u4e0a\u9762\u5206\u5272\u65f6x\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8ey\u7684\uff0c\u5408\u5e76\u65f6\u4e5f\u8981\u6ce8\u610fx\u7684\u6240\u6709\u8282\u70b9\u5c0f\u4e8e\u7b49\u4e8ey\uff0c\u5426\u5219\u4f1a\u51fa\u9519 \u7531\u4e8e x x \u4e0e y y \u7684\u6743\u503c\u5728\u4e24\u9897\u6811\u4e2d\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u5408\u5e76\u540e\u7684\u6811\u6839\u8282\u70b9\u4e0d\u662f x x \u5c31\u662f y y \u3002\u6240\u4ee5\u6bd4\u8f83 x x \u4e0e y y \u7684\u6743\u503c\u5c31\u53ef\u4ee5\u5224\u65ad\u8c01\u4e3a\u6839\u8282\u70b9\u3002 \u5047\u8bbe\u4ee5 x x \u4e3a\u6839\u3002\u56e0\u4e3a\u4fdd\u8bc1 x x \u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u7b49\u4e8e y y \u7684\uff0c\u6240\u4ee5 y y \u80af\u5b9a\u4f1a\u5408\u5e76\u5728 x x \u7684\u53f3\u5b50\u6811\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u4e0d\u7528\u52a8 x x \u7684\u5de6\u5b50\u6811\uff0c\u5408\u5e76 x x \u7684\u53f3\u5b50\u6811\u4e0e y y \u4f5c\u4e3a x x \u7684\u53f3\u5b50\u6811\u3002 y y \u4e3a\u6839\u65f6\u540c\u7406\u3002\u8fd9\u6837\uff0c\u5c31\u5de7\u5999\u5b8c\u6210\u4e86\u540c\u65f6\u7ef4\u62a4\u5806\u7684\u6027\u8d28\u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\u3002 \u6211\u4eec\u8fd8\u662f\u7528\u9012\u5f52\u3002 1 2 3 4 5 6 void Merge ( int & c , int x , int y ){ if ( ! x || ! y ){ c = x | y ; return ; } if ( rk [ x ] >= rk [ y ] ) c = x , Merge ( R [ x ], R [ c ], y ); else c = y , Merge ( L [ y ], x , L [ c ] ); Updata ( c ); } \u53ea\u8981\u7406\u89e3\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff0c\u5269\u4e0b\u7684\u90fd\u53ef\u4ee5\u7528\u8fd9\u4e24\u79cd\u64cd\u4f5c\u5b9e\u73b0\u3002 \u63d2\u5165\u64cd\u4f5c \u00b6 \u76f4\u63a5\u628a\u5b83\u5206\u6210 \\le v \\le v \u7684\u6811\u548c > v > v \u7684\u6811\uff0c\u5c06\u65b0\u5efa\u7684\u8282\u70b9\u4e0e \\le v \\le v \u7684\u6811\u5408\u5e76\uff0c\u518d\u4e0e >y >y \u6811\u5408\u5e76\u5373\u53ef\u3002 1 2 3 4 5 6 7 //opt 1 void Ins ( int v ){ int x , y , z ( New ( v )); Split ( root , v , x , y ); Merge ( x , x , z ); Merge ( root , x , y ); } \u5220\u9664\u64cd\u4f5c \u00b6 \u5206\u6210 \\le k \\le k \u548c > k > k \u4e24\u9897\u6811\uff0c\u518d\u5206\u6210 < k < k \u3001 =k =k \u3001 > k > k \u4e09\u68f5\u6811\uff0c\u5c06 =k =k \u5de6\u53f3\u5b50\u6811\u5408\u5e76\uff0c\u76f8\u5f53\u4e8e\u5220\u53bb =k =k \u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5c06\u4e09\u68f5\u6811\u91cd\u65b0\u5408\u5e76\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 // opt 2 void Del ( int v ){ int x , y , z ; Split ( root , v , x , y ); Split ( x , v - 1 , x , z ); Merge ( z , L [ z ], R [ z ] ); Merge ( x , x , z ); Merge ( root , x , y ); } \u67e5\u8be2\u6392\u540d \u00b6 \u5176\u5b9e\u53ef\u4ee5\u7528 while \u5faa\u73af\uff0c\uff0c\uff0c\u4f46\u662f\uff0c\uff0c\uff0c\u6211\uff0c\uff0c\uff0c\u61d2\uff0c\uff0c\uff0c\u6240\uff0c\uff0c\uff0c\u4ee5\uff0c\uff0c\uff0c\u76f4\uff0c\uff0c\uff0c\u63a5\uff0c\uff0c\uff0c\uff0c\uff0c\uff0c\uff0c 1 2 3 4 5 6 7 8 //opt 3 int GetRankByVal ( int v ){ int x , y , t ; Split ( root , v - 1 , x , y ); t = sz [ x ]; Merge ( root , x , y ); return t + 1 ; } \u67e5\u8be2\u503c \u00b6 \u8fd9\u771f\u7684\u4e0d\u80fd\u7528Split\u548cMerge\u5077\u61d2\u4e86\uff0c\uff0c\uff0c\u6240\u4ee5\u4e56\u4e56\u5199\u4e2a while \u5427~ \u6280\u672f\u542b\u91cf\u4e0d\u9ad8\uff0c\u81ea\u884c\u7406\u89e3\u3002 1 2 3 4 5 6 7 8 9 10 //opt 4 int GetValByRank ( int rk ){ int c ( root ); while ( c ){ if ( sz [ L [ c ]] + 1 == rk ) return val [ c ]; else if ( sz [ L [ c ]] >= rk ) c = L [ c ]; else rk -= 1 + sz [ L [ c ]], c = R [ c ]; } return - 1 ; //\u9898\u76ee\u6ca1\u8981\u6c42\u3002\u3002\u3002\u53ea\u662f\u4e3a\u4e86\u81ea\u5df1\u67e5\u9519 } \u67e5\u8be2\u524d\u7f00 \u00b6 \u5206\u6210\u4e24\u9897\u6811 < v < v \u4e0e \\ge v \\ge v \uff0c\u5728 < v < v \u6811\u4e2d\u627e\u6700\u5927\u503c\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //opt 5 int GetPre ( int v ){ int x , y , z ; Split ( root , v - 1 , x , y ); z = x ; while ( R [ z ] ) z = R [ z ]; Merge ( root , x , y ); return val [ z ]; } ```` ------ ## \u67e5\u8be2\u540e\u7f00 \u4e0e\u67e5\u8be2\u524d\u7f00\u540c\u7406\u3002 ``` cpp //opt 6 int GetNxt ( int v ){ int x , y , z ; Split ( root , v , x , y ); z = y ; while ( L [ z ] ) z = L [ z ]; Merge ( root , x , y ); return val [ z ]; } \u5b8c\u6574\u4ee3\u7801 \u00b6 \u6d1b\u8c37 P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #include <bits/stdc++.h> using namespace std ; #define MAXN 100005 int L [ MAXN ], R [ MAXN ], sz [ MAXN ], rk [ MAXN ], val [ MAXN ], tot ; int root ; int New ( int v ){ return val [ ++ tot ] = v , rk [ tot ] = rand (), L [ tot ] = R [ tot ] = 0 , sz [ tot ] = 1 , tot ; } #define Updata(x) sz[x] = sz[L[x]] + sz[R[x]] + 1 void Split ( int c , int k , int & x , int & y ){ if ( c == 0 ){ x = y = 0 ; return ; } if ( val [ c ] <= k ) x = c , Split ( R [ c ], k , R [ x ], y ); else y = c , Split ( L [ c ], k , x , L [ y ] ); Updata ( c ); } void Merge ( int & c , int x , int y ){ if ( ! x || ! y ){ c = x | y ; return ; } if ( rk [ x ] >= rk [ y ] ) c = x , Merge ( R [ x ], R [ c ], y ); else c = y , Merge ( L [ y ], x , L [ c ] ); Updata ( c ); } //opt 1 void Ins ( int v ){ int x , y , z ( New ( v )); Split ( root , v , x , y ); Merge ( x , x , z ); Merge ( root , x , y ); } // opt 2 void Del ( int v ){ int x , y , z ; Split ( root , v , x , y ); Split ( x , v - 1 , x , z ); Merge ( z , L [ z ], R [ z ] ); Merge ( x , x , z ); Merge ( root , x , y ); } //opt 3 int GetRankByVal ( int v ){ int x , y , t ; Split ( root , v - 1 , x , y ); t = sz [ x ]; Merge ( root , x , y ); return t + 1 ; } //opt 4 int GetValByRank ( int rk ){ int c ( root ); while ( c ){ if ( sz [ L [ c ]] + 1 == rk ) return val [ c ]; else if ( sz [ L [ c ]] >= rk ) c = L [ c ]; else rk -= 1 + sz [ L [ c ]], c = R [ c ]; } return - 1 ; } //opt 5 int GetPre ( int v ){ int x , y , z ; Split ( root , v - 1 , x , y ); z = x ; while ( R [ z ] ) z = R [ z ]; Merge ( root , x , y ); return val [ z ]; } //opt 6 int GetNxt ( int v ){ int x , y , z ; Split ( root , v , x , y ); z = y ; while ( L [ z ] ) z = L [ z ]; Merge ( root , x , y ); return val [ z ]; } int T ; int main (){ srand ( time ( 0 )); //\u968f\u673a\u6570\u79cd\u5b50\u522b\u5fd8\u4e86 root = New ( INT_MAX ); //\u865a\u8282\u70b9\uff0c\u907f\u514d\u4e00\u4e2a\u8282\u70b9\u90fd\u6ca1\u6709\u4e0d\u65b9\u4fbf\u5408\u5e76\u3002\u6ce8\u610f\u8981\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u6570\uff0c\u67e5\u8be2\u6392\u540d\u65f6\u5c31\u4e0d\u7528-1 scanf ( \"%d\" , & T ); while ( T -- ){ int opt , x ; scanf ( \"%d%d\" , & opt , & x ); switch ( opt ){ case 1 : Ins ( x ); break ; case 2 : Del ( x ); break ; case 3 : printf ( \"%d \\n \" , GetRankByVal ( x ) ); break ; case 4 : printf ( \"%d \\n \" , GetValByRank ( x ) ); break ; case 5 : printf ( \"%d \\n \" , GetPre ( x ) ); break ; case 6 : printf ( \"%d \\n \" , GetNxt ( x ) ); break ; } } return 0 ; } FHQ Treap\u8fd8\u53ef\u4ee5\u8d44\u74f7\u53ef\u6301\u4e45\u5316~\u6bd4Treap\u3001Splay\u597d\u7528\u591a\u5566\u3002 FHQ Treap\u751a\u81f3\u53ef\u4ee5\u62ff\u6765\u5199LCT,\u4f46\u662f\u5e38\u6570\u8fc7\u5927\u3002 \u6811\u5957\u6811\u4e5f\u53ef\u4ee5\u7528FHQ Treap,\u4f46\u662f\u5e38\u6570\u8fc7\u5927,\u6700\u597d\u522b\u4f7f\u7528FHQ Treap\u6765\u5957\u3002","title":"FHQ Treap"},{"location":"ds/bt/fhq-treap/#fhq-treap","text":"","title":"FHQ Treap"},{"location":"ds/bt/fhq-treap/#_1","text":"FHQ Treap\u662f\u4e00\u79cd\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e5f\u53eb\u975e\u65cbTreap\uff0c\u800c\u4e14\u5b83\u80fd\u5b8c\u6210Treap\u4e0eSplay\u80fd\u5b8c\u6210\u7684 \u6240\u6709\u4e8b \uff0c\u4ee3\u7801\u77ed\uff0c\u7406\u89e3\u4e5f\u5bb9\u6613\u3002\u552f\u4e00\u7684\u7f3a\u70b9\u53ef\u80fd\u5728\u4e8e\u5e38\u6570\u8f83\u5927\u3002\uff08\u4e0d\u7528\u62c5\u5fc3\uff0c\u5e38\u6570\u6bd4Splay\u5c0f\uff09","title":"\u7b80\u4ecb"},{"location":"ds/bt/fhq-treap/#_2","text":"FHQ Treap\u548cTreap\u5f88\u50cf\uff0c\u90fd\u662f\u7ed9\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2a\u968f\u673a\u7684\u6743\u503c\uff0c\u4f7f\u5b83\u6ee1\u8db3\u5806\u7684\u6027\u8d28\u3002\u5efa\u8bae\u5148\u4e86\u89e3Treap\uff08\u6ca1\u5fc5\u8981\u5b9e\u73b0\uff0c\u61c2\u5f97\u539f\u7406\u5373\u53ef\uff09\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u503c\u76f8\u540c\uff0cFHQ Treap\u4e0d\u4f1a\u7528\u4e00\u4e2a\u6570\u7ec4cnt\u8bb0\u5f55\u4e2a\u6570\uff0c\u800c\u662f\u76f4\u63a5\u518d\u5f00\u4e00\u4e2a\u8282\u70b9\u3002 FHQ\u7684\u57fa\u672c\u64cd\u4f5c\u53ea\u6709\u4e24\u4e2a\uff1aSplit\u4e0eMerge\u3002 Split\u628a\u4e00\u68f5\u6811\u5206\u6210\u4e24\u68f5\uff0cMerge\u628a\u4e24\u68f5\u6811\u5408\u5e76\u6210\u4e00\u68f5\u3002 \u4ece\u5e8f\u5217\uff08\u4e5f\u5c31\u662f\u5e73\u8861\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff09\u7684\u89d2\u5ea6\u6765\u770b\uff0cSplay\u5c31\u662f\u5c06\u4e00\u4e2a\u5e8f\u5217\u4ece\u67d0\u4e2a\u5730\u65b9\u65ad\u5f00\u53d8\u6210\u4e24\u4e2a\u5e8f\u5217\uff0cMerge\u662f\u5c06\u4e24\u4e2a\u5e8f\u5217\u9996\u5c3e\u76f8\u63a5\u5408\u5e76\u6210\u4e00\u4e2a\u5e8f\u5217\u3002","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"ds/bt/fhq-treap/#_3","text":"1 2 3 4 int L [ MAXN ], R [ MAXN ], sz [ MAXN ], rk [ MAXN ], val [ MAXN ], tot ; int root ; int New ( int v ){ return val [ ++ tot ] = v , rk [ tot ] = rand (), L [ tot ] = R [ tot ] = 0 , sz [ tot ] = 1 , tot ; } #define Updata(x) sz[x] = sz[L[x]] + sz[R[x]] + 1 \u975e\u6307\u9488\u53ef\u80fd\u66f4\u8ba9\u4eba\u63a5\u53d7\u5427qwq L[i] L[i] \u8868\u793a i i \u7684\u5de6\u513f\u5b50\uff0c R[i] R[i] \u8868\u793a i i \u7684\u53f3\u513f\u5b50\uff0c sz[i] sz[i] \u8868\u793a\u4ee5 i i \u4e3a\u6839\u7684\u5b50\u6811\u5305\u542b\u7684\u8282\u70b9\u6570\uff0c rk[i] rk[i] \u8868\u793a\u4e3a\u4e86\u4fdd\u6301\u5e73\u8861\u968f\u673a\u8d4b\u4e88\u7684\u6743\u503c\uff0c val[i] val[i] \u8868\u793a\u8be5\u8282\u70b9\u4fdd\u5b58\u7684\u503c\uff0c tot tot \u8868\u793a\u8282\u70b9\u6570\uff0c root root \u8868\u793a\u5f53\u524d\u7684\u6839\u8282\u70b9\u3002 New(v) New(v) \u8868\u793a\u65b0\u5efa\u4e00\u4e2a\u503c\u4e3a v v \u7684\u8282\u70b9\uff08\u53ef\u4ee5\u770b\u6210\u4e00\u68f5\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u5e73\u8861\u6811\uff09 Updata(x) Updata(x) \u8868\u793a\u66f4\u65b0\u8282\u70b9 x x \u7684 sz sz \u63d0\u9192\uff1a\u8fd9\u91cc\"\u503c\"\u4e0e\"\u6743\u503c\"\u662f\u4e0d\u4e00\u6837\u7684\uff0c\"\u503c\"\u8868\u793a\u8282\u70b9\u4fdd\u5b58\u7684\u503c\uff0c\"\u6743\u503c\"\u4ec5\u4ec5\u7528\u4e8e\u7ef4\u6301\u5e73\u8861\uff0c\u6ce8\u610f\u533a\u5206","title":"\u53d8\u91cf&amp;\u51fd\u6570\u7ea6\u5b9a"},{"location":"ds/bt/fhq-treap/#split","text":"\u600e\u4e48\u5206\u5272\u5462\uff1f \u5e38\u89c1\u7684\u5206\u5272\u65b9\u6cd5\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u6309\u503c\u5206\uff0c\u4e00\u79cd\u662f\u6309\u6392\u540d\u5206\uff08\u5b9e\u73b0\u5dee\u4e0d\u591a\uff0c\u8fd9\u91cc\u53ea\u8bb2\u6309\u503c\u5206\uff09\u3002 \u5148\u6765\u770b\u770b\u5b9a\u4e49\u3002 1 void Split ( int c , int k , int & x , int & y ); c\u8868\u793a\u5f53\u524d\u8981\u5206\u5272\u7684\u6811\u7684\u6839\u8282\u70b9\uff0c\u5e76\u4e14\u628a\u503c \\le k \\le k \u7684\u8282\u70b9\u5206\u5272\u51fa\u6765\uff0c\u6784\u6210\u4e00\u68f5\u6811\uff0c\u628a x x \u8d4b\u4e3a\u6839\u8282\u70b9\uff0c\u5176\u4ed6\u8282\u70b9\u53e6\u5916\u6784\u6210\u4e00\u68f5\u6811\uff0c\u628a y y \u8d4b\u4e3a\u5176\u6839\u8282\u70b9\u3002 x x \u3001 y y \u7528\u5f15\u7528(&)\u66f4\u65b9\u4fbf\u5904\u7406\u3002 \u5bf9\u4e8e\u5f53\u524d\u7684\u6811\uff0c\u5982\u679c\u6839\u8282\u70b9 c c \u7684\u503c \\le k \\le k \uff0c c c \u7684\u5de6\u5b50\u6811\u4e5f\u5168\u90e8 \\le k \\le k \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a x x \u8d4b\u4e3a c c \uff0c\u4fdd\u7559\u5de6\u5b50\u6811\uff0c\u5c06\u53f3\u5b50\u6811 \\le k \\le k \u7684\u90e8\u5206\u5206\u5272\u51fa\u6765\u4f5c\u4e3a x x \u7684\u53f3\u5b50\u6811\u3002\u5269\u4e0b\u7684\u90e8\u5206\u81ea\u7136\u4e5f\u5c31\u662f\u5728 > k > k \u7684\u90e8\u5206\u3002 >k >k \u7684\u60c5\u51b5\u540c\u7406\u3002\u5177\u4f53\u6211\u4eec\u7528\u9012\u5f52\u5b9e\u73b0\u3002 1 2 3 4 5 6 void Split ( int c , int k , int & x , int & y ){ if ( c == 0 ){ x = y = 0 ; return ; } //\u5982\u679c\u5f53\u524d\u5904\u7406\u7684\u6811\u4e3a\u7a7a\uff0c\u5206\u51fa\u7684\u4e24\u4e2a\u5b50\u6811\u5f53\u7136\u4e5f\u4e3a\u7a7a\uff0c\u6240\u4ee5\u76f4\u63a5\u8d4b\u503c\u8fd4\u56de\u3002 if ( val [ c ] <= k ) x = c , Split ( R [ c ], k , R [ x ], y ); //\u5982\u679c\u6839\u8282\u70b9\u503c\u5c0f\u4e8e\u7b49\u4e8ek\uff0c\u628ax\u8d4b\u4e3ac\uff0c\u7ee7\u7eed\u5904\u7406\u53f3\u5b50\u6811\uff0c\u5e76\u628a\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u90e8\u5206\u5206\u5230x\u7684\u53f3\u5b50\u6811\uff0c\u5176\u4ed6\u5206\u5230y else y = c , Split ( L [ c ], k , x , L [ y ] ); Updata ( c ); //\u522b\u5fd8\u4e86\u66f4\u65b0sz }","title":"Split"},{"location":"ds/bt/fhq-treap/#merge","text":"\u4e0a\u9762\u5206\u5272\u7684\u64cd\u4f5c\u4e0d\u4f1a\u6539\u53d8\u5806\u7684\u6027\u8d28\u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff0c\u4f46\u662f\u5728\u5408\u5e76\u7684\u65f6\u5019\u8981\u6ce8\u610f\u4fdd\u6301\u5806\u7684\u6027\u8d28\u3002 1 void Merge ( int & c , int x , int y ); \u8868\u793a\u628a\u4ee5 x x \u548c y y \u4e3a\u6839\u8282\u70b9\u7684\u6811\u5408\u5e76\uff0c\u5c06 c c \u8d4b\u4e3a\u6839\u8282\u70b9\u3002 \u6ce8\u610f\uff1a\u4e0a\u9762\u5206\u5272\u65f6x\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8ey\u7684\uff0c\u5408\u5e76\u65f6\u4e5f\u8981\u6ce8\u610fx\u7684\u6240\u6709\u8282\u70b9\u5c0f\u4e8e\u7b49\u4e8ey\uff0c\u5426\u5219\u4f1a\u51fa\u9519 \u7531\u4e8e x x \u4e0e y y \u7684\u6743\u503c\u5728\u4e24\u9897\u6811\u4e2d\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u5408\u5e76\u540e\u7684\u6811\u6839\u8282\u70b9\u4e0d\u662f x x \u5c31\u662f y y \u3002\u6240\u4ee5\u6bd4\u8f83 x x \u4e0e y y \u7684\u6743\u503c\u5c31\u53ef\u4ee5\u5224\u65ad\u8c01\u4e3a\u6839\u8282\u70b9\u3002 \u5047\u8bbe\u4ee5 x x \u4e3a\u6839\u3002\u56e0\u4e3a\u4fdd\u8bc1 x x \u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u7b49\u4e8e y y \u7684\uff0c\u6240\u4ee5 y y \u80af\u5b9a\u4f1a\u5408\u5e76\u5728 x x \u7684\u53f3\u5b50\u6811\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u4e0d\u7528\u52a8 x x \u7684\u5de6\u5b50\u6811\uff0c\u5408\u5e76 x x \u7684\u53f3\u5b50\u6811\u4e0e y y \u4f5c\u4e3a x x \u7684\u53f3\u5b50\u6811\u3002 y y \u4e3a\u6839\u65f6\u540c\u7406\u3002\u8fd9\u6837\uff0c\u5c31\u5de7\u5999\u5b8c\u6210\u4e86\u540c\u65f6\u7ef4\u62a4\u5806\u7684\u6027\u8d28\u4e0e\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\u3002 \u6211\u4eec\u8fd8\u662f\u7528\u9012\u5f52\u3002 1 2 3 4 5 6 void Merge ( int & c , int x , int y ){ if ( ! x || ! y ){ c = x | y ; return ; } if ( rk [ x ] >= rk [ y ] ) c = x , Merge ( R [ x ], R [ c ], y ); else c = y , Merge ( L [ y ], x , L [ c ] ); Updata ( c ); } \u53ea\u8981\u7406\u89e3\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff0c\u5269\u4e0b\u7684\u90fd\u53ef\u4ee5\u7528\u8fd9\u4e24\u79cd\u64cd\u4f5c\u5b9e\u73b0\u3002","title":"Merge"},{"location":"ds/bt/fhq-treap/#_4","text":"\u76f4\u63a5\u628a\u5b83\u5206\u6210 \\le v \\le v \u7684\u6811\u548c > v > v \u7684\u6811\uff0c\u5c06\u65b0\u5efa\u7684\u8282\u70b9\u4e0e \\le v \\le v \u7684\u6811\u5408\u5e76\uff0c\u518d\u4e0e >y >y \u6811\u5408\u5e76\u5373\u53ef\u3002 1 2 3 4 5 6 7 //opt 1 void Ins ( int v ){ int x , y , z ( New ( v )); Split ( root , v , x , y ); Merge ( x , x , z ); Merge ( root , x , y ); }","title":"\u63d2\u5165\u64cd\u4f5c"},{"location":"ds/bt/fhq-treap/#_5","text":"\u5206\u6210 \\le k \\le k \u548c > k > k \u4e24\u9897\u6811\uff0c\u518d\u5206\u6210 < k < k \u3001 =k =k \u3001 > k > k \u4e09\u68f5\u6811\uff0c\u5c06 =k =k \u5de6\u53f3\u5b50\u6811\u5408\u5e76\uff0c\u76f8\u5f53\u4e8e\u5220\u53bb =k =k \u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5c06\u4e09\u68f5\u6811\u91cd\u65b0\u5408\u5e76\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 // opt 2 void Del ( int v ){ int x , y , z ; Split ( root , v , x , y ); Split ( x , v - 1 , x , z ); Merge ( z , L [ z ], R [ z ] ); Merge ( x , x , z ); Merge ( root , x , y ); }","title":"\u5220\u9664\u64cd\u4f5c"},{"location":"ds/bt/fhq-treap/#_6","text":"\u5176\u5b9e\u53ef\u4ee5\u7528 while \u5faa\u73af\uff0c\uff0c\uff0c\u4f46\u662f\uff0c\uff0c\uff0c\u6211\uff0c\uff0c\uff0c\u61d2\uff0c\uff0c\uff0c\u6240\uff0c\uff0c\uff0c\u4ee5\uff0c\uff0c\uff0c\u76f4\uff0c\uff0c\uff0c\u63a5\uff0c\uff0c\uff0c\uff0c\uff0c\uff0c\uff0c 1 2 3 4 5 6 7 8 //opt 3 int GetRankByVal ( int v ){ int x , y , t ; Split ( root , v - 1 , x , y ); t = sz [ x ]; Merge ( root , x , y ); return t + 1 ; }","title":"\u67e5\u8be2\u6392\u540d"},{"location":"ds/bt/fhq-treap/#_7","text":"\u8fd9\u771f\u7684\u4e0d\u80fd\u7528Split\u548cMerge\u5077\u61d2\u4e86\uff0c\uff0c\uff0c\u6240\u4ee5\u4e56\u4e56\u5199\u4e2a while \u5427~ \u6280\u672f\u542b\u91cf\u4e0d\u9ad8\uff0c\u81ea\u884c\u7406\u89e3\u3002 1 2 3 4 5 6 7 8 9 10 //opt 4 int GetValByRank ( int rk ){ int c ( root ); while ( c ){ if ( sz [ L [ c ]] + 1 == rk ) return val [ c ]; else if ( sz [ L [ c ]] >= rk ) c = L [ c ]; else rk -= 1 + sz [ L [ c ]], c = R [ c ]; } return - 1 ; //\u9898\u76ee\u6ca1\u8981\u6c42\u3002\u3002\u3002\u53ea\u662f\u4e3a\u4e86\u81ea\u5df1\u67e5\u9519 }","title":"\u67e5\u8be2\u503c"},{"location":"ds/bt/fhq-treap/#_8","text":"\u5206\u6210\u4e24\u9897\u6811 < v < v \u4e0e \\ge v \\ge v \uff0c\u5728 < v < v \u6811\u4e2d\u627e\u6700\u5927\u503c\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //opt 5 int GetPre ( int v ){ int x , y , z ; Split ( root , v - 1 , x , y ); z = x ; while ( R [ z ] ) z = R [ z ]; Merge ( root , x , y ); return val [ z ]; } ```` ------ ## \u67e5\u8be2\u540e\u7f00 \u4e0e\u67e5\u8be2\u524d\u7f00\u540c\u7406\u3002 ``` cpp //opt 6 int GetNxt ( int v ){ int x , y , z ; Split ( root , v , x , y ); z = y ; while ( L [ z ] ) z = L [ z ]; Merge ( root , x , y ); return val [ z ]; }","title":"\u67e5\u8be2\u524d\u7f00"},{"location":"ds/bt/fhq-treap/#_9","text":"\u6d1b\u8c37 P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #include <bits/stdc++.h> using namespace std ; #define MAXN 100005 int L [ MAXN ], R [ MAXN ], sz [ MAXN ], rk [ MAXN ], val [ MAXN ], tot ; int root ; int New ( int v ){ return val [ ++ tot ] = v , rk [ tot ] = rand (), L [ tot ] = R [ tot ] = 0 , sz [ tot ] = 1 , tot ; } #define Updata(x) sz[x] = sz[L[x]] + sz[R[x]] + 1 void Split ( int c , int k , int & x , int & y ){ if ( c == 0 ){ x = y = 0 ; return ; } if ( val [ c ] <= k ) x = c , Split ( R [ c ], k , R [ x ], y ); else y = c , Split ( L [ c ], k , x , L [ y ] ); Updata ( c ); } void Merge ( int & c , int x , int y ){ if ( ! x || ! y ){ c = x | y ; return ; } if ( rk [ x ] >= rk [ y ] ) c = x , Merge ( R [ x ], R [ c ], y ); else c = y , Merge ( L [ y ], x , L [ c ] ); Updata ( c ); } //opt 1 void Ins ( int v ){ int x , y , z ( New ( v )); Split ( root , v , x , y ); Merge ( x , x , z ); Merge ( root , x , y ); } // opt 2 void Del ( int v ){ int x , y , z ; Split ( root , v , x , y ); Split ( x , v - 1 , x , z ); Merge ( z , L [ z ], R [ z ] ); Merge ( x , x , z ); Merge ( root , x , y ); } //opt 3 int GetRankByVal ( int v ){ int x , y , t ; Split ( root , v - 1 , x , y ); t = sz [ x ]; Merge ( root , x , y ); return t + 1 ; } //opt 4 int GetValByRank ( int rk ){ int c ( root ); while ( c ){ if ( sz [ L [ c ]] + 1 == rk ) return val [ c ]; else if ( sz [ L [ c ]] >= rk ) c = L [ c ]; else rk -= 1 + sz [ L [ c ]], c = R [ c ]; } return - 1 ; } //opt 5 int GetPre ( int v ){ int x , y , z ; Split ( root , v - 1 , x , y ); z = x ; while ( R [ z ] ) z = R [ z ]; Merge ( root , x , y ); return val [ z ]; } //opt 6 int GetNxt ( int v ){ int x , y , z ; Split ( root , v , x , y ); z = y ; while ( L [ z ] ) z = L [ z ]; Merge ( root , x , y ); return val [ z ]; } int T ; int main (){ srand ( time ( 0 )); //\u968f\u673a\u6570\u79cd\u5b50\u522b\u5fd8\u4e86 root = New ( INT_MAX ); //\u865a\u8282\u70b9\uff0c\u907f\u514d\u4e00\u4e2a\u8282\u70b9\u90fd\u6ca1\u6709\u4e0d\u65b9\u4fbf\u5408\u5e76\u3002\u6ce8\u610f\u8981\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u6570\uff0c\u67e5\u8be2\u6392\u540d\u65f6\u5c31\u4e0d\u7528-1 scanf ( \"%d\" , & T ); while ( T -- ){ int opt , x ; scanf ( \"%d%d\" , & opt , & x ); switch ( opt ){ case 1 : Ins ( x ); break ; case 2 : Del ( x ); break ; case 3 : printf ( \"%d \\n \" , GetRankByVal ( x ) ); break ; case 4 : printf ( \"%d \\n \" , GetValByRank ( x ) ); break ; case 5 : printf ( \"%d \\n \" , GetPre ( x ) ); break ; case 6 : printf ( \"%d \\n \" , GetNxt ( x ) ); break ; } } return 0 ; } FHQ Treap\u8fd8\u53ef\u4ee5\u8d44\u74f7\u53ef\u6301\u4e45\u5316~\u6bd4Treap\u3001Splay\u597d\u7528\u591a\u5566\u3002 FHQ Treap\u751a\u81f3\u53ef\u4ee5\u62ff\u6765\u5199LCT,\u4f46\u662f\u5e38\u6570\u8fc7\u5927\u3002 \u6811\u5957\u6811\u4e5f\u53ef\u4ee5\u7528FHQ Treap,\u4f46\u662f\u5e38\u6570\u8fc7\u5927,\u6700\u597d\u522b\u4f7f\u7528FHQ Treap\u6765\u5957\u3002","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"math/mobius/","text":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u4e00\u4e9b\u96be\u4ee5\u7528\u5176\u4ed6\u65b9\u6cd5\u8f6c\u6362,\u6570\u636e\u53c8\u7279\u522b\u5927\u7684\u5f0f\u5b50,\u5c31\u50cf\u4e0b\u9762\u8fd9\u79cd\u2014\u2014 \\sum^N_i\\sum^M_j\\gcd(i, j) \\sum^N_i\\sum^M_j\\gcd(i, j) (\u6d1b\u8c37 P1447 [NOI2010]\u80fd\u91cf\u91c7\u96c6) \u901a\u8fc7\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14,\u5c31\u53ef\u4ee5\u628a\u5b83\u53d8\u6210\u4e00\u9053\u53ef\u505a\u9898\u3002 \u524d\u7f6e\u829d\u58eb \u00b6 \u8bf7\u5148\u5b66\u4e60\u4ee5\u4e0b\u829d\u58eb \u6570\u8bba\u5206\u5757 \u7ebf\u6027\u7b5b \u79ef\u6027\u51fd\u6570 \u00b6 \u5982\u679c\u51fd\u6570 f f \u6ee1\u8db3 \\forall \\gcd(i,j) = 1, f(i\\times j) = f(i)\\times f(j) \\forall \\gcd(i,j) = 1, f(i\\times j) = f(i)\\times f(j) ,\u90a3\u4e48 f f \u4e3a\u79ef\u6027\u51fd\u6570\u3002 \u79ef\u6027\u51fd\u6570\u8fd8\u53ef\u4ee5\u5206\u51fa\u4e00\u7c7b\u5b8c\u5168\u79ef\u6027\u51fd\u6570\u3002\u5373\u6ee1\u8db3 \\forall i,j, f(i\\times j)=f(i)\\times f(j) \\forall i,j, f(i\\times j)=f(i)\\times f(j) \u3002 \u5e38\u89c1\u7684\u79ef\u6027\u51fd\u6570\u6709 \\qquad \\begin{array} \\text{\u7ea6\u6570\u4e2a\u6570\u51fd\u6570}&d(n)=\\displaystyle\\sum_{d\\mid n}1 \\\\ \\text{\u7ea6\u6570\u548c\u51fd\u6570}&\\displaystyle\\sigma(n)=\\sum_{d\\mid n}d \\\\ \\text{\u7ea6\u6570 $k$ \u6b21\u5e42\u51fd\u6570}&\\displaystyle\\sigma_k(n)=\\sum_{d\\mid n}d^k \\\\ \\text{\u6b27\u62c9\u51fd\u6570}&\\displaystyle\\varphi(n)=\\sum_{i=1}^n [\\gcd(i,n)=1] \\\\ \\text{\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570}&\\displaystyle\\mu(n)\\text{\u4e0b\u9762\u4f1a\u4ecb\u7ecd} \\\\ \\end{array} \\qquad \\begin{array} \\text{\u7ea6\u6570\u4e2a\u6570\u51fd\u6570}&d(n)=\\displaystyle\\sum_{d\\mid n}1 \\\\ \\text{\u7ea6\u6570\u548c\u51fd\u6570}&\\displaystyle\\sigma(n)=\\sum_{d\\mid n}d \\\\ \\text{\u7ea6\u6570 $k$ \u6b21\u5e42\u51fd\u6570}&\\displaystyle\\sigma_k(n)=\\sum_{d\\mid n}d^k \\\\ \\text{\u6b27\u62c9\u51fd\u6570}&\\displaystyle\\varphi(n)=\\sum_{i=1}^n [\\gcd(i,n)=1] \\\\ \\text{\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570}&\\displaystyle\\mu(n)\\text{\u4e0b\u9762\u4f1a\u4ecb\u7ecd} \\\\ \\end{array} P.S.[\\text{\u903b\u8f91\u8868\u8fbe\u5f0f}]\\text{\u8868\u793a\u5f53\u903b\u8f91\u8868\u8fbe\u5f0f\u4e3a\u771f,\u503c\u4e3a1,\u5426\u5219\u4e3a0} P.S.[\\text{\u903b\u8f91\u8868\u8fbe\u5f0f}]\\text{\u8868\u793a\u5f53\u903b\u8f91\u8868\u8fbe\u5f0f\u4e3a\u771f,\u503c\u4e3a1,\u5426\u5219\u4e3a0} \u5e38\u89c1\u5b8c\u5168\u79ef\u6027\u51fd\u6570\u6709 \\qquad \\begin{array} \\text{1\u51fd\u6570}&1(n)=1 \\\\ \\text{ID\u51fd\u6570}&ID(n)=n \\\\ \\epsilon\\text{\u51fd\u6570}&\\epsilon(n)=[n=1] \\\\ \\end{array} \\qquad \\begin{array} \\text{1\u51fd\u6570}&1(n)=1 \\\\ \\text{ID\u51fd\u6570}&ID(n)=n \\\\ \\epsilon\\text{\u51fd\u6570}&\\epsilon(n)=[n=1] \\\\ \\end{array} \u82e5 f f \u548c g g \u5747\u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u5219\u4ee5\u4e0b\u51fd\u6570\u4e5f\u4e3a\u79ef\u6027\u51fd\u6570\uff1a \\begin{aligned} h(x)&=f(x^p)\\\\ h(x)&=f^p(x)\\\\ h(x)&=f(x)g(x)\\\\ h(x)&=\\sum_{d\\mid x}f(d)g(\\frac{x}{d}) \\end{aligned} \\begin{aligned} h(x)&=f(x^p)\\\\ h(x)&=f^p(x)\\\\ h(x)&=f(x)g(x)\\\\ h(x)&=\\sum_{d\\mid x}f(d)g(\\frac{x}{d}) \\end{aligned} \u79ef\u6027\u51fd\u6570\u4e00\u822c\u90fd\u53ef\u4ee5\u7528\u7ebf\u6027\u7b5b\u7b5b\u51fa\u3002(\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355,\u8bf7\u81ea\u884c\u67e5\u627e\u8d44\u6599) \u83ab\u6bd4\u4e4c\u65af\u51fd\u6570 \u00b6 \\mu(n)= \\begin{cases} 1 & n=1\\\\ (-1)^k & c_{1,2,\\cdots,k}=1\\quad(n=\\displaystyle\\prod_{i=1}^k {p_i}^{c_i})\\\\ 0 & c_i>1 \\end{cases} \\mu(n)= \\begin{cases} 1 & n=1\\\\ (-1)^k & c_{1,2,\\cdots,k}=1\\quad(n=\\displaystyle\\prod_{i=1}^k {p_i}^{c_i})\\\\ 0 & c_i>1 \\end{cases} \u7b80\u5355\u5730\u8bf4,\u5c31\u662f\u5f53 n n \u4e3a1,\u51fd\u6570\u503c\u4e3a1;\u5f53 n>1 n>1 ,\u82e5 n n \u4e3a\u67d0\u6570\u7684\u5e73\u65b9\u7684\u500d\u6570,\u51fd\u6570\u503c\u4e3a0;\u5426\u5219\u8bbe k k \u4e3a n n \u7684\u8d28\u56e0\u6570\u4e2a\u6570,\u51fd\u6570\u503c\u4e3a (-1)^k (-1)^k Dirichlet\u5377\u79ef \u00b6 Dirichlet\u5377\u79ef(\u72c4\u5229\u514b\u96f7\u5377\u79ef)\u53ef\u4ee5\u770b\u6210\u51fd\u6570\u4e4b\u95f4\u7684\u4e00\u79cd\u8fd0\u7b97\u3002\u5bf9\u4e8e\u4e24\u4e2a\u6570\u8bba\u51fd\u6570(\u5373\u5b9a\u4e49\u57df\u4e3a\u6b63\u6574\u6570\u7684\u51fd\u6570) f f , g g ,\u5b83\u4eec\u7684Dirichlet\u5377\u79ef\u4e3a $$ (f * g)(n) = \\sum_{d|n}f(d) \\times g(\\frac nd) $$ \\varepsilon \\varepsilon \u4e3aDirichlet\u5377\u79ef\u7684\u5355\u4f4d\u5143,\u5373 f * \\varepsilon = f f * \\varepsilon = f \u82e5 f f , g g \u4e3a\u79ef\u6027\u51fd\u6570, f * g f * g \u4e5f\u4e3a\u79ef\u6027\u51fd\u6570\u3002 \u8bc1\u660e: \\text{\u8bben,m,gcd(n,m)=1} \\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{i|n}f(i) \\times g(\\frac ni) \\times ( \\sum_{j|m}f(j) \\times g(\\frac mj) ) \\\\ \\text{\u53d8\u6362\u5faa\u73af\u987a\u5e8f} \\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{i|n}\\sum_{j|m}f(i) \\times g(\\frac ni) \\times f(j) \\times g(\\frac mj)\\\\ = \\sum_{i|n}\\sum_{j|m}f(ij) \\times g(\\frac {nm}{ij})\\\\ \\text{\u7531\u4e8en,m\u4e92\u8d28,i|n,j|m,\u5219nm\u7684\u6240\u6709\u56e0\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210ij,\u8bbek=ij}\\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{k|(nm)}f(k) \\times g(\\frac {nm}{k}) = (f * g)(nm) \\text{\u8bben,m,gcd(n,m)=1} \\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{i|n}f(i) \\times g(\\frac ni) \\times ( \\sum_{j|m}f(j) \\times g(\\frac mj) ) \\\\ \\text{\u53d8\u6362\u5faa\u73af\u987a\u5e8f} \\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{i|n}\\sum_{j|m}f(i) \\times g(\\frac ni) \\times f(j) \\times g(\\frac mj)\\\\ = \\sum_{i|n}\\sum_{j|m}f(ij) \\times g(\\frac {nm}{ij})\\\\ \\text{\u7531\u4e8en,m\u4e92\u8d28,i|n,j|m,\u5219nm\u7684\u6240\u6709\u56e0\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210ij,\u8bbek=ij}\\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{k|(nm)}f(k) \\times g(\\frac {nm}{k}) = (f * g)(nm) Dirichlet\u5377\u79ef\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\u3002 \u524d\u8005\u5f88\u597d\u8bc1,\u8fd9\u91cc\u7701\u7565\u3002\u540e\u8005\u5168\u90e8\u5c55\u5f00\u5c31\u597d\u4e86,\u8fd9\u91cc\u7701\u7565\u3002 \u5e38\u89c1\u7684Dirichlet\u5377\u79ef: \\epsilon=\\mu * 1 \\\\ d=1 * 1 \\\\ \\varphi=\\mu * ID \\\\ \\epsilon=\\mu * 1 \\\\ d=1 * 1 \\\\ \\varphi=\\mu * ID \\\\ \u6211\u4eec\u5148\u8bc1\u660e\u7b2c\u4e00\u4e2a,\u7b2c\u4e09\u4e2a(\u7b2c\u4e8c\u4e2a\u8fd9\u4e48\u7b80\u5355\u5c31\u7b97\u4e86)\u4e5f\u7ed9\u51fa\u6765,\u4f46\u662f\u5efa\u8bae\u5148\u770b\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u3002 \u8bc1\u660e \\epsilon=\\mu * 1 \\epsilon=\\mu * 1 : \\epsilon(n)=\\sum_{d|n}\\mu(d) \\epsilon(n)=\\sum_{d|n}\\mu(d) \u6839\u636e\u552f\u4e00\u5206\u89e3\u5b9a\u7406,\u6211\u4eec\u53ef\u4ee5\u7528 n n \u7684\u8d28\u56e0\u6570( p_1,p_2,p_3... p_1,p_2,p_3... )\u6765\u7ec4\u6210 d d \u3002 \u5f88\u660e\u663e,\u6bcf\u4e2a p_i p_i \u53d6\u4e24\u4e2a\u6216\u4ee5\u4e0a\u5bf9\u7b54\u6848\u662f\u6ca1\u6709\u5f71\u54cd\u7684(\u6839\u636e\u5b9a\u4e49, \\mu \\mu \u51fd\u6570\u503c\u4e3a0)\u3002 \u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u5f0f\u5b50 \\text{\u8bben\u6709t\u4e2a\u8d28\u56e0\u6570} \\\\ \\epsilon(n)=\\sum_{i=0}^t (-1)^i \\times C_t^i \\text{\u8bben\u6709t\u4e2a\u8d28\u56e0\u6570} \\\\ \\epsilon(n)=\\sum_{i=0}^t (-1)^i \\times C_t^i \u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406,\u5982\u679ct\u4e3a1,\u503c\u4e3a1,\u5426\u5219\u4e3a0 \u9996\u5148, t=1 t=1 \u7684\u65f6\u5019\u5f88\u660e\u663e\u7ed3\u679c\u4e3a 1 1 \u56e0\u4e3a (x+y)^n=\\sum_{i=0}^n x^iy^{n-i}C_{n}^i (x+y)^n=\\sum_{i=0}^n x^iy^{n-i}C_{n}^i \u6240\u4ee5 (1 + (-1))^t=\\sum_{i=0}^t 1^{t-i}\\times(-1)^{i}\\times C_t^i=\\sum_{i=0}^t (-1)^i\\times C_t^i (1 + (-1))^t=\\sum_{i=0}^t 1^{t-i}\\times(-1)^{i}\\times C_t^i=\\sum_{i=0}^t (-1)^i\\times C_t^i \u53ef\u4ee5\u5f97\u51fa \\sum_{d|n}\\mu(d) = [t = 1] \\sum_{d|n}\\mu(d) = [t = 1] \u63a5\u4e0b\u6765\u7684\u8bc1\u660e\u8bf7\u5148\u5b66\u4e60\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u3002 \u8bc1\u660e \\varphi=\\mu * ID \\varphi=\\mu * ID : \u53ef\u4ee5\u5229\u7528\u6b27\u62c9\u51fd\u6570\u7684\u5b9a\u4e49+\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u6765\u8bc1\u3002 \u6211\u4eec\u5148\u5728\u7b49\u5f0f\u4e24\u8fb9\u540c\u65f6\u53771 $$ \\varphi * 1 = 1 * \\mu * ID \\ \\varphi * 1 = \\varepsilon * ID \\ \\varphi * 1 = ID \\ (\\varphi * 1)(n) = \\sum_{d|n}\\varphi(d) = \\sum_{d|n}\\varphi(n / d) $$ \u53ef\u4ee5\u8ba4\u4e3a\u4e0a\u9762\u67ff\u5b50\u4e2d \\varphi(n / d) \\varphi(n / d) \u8868\u793a \\sum_i=1^n[gcd(n,i)=d] \\sum_i=1^n[gcd(n,i)=d] ,\u5f88\u660e\u663e,\u6bcf\u4e2a\u6570\u4e0e n n \u7684\u516c\u7ea6\u6570\u4e0d\u53d8,\u5bf9\u7b54\u6848\u6709\u4e14\u4ec5\u6709 1 1 \u7684\u8d21\u732e,\u6700\u7ec8\u7684\u503c\u5373\u4e3a n n \u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14 \u00b6 \u603b\u7b97\u5199\u5230\u8fd9\u91cc\u4e86(\u63a9\u9762\u75db\u54ed \u5bf9\u4e8e\u4e24\u4e2a\u6570\u8bba\u51fd\u6570 f f , g g f = g * 1 \\Leftrightarrow f * \\mu = g f = g * 1 \\Leftrightarrow f * \\mu = g \u76f4\u63a5\u7528Dirichlet\u5377\u79ef\u5373\u53ef\u3002 f = g * 1 \\\\ \\text{\u4e24\u8fb9\u540c\u65f6\u5377} \\mu \\\\ f * \\mu = g * 1 * \\mu \\\\ f * \\mu = g * \\varepsilon \\\\ f * \\mu = g f = g * 1 \\\\ \\text{\u4e24\u8fb9\u540c\u65f6\u5377} \\mu \\\\ f * \\mu = g * 1 * \\mu \\\\ f * \\mu = g * \\varepsilon \\\\ f * \\mu = g \u4f8b\u9898 \u00b6 \u6d1b\u8c37 P2522 [HAOI2011]Problem b \u00b6 \u6211\u4eec\u53ef\u4ee5\u6c42 x \\le n,y \\le m x \\le n,y \\le m ,\u5dee\u5206\u5904\u7406\u5373\u53ef\u3002 \u6211\u4eec\u8ba4\u4e3an < m,\u5426\u5219\u4ea4\u6362\u5373\u53ef\u3002\u4ee5\u4e0b/\u5747\u8868\u793a\u6574\u9664 Ans = \\sum_{i=1}^n\\sum_{j=1}^m[gcd(i, j) = k] \\\\ Ans = \\sum_{i=1}^{n/k}\\sum_{j=1}^{m/k}[gcd(i,j)=1] \\\\ \\text{\u8bben/k=a,m/k=b} \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\varepsilon(gcd(i,j)) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}(\\mu * 1)(gcd(i,j)) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\sum_{d|gcd(i,j)}\\mu(d) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\sum_{d|i,d|j}\\mu(d) \\\\ Ans = \\sum_{d=1}^{a}\\sum_{i=1}^{a/d}\\sum_{j=1}^{b/d}\\mu(d) \\\\ Ans = \\sum_{d=1}^{a}\\mu(d) \\times (a/d) \\times (b/d) Ans = \\sum_{i=1}^n\\sum_{j=1}^m[gcd(i, j) = k] \\\\ Ans = \\sum_{i=1}^{n/k}\\sum_{j=1}^{m/k}[gcd(i,j)=1] \\\\ \\text{\u8bben/k=a,m/k=b} \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\varepsilon(gcd(i,j)) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}(\\mu * 1)(gcd(i,j)) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\sum_{d|gcd(i,j)}\\mu(d) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\sum_{d|i,d|j}\\mu(d) \\\\ Ans = \\sum_{d=1}^{a}\\sum_{i=1}^{a/d}\\sum_{j=1}^{b/d}\\mu(d) \\\\ Ans = \\sum_{d=1}^{a}\\mu(d) \\times (a/d) \\times (b/d) \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7b5b\u51fa \\mu \\mu -> \u524d\u7f00\u548c -> \u6570\u8bba\u5206\u5757\u5566 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <bits/stdc++.h> using namespace std ; #define MAXN 50000 int T , a , b , c , d , k ; int mu [ MAXN + 5 ], p [ MAXN + 5 ], tot ; bool vis [ MAXN + 5 ]; int Work ( int N , int M ){ int ans ( 0 ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans += ( N / i ) * ( M / i ) * ( mu [ j ] - mu [ i - 1 ] ); } return ans ; } int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ if ( ! vis [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && p [ j ] * i <= MAXN ; ++ j ){ vis [ p [ j ] * i ] = 1 ; if ( i % p [ j ] ) mu [ p [ j ] * i ] = - mu [ i ]; else { mu [ p [ j ] * i ] = 0 ; break ; } } } for ( int i = 1 ; i <= MAXN ; ++ i ) mu [ i ] += mu [ i - 1 ]; while ( T -- ){ scanf ( \"%d%d%d%d%d\" , & a , & b , & c , & d , & k ); -- a ; -- c ; a /= k ; b /= k ; c /= k ; d /= k ; printf ( \"%d \\n \" , Work ( b , d ) - Work ( a , d ) - Work ( c , b ) + Work ( a , c ) ); } return 0 ; } \u6d1b\u8c37 P2257 YY\u7684GCD \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <bits/stdc++.h> using namespace std ; #define LL long long #define MAXN 10000000 int T , N , M ; int p [ MAXN / 10 + 5 ], mu [ MAXN ], s [ MAXN ], tot ; bool v [ MAXN + 5 ]; int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= MAXN ; ++ j ){ v [ i * p [ j ]] = 1 ; if ( i % p [ j ] ) mu [ i * p [ j ]] = - mu [ i ]; else break ; } } for ( int i = 1 ; i <= tot ; ++ i ) for ( int j = p [ i ]; j <= MAXN ; j += p [ i ] ) s [ j ] += mu [ j / p [ i ]]; for ( int i = 1 ; i <= MAXN ; ++ i ) s [ i ] += s [ i - 1 ]; while ( T -- ){ LL ans ( 0 ); scanf ( \"%d%d\" , & N , & M ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans += ( LL )( N / i ) * ( LL )( M / i ) * ( LL )( s [ j ] - s [ i - 1 ] ); } printf ( \"%lld \\n \" , ans ); } return 0 ; } \u6d1b\u8c37 P3312 [SDOI2014]\u6570\u8868 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <bits/stdc++.h> using namespace std ; #define MAXN 100005 #define n 100000 #define LL long long #define pi pair<LL, int> struct query { int N , M , a , id ; } q [ 20005 ]; bool cmp ( query x , query y ){ return x . a < y . a ; } int Q , mu [ MAXN ], p [ MAXN ], tot ; pi f [ MAXN ]; int ans [ 20005 ], c [ MAXN ]; bool vis [ MAXN ]; inline void Add ( int x , int y ){ for ( ; x <= n ; x += x & - x ) c [ x ] += y ; } inline int Get ( int x ){ int ans ( 0 ); for ( ; x ; x -= x & - x ) ans += c [ x ]; return ans ; } int main (){ scanf ( \"%d\" , & Q ); mu [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ){ if ( ! vis [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= n ; ++ j ){ vis [ i * p [ j ]] = 1 ; if ( i % p [ j ] ) mu [ i * p [ j ]] = - mu [ i ]; else break ; } } for ( int i = 1 ; i <= n ; ++ i ){ f [ i ]. second = i ; for ( int j = i ; j <= n ; j += i ) f [ j ]. first += i ; } sort ( f + 1 , f + n + 1 ); for ( int i = 1 ; i <= Q ; ++ i ) scanf ( \"%d%d%d\" , & q [ i ]. N , & q [ i ]. M , & q [ i ]. a ), q [ i ]. id = i ; sort ( q + 1 , q + Q + 1 , cmp ); for ( int T = 1 , cur = 1 ; T <= Q ; ++ T ){ while ( f [ cur ]. first <= q [ T ]. a ){ int x ( f [ cur ]. second ); for ( int i = x ; i <= n ; i += x ) Add ( i , f [ cur ]. first * mu [ i / x ] ); ++ cur ; } if ( q [ T ]. N > q [ T ]. M ) swap ( q [ T ]. N , q [ T ]. M ); for ( int i = 1 , j ; i <= q [ T ]. N ; i = j + 1 ){ j = min ( q [ T ]. N / ( q [ T ]. N / i ), q [ T ]. M / ( q [ T ]. M / i ) ); ans [ q [ T ]. id ] += ( q [ T ]. N / i ) * ( q [ T ]. M / i ) * ( Get ( j ) - Get ( i - 1 ) ); } if ( ans [ q [ T ]. id ] < 0 ) ans [ q [ T ]. id ] = ans [ q [ T ]. id ] + ( 1 << 30 ) + ( 1 << 30 ); } for ( int i = 1 ; i <= Q ; ++ i ) printf ( \"%d \\n \" , ans [ i ] ); return 0 ; } \u6d1b\u8c37 P3327 [SDOI2015]\u7ea6\u6570\u4e2a\u6570\u548c \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <bits/stdc++.h> using namespace std ; #define MAXN 50000 #define LL long long int T , N , M ; LL ans ; int p [ MAXN + 5 ], tot , mu [ MAXN + 5 ], num [ MAXN + 5 ]; LL d [ MAXN + 5 ]; bool v [ MAXN + 5 ]; int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = 1 ; d [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 , d [ i ] = 2 , num [ i ] = 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= MAXN ; ++ j ){ v [ i * p [ j ]] = 1 ; if ( i % p [ j ] ){ mu [ i * p [ j ]] = - mu [ i ]; num [ i * p [ j ]] = 1 ; d [ i * p [ j ]] = d [ i ] << 1 ; } else { mu [ i * p [ j ]] = 0 ; num [ i * p [ j ]] = num [ i ] + 1 ; d [ i * p [ j ]] = d [ i ] / ( num [ i ] + 1 ) * ( num [ i ] + 2 ); break ; } } } for ( int i = 2 ; i <= MAXN ; ++ i ) mu [ i ] += mu [ i - 1 ], d [ i ] += d [ i - 1 ]; while ( T -- ){ ans = 0 ; scanf ( \"%d%d\" , & N , & M ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ) j = min ( N / ( N / i ), M / ( M / i ) ), ans += ( mu [ j ] - mu [ i - 1 ] ) * d [ N / i ] * d [ M / i ]; printf ( \"%lld \\n \" , ans ); } return 0 ; } \u6d1b\u8c37 P3455 [POI2007]ZAP-Queries \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <bits/stdc++.h> using namespace std ; #define MAXN 50000 int T ; int mu [ MAXN + 5 ], p [ MAXN + 5 ], tot ; bool v [ MAXN + 5 ]; int Work ( int N , int M ){ int ans ( 0 ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans += ( N / i ) * ( M / i ) * ( mu [ j ] - mu [ i - 1 ] ); } return ans ; } int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= MAXN ; ++ j ){ v [ i * p [ j ]] = 1 ; mu [ i * p [ j ]] = i % p [ j ] ? - mu [ i ] : 0 ; if ( i % p [ j ] == 0 ) break ; } } for ( int i = 1 ; i <= MAXN ; ++ i ) mu [ i ] += mu [ i - 1 ]; while ( T -- ){ int a , b , d ; scanf ( \"%d%d%d\" , & a , & b , & d ); a /= d ; b /= d ; printf ( \"%d \\n \" , Work ( a , b ) ); } return 0 ; } \u6d1b\u8c37 P3704 [SDOI2017]\u6570\u5b57\u8868\u683c \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <bits/stdc++.h> using namespace std ; #define MAXN 1000000 #define LL long long #define mod 1000000007 int T , N , M ; int p [ MAXN + 5 ], mu [ MAXN + 5 ], tot ; bool v [ MAXN + 5 ]; LL f [ MAXN + 5 ], g [ MAXN + 5 ], s [ MAXN + 5 ]; inline LL Work ( int N , int M ){ LL ans ( 0 ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans = ( ans + ( mu [ j ] - mu [ i - 1 ] ) * ( N / i ) % mod * ( M / i ) % mod ) % mod ; } return ( ans % mod + mod ) % mod ; } inline LL Pow ( LL x , LL y ){ LL ans ( 1 ); for ( x %= mod ; y ; y >>= 1 , x = x * x % mod ) if ( y & 1 ) ans = ans * x % mod ; return ans ;} #define inv(x) (Pow( (x), mod - 2 )) int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = s [ 0 ] = s [ 1 ] = f [ 1 ] = g [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % mod , s [ i ] = 1 , g [ i ] = Pow ( f [ i ], mod - 2 ); if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= MAXN ; ++ j ){ v [ i * p [ j ]] = 1 ; mu [ i * p [ j ]] = i % p [ j ] ? - mu [ i ] : 0 ; if ( i % p [ j ] == 0 ) break ; } } for ( int i = 1 ; i <= MAXN ; ++ i ) if ( mu [ i ] ) for ( int j = i ; j <= MAXN ; j += i ) s [ j ] = s [ j ] * ( mu [ i ] == 1 ? f [ j / i ] : g [ j / i ] ) % mod ; for ( int i = 2 ; i <= MAXN ; ++ i ) s [ i ] = s [ i ] * s [ i - 1 ] % mod ; while ( T -- ){ LL ans ( 1 ); scanf ( \"%d%d\" , & N , & M ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans = ( ans * Pow ( s [ j ] * inv ( s [ i - 1 ]) % mod , ( LL )( N / i ) * ( M / i ) ) ) % mod ; } printf ( \"%lld \\n \" , ans ); } return 0 ; } \u6d1b\u8c37 P4450 \u53cc\u4eb2\u6570 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; #define MAXN 1000050 #define LL long long int A , B , d ; int mu [ MAXN ], p [ MAXN ], tot ; char v [ MAXN ]; int main (){ scanf ( \"%d%d%d\" , & A , & B , & d ), A /= d , B /= d , mu [ 1 ] = 1 , A > B ? swap ( A , B ), 0 : 0 ; for ( int i = 2 ; i <= A ; ++ i ){ if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= A ; ++ j ){ v [ i * p [ j ]] = 1 ; mu [ i * p [ j ]] = i % p [ j ] ? - mu [ i ] : 0 ; if ( i % p [ j ] == 0 ) break ; } } for ( int i = 1 ; i <= A ; ++ i ) mu [ i ] += mu [ i - 1 ]; LL ans ( 0 ); for ( int i = 1 , j ; i <= A ; i = j + 1 ) j = min ( A / ( A / i ), B / ( B / i ) ), ans += ( LL )( A / i ) * ( B / i ) * ( mu [ j ] - mu [ i - 1 ] ); printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14"},{"location":"math/mobius/#_1","text":"\u8bf7\u5148\u5b66\u4e60\u4ee5\u4e0b\u829d\u58eb \u6570\u8bba\u5206\u5757 \u7ebf\u6027\u7b5b","title":"\u524d\u7f6e\u829d\u58eb"},{"location":"math/mobius/#_2","text":"\u5982\u679c\u51fd\u6570 f f \u6ee1\u8db3 \\forall \\gcd(i,j) = 1, f(i\\times j) = f(i)\\times f(j) \\forall \\gcd(i,j) = 1, f(i\\times j) = f(i)\\times f(j) ,\u90a3\u4e48 f f \u4e3a\u79ef\u6027\u51fd\u6570\u3002 \u79ef\u6027\u51fd\u6570\u8fd8\u53ef\u4ee5\u5206\u51fa\u4e00\u7c7b\u5b8c\u5168\u79ef\u6027\u51fd\u6570\u3002\u5373\u6ee1\u8db3 \\forall i,j, f(i\\times j)=f(i)\\times f(j) \\forall i,j, f(i\\times j)=f(i)\\times f(j) \u3002 \u5e38\u89c1\u7684\u79ef\u6027\u51fd\u6570\u6709 \\qquad \\begin{array} \\text{\u7ea6\u6570\u4e2a\u6570\u51fd\u6570}&d(n)=\\displaystyle\\sum_{d\\mid n}1 \\\\ \\text{\u7ea6\u6570\u548c\u51fd\u6570}&\\displaystyle\\sigma(n)=\\sum_{d\\mid n}d \\\\ \\text{\u7ea6\u6570 $k$ \u6b21\u5e42\u51fd\u6570}&\\displaystyle\\sigma_k(n)=\\sum_{d\\mid n}d^k \\\\ \\text{\u6b27\u62c9\u51fd\u6570}&\\displaystyle\\varphi(n)=\\sum_{i=1}^n [\\gcd(i,n)=1] \\\\ \\text{\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570}&\\displaystyle\\mu(n)\\text{\u4e0b\u9762\u4f1a\u4ecb\u7ecd} \\\\ \\end{array} \\qquad \\begin{array} \\text{\u7ea6\u6570\u4e2a\u6570\u51fd\u6570}&d(n)=\\displaystyle\\sum_{d\\mid n}1 \\\\ \\text{\u7ea6\u6570\u548c\u51fd\u6570}&\\displaystyle\\sigma(n)=\\sum_{d\\mid n}d \\\\ \\text{\u7ea6\u6570 $k$ \u6b21\u5e42\u51fd\u6570}&\\displaystyle\\sigma_k(n)=\\sum_{d\\mid n}d^k \\\\ \\text{\u6b27\u62c9\u51fd\u6570}&\\displaystyle\\varphi(n)=\\sum_{i=1}^n [\\gcd(i,n)=1] \\\\ \\text{\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570}&\\displaystyle\\mu(n)\\text{\u4e0b\u9762\u4f1a\u4ecb\u7ecd} \\\\ \\end{array} P.S.[\\text{\u903b\u8f91\u8868\u8fbe\u5f0f}]\\text{\u8868\u793a\u5f53\u903b\u8f91\u8868\u8fbe\u5f0f\u4e3a\u771f,\u503c\u4e3a1,\u5426\u5219\u4e3a0} P.S.[\\text{\u903b\u8f91\u8868\u8fbe\u5f0f}]\\text{\u8868\u793a\u5f53\u903b\u8f91\u8868\u8fbe\u5f0f\u4e3a\u771f,\u503c\u4e3a1,\u5426\u5219\u4e3a0} \u5e38\u89c1\u5b8c\u5168\u79ef\u6027\u51fd\u6570\u6709 \\qquad \\begin{array} \\text{1\u51fd\u6570}&1(n)=1 \\\\ \\text{ID\u51fd\u6570}&ID(n)=n \\\\ \\epsilon\\text{\u51fd\u6570}&\\epsilon(n)=[n=1] \\\\ \\end{array} \\qquad \\begin{array} \\text{1\u51fd\u6570}&1(n)=1 \\\\ \\text{ID\u51fd\u6570}&ID(n)=n \\\\ \\epsilon\\text{\u51fd\u6570}&\\epsilon(n)=[n=1] \\\\ \\end{array} \u82e5 f f \u548c g g \u5747\u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u5219\u4ee5\u4e0b\u51fd\u6570\u4e5f\u4e3a\u79ef\u6027\u51fd\u6570\uff1a \\begin{aligned} h(x)&=f(x^p)\\\\ h(x)&=f^p(x)\\\\ h(x)&=f(x)g(x)\\\\ h(x)&=\\sum_{d\\mid x}f(d)g(\\frac{x}{d}) \\end{aligned} \\begin{aligned} h(x)&=f(x^p)\\\\ h(x)&=f^p(x)\\\\ h(x)&=f(x)g(x)\\\\ h(x)&=\\sum_{d\\mid x}f(d)g(\\frac{x}{d}) \\end{aligned} \u79ef\u6027\u51fd\u6570\u4e00\u822c\u90fd\u53ef\u4ee5\u7528\u7ebf\u6027\u7b5b\u7b5b\u51fa\u3002(\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355,\u8bf7\u81ea\u884c\u67e5\u627e\u8d44\u6599)","title":"\u79ef\u6027\u51fd\u6570"},{"location":"math/mobius/#_3","text":"\\mu(n)= \\begin{cases} 1 & n=1\\\\ (-1)^k & c_{1,2,\\cdots,k}=1\\quad(n=\\displaystyle\\prod_{i=1}^k {p_i}^{c_i})\\\\ 0 & c_i>1 \\end{cases} \\mu(n)= \\begin{cases} 1 & n=1\\\\ (-1)^k & c_{1,2,\\cdots,k}=1\\quad(n=\\displaystyle\\prod_{i=1}^k {p_i}^{c_i})\\\\ 0 & c_i>1 \\end{cases} \u7b80\u5355\u5730\u8bf4,\u5c31\u662f\u5f53 n n \u4e3a1,\u51fd\u6570\u503c\u4e3a1;\u5f53 n>1 n>1 ,\u82e5 n n \u4e3a\u67d0\u6570\u7684\u5e73\u65b9\u7684\u500d\u6570,\u51fd\u6570\u503c\u4e3a0;\u5426\u5219\u8bbe k k \u4e3a n n \u7684\u8d28\u56e0\u6570\u4e2a\u6570,\u51fd\u6570\u503c\u4e3a (-1)^k (-1)^k","title":"\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570"},{"location":"math/mobius/#dirichlet","text":"Dirichlet\u5377\u79ef(\u72c4\u5229\u514b\u96f7\u5377\u79ef)\u53ef\u4ee5\u770b\u6210\u51fd\u6570\u4e4b\u95f4\u7684\u4e00\u79cd\u8fd0\u7b97\u3002\u5bf9\u4e8e\u4e24\u4e2a\u6570\u8bba\u51fd\u6570(\u5373\u5b9a\u4e49\u57df\u4e3a\u6b63\u6574\u6570\u7684\u51fd\u6570) f f , g g ,\u5b83\u4eec\u7684Dirichlet\u5377\u79ef\u4e3a $$ (f * g)(n) = \\sum_{d|n}f(d) \\times g(\\frac nd) $$ \\varepsilon \\varepsilon \u4e3aDirichlet\u5377\u79ef\u7684\u5355\u4f4d\u5143,\u5373 f * \\varepsilon = f f * \\varepsilon = f \u82e5 f f , g g \u4e3a\u79ef\u6027\u51fd\u6570, f * g f * g \u4e5f\u4e3a\u79ef\u6027\u51fd\u6570\u3002 \u8bc1\u660e: \\text{\u8bben,m,gcd(n,m)=1} \\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{i|n}f(i) \\times g(\\frac ni) \\times ( \\sum_{j|m}f(j) \\times g(\\frac mj) ) \\\\ \\text{\u53d8\u6362\u5faa\u73af\u987a\u5e8f} \\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{i|n}\\sum_{j|m}f(i) \\times g(\\frac ni) \\times f(j) \\times g(\\frac mj)\\\\ = \\sum_{i|n}\\sum_{j|m}f(ij) \\times g(\\frac {nm}{ij})\\\\ \\text{\u7531\u4e8en,m\u4e92\u8d28,i|n,j|m,\u5219nm\u7684\u6240\u6709\u56e0\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210ij,\u8bbek=ij}\\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{k|(nm)}f(k) \\times g(\\frac {nm}{k}) = (f * g)(nm) \\text{\u8bben,m,gcd(n,m)=1} \\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{i|n}f(i) \\times g(\\frac ni) \\times ( \\sum_{j|m}f(j) \\times g(\\frac mj) ) \\\\ \\text{\u53d8\u6362\u5faa\u73af\u987a\u5e8f} \\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{i|n}\\sum_{j|m}f(i) \\times g(\\frac ni) \\times f(j) \\times g(\\frac mj)\\\\ = \\sum_{i|n}\\sum_{j|m}f(ij) \\times g(\\frac {nm}{ij})\\\\ \\text{\u7531\u4e8en,m\u4e92\u8d28,i|n,j|m,\u5219nm\u7684\u6240\u6709\u56e0\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210ij,\u8bbek=ij}\\\\ (f * g)(n)\\times (f * g)(m) = \\sum_{k|(nm)}f(k) \\times g(\\frac {nm}{k}) = (f * g)(nm) Dirichlet\u5377\u79ef\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\u3002 \u524d\u8005\u5f88\u597d\u8bc1,\u8fd9\u91cc\u7701\u7565\u3002\u540e\u8005\u5168\u90e8\u5c55\u5f00\u5c31\u597d\u4e86,\u8fd9\u91cc\u7701\u7565\u3002 \u5e38\u89c1\u7684Dirichlet\u5377\u79ef: \\epsilon=\\mu * 1 \\\\ d=1 * 1 \\\\ \\varphi=\\mu * ID \\\\ \\epsilon=\\mu * 1 \\\\ d=1 * 1 \\\\ \\varphi=\\mu * ID \\\\ \u6211\u4eec\u5148\u8bc1\u660e\u7b2c\u4e00\u4e2a,\u7b2c\u4e09\u4e2a(\u7b2c\u4e8c\u4e2a\u8fd9\u4e48\u7b80\u5355\u5c31\u7b97\u4e86)\u4e5f\u7ed9\u51fa\u6765,\u4f46\u662f\u5efa\u8bae\u5148\u770b\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u3002 \u8bc1\u660e \\epsilon=\\mu * 1 \\epsilon=\\mu * 1 : \\epsilon(n)=\\sum_{d|n}\\mu(d) \\epsilon(n)=\\sum_{d|n}\\mu(d) \u6839\u636e\u552f\u4e00\u5206\u89e3\u5b9a\u7406,\u6211\u4eec\u53ef\u4ee5\u7528 n n \u7684\u8d28\u56e0\u6570( p_1,p_2,p_3... p_1,p_2,p_3... )\u6765\u7ec4\u6210 d d \u3002 \u5f88\u660e\u663e,\u6bcf\u4e2a p_i p_i \u53d6\u4e24\u4e2a\u6216\u4ee5\u4e0a\u5bf9\u7b54\u6848\u662f\u6ca1\u6709\u5f71\u54cd\u7684(\u6839\u636e\u5b9a\u4e49, \\mu \\mu \u51fd\u6570\u503c\u4e3a0)\u3002 \u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u5f0f\u5b50 \\text{\u8bben\u6709t\u4e2a\u8d28\u56e0\u6570} \\\\ \\epsilon(n)=\\sum_{i=0}^t (-1)^i \\times C_t^i \\text{\u8bben\u6709t\u4e2a\u8d28\u56e0\u6570} \\\\ \\epsilon(n)=\\sum_{i=0}^t (-1)^i \\times C_t^i \u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406,\u5982\u679ct\u4e3a1,\u503c\u4e3a1,\u5426\u5219\u4e3a0 \u9996\u5148, t=1 t=1 \u7684\u65f6\u5019\u5f88\u660e\u663e\u7ed3\u679c\u4e3a 1 1 \u56e0\u4e3a (x+y)^n=\\sum_{i=0}^n x^iy^{n-i}C_{n}^i (x+y)^n=\\sum_{i=0}^n x^iy^{n-i}C_{n}^i \u6240\u4ee5 (1 + (-1))^t=\\sum_{i=0}^t 1^{t-i}\\times(-1)^{i}\\times C_t^i=\\sum_{i=0}^t (-1)^i\\times C_t^i (1 + (-1))^t=\\sum_{i=0}^t 1^{t-i}\\times(-1)^{i}\\times C_t^i=\\sum_{i=0}^t (-1)^i\\times C_t^i \u53ef\u4ee5\u5f97\u51fa \\sum_{d|n}\\mu(d) = [t = 1] \\sum_{d|n}\\mu(d) = [t = 1] \u63a5\u4e0b\u6765\u7684\u8bc1\u660e\u8bf7\u5148\u5b66\u4e60\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u3002 \u8bc1\u660e \\varphi=\\mu * ID \\varphi=\\mu * ID : \u53ef\u4ee5\u5229\u7528\u6b27\u62c9\u51fd\u6570\u7684\u5b9a\u4e49+\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u6765\u8bc1\u3002 \u6211\u4eec\u5148\u5728\u7b49\u5f0f\u4e24\u8fb9\u540c\u65f6\u53771 $$ \\varphi * 1 = 1 * \\mu * ID \\ \\varphi * 1 = \\varepsilon * ID \\ \\varphi * 1 = ID \\ (\\varphi * 1)(n) = \\sum_{d|n}\\varphi(d) = \\sum_{d|n}\\varphi(n / d) $$ \u53ef\u4ee5\u8ba4\u4e3a\u4e0a\u9762\u67ff\u5b50\u4e2d \\varphi(n / d) \\varphi(n / d) \u8868\u793a \\sum_i=1^n[gcd(n,i)=d] \\sum_i=1^n[gcd(n,i)=d] ,\u5f88\u660e\u663e,\u6bcf\u4e2a\u6570\u4e0e n n \u7684\u516c\u7ea6\u6570\u4e0d\u53d8,\u5bf9\u7b54\u6848\u6709\u4e14\u4ec5\u6709 1 1 \u7684\u8d21\u732e,\u6700\u7ec8\u7684\u503c\u5373\u4e3a n n","title":"Dirichlet\u5377\u79ef"},{"location":"math/mobius/#_4","text":"\u603b\u7b97\u5199\u5230\u8fd9\u91cc\u4e86(\u63a9\u9762\u75db\u54ed \u5bf9\u4e8e\u4e24\u4e2a\u6570\u8bba\u51fd\u6570 f f , g g f = g * 1 \\Leftrightarrow f * \\mu = g f = g * 1 \\Leftrightarrow f * \\mu = g \u76f4\u63a5\u7528Dirichlet\u5377\u79ef\u5373\u53ef\u3002 f = g * 1 \\\\ \\text{\u4e24\u8fb9\u540c\u65f6\u5377} \\mu \\\\ f * \\mu = g * 1 * \\mu \\\\ f * \\mu = g * \\varepsilon \\\\ f * \\mu = g f = g * 1 \\\\ \\text{\u4e24\u8fb9\u540c\u65f6\u5377} \\mu \\\\ f * \\mu = g * 1 * \\mu \\\\ f * \\mu = g * \\varepsilon \\\\ f * \\mu = g","title":"\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14"},{"location":"math/mobius/#_5","text":"","title":"\u4f8b\u9898"},{"location":"math/mobius/#p2522-haoi2011problem-b","text":"\u6211\u4eec\u53ef\u4ee5\u6c42 x \\le n,y \\le m x \\le n,y \\le m ,\u5dee\u5206\u5904\u7406\u5373\u53ef\u3002 \u6211\u4eec\u8ba4\u4e3an < m,\u5426\u5219\u4ea4\u6362\u5373\u53ef\u3002\u4ee5\u4e0b/\u5747\u8868\u793a\u6574\u9664 Ans = \\sum_{i=1}^n\\sum_{j=1}^m[gcd(i, j) = k] \\\\ Ans = \\sum_{i=1}^{n/k}\\sum_{j=1}^{m/k}[gcd(i,j)=1] \\\\ \\text{\u8bben/k=a,m/k=b} \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\varepsilon(gcd(i,j)) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}(\\mu * 1)(gcd(i,j)) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\sum_{d|gcd(i,j)}\\mu(d) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\sum_{d|i,d|j}\\mu(d) \\\\ Ans = \\sum_{d=1}^{a}\\sum_{i=1}^{a/d}\\sum_{j=1}^{b/d}\\mu(d) \\\\ Ans = \\sum_{d=1}^{a}\\mu(d) \\times (a/d) \\times (b/d) Ans = \\sum_{i=1}^n\\sum_{j=1}^m[gcd(i, j) = k] \\\\ Ans = \\sum_{i=1}^{n/k}\\sum_{j=1}^{m/k}[gcd(i,j)=1] \\\\ \\text{\u8bben/k=a,m/k=b} \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\varepsilon(gcd(i,j)) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}(\\mu * 1)(gcd(i,j)) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\sum_{d|gcd(i,j)}\\mu(d) \\\\ Ans = \\sum_{i=1}^{a}\\sum_{j=1}^{b}\\sum_{d|i,d|j}\\mu(d) \\\\ Ans = \\sum_{d=1}^{a}\\sum_{i=1}^{a/d}\\sum_{j=1}^{b/d}\\mu(d) \\\\ Ans = \\sum_{d=1}^{a}\\mu(d) \\times (a/d) \\times (b/d) \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7b5b\u51fa \\mu \\mu -> \u524d\u7f00\u548c -> \u6570\u8bba\u5206\u5757\u5566 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <bits/stdc++.h> using namespace std ; #define MAXN 50000 int T , a , b , c , d , k ; int mu [ MAXN + 5 ], p [ MAXN + 5 ], tot ; bool vis [ MAXN + 5 ]; int Work ( int N , int M ){ int ans ( 0 ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans += ( N / i ) * ( M / i ) * ( mu [ j ] - mu [ i - 1 ] ); } return ans ; } int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ if ( ! vis [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && p [ j ] * i <= MAXN ; ++ j ){ vis [ p [ j ] * i ] = 1 ; if ( i % p [ j ] ) mu [ p [ j ] * i ] = - mu [ i ]; else { mu [ p [ j ] * i ] = 0 ; break ; } } } for ( int i = 1 ; i <= MAXN ; ++ i ) mu [ i ] += mu [ i - 1 ]; while ( T -- ){ scanf ( \"%d%d%d%d%d\" , & a , & b , & c , & d , & k ); -- a ; -- c ; a /= k ; b /= k ; c /= k ; d /= k ; printf ( \"%d \\n \" , Work ( b , d ) - Work ( a , d ) - Work ( c , b ) + Work ( a , c ) ); } return 0 ; }","title":"\u6d1b\u8c37 P2522 [HAOI2011]Problem b"},{"location":"math/mobius/#p2257-yygcd","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <bits/stdc++.h> using namespace std ; #define LL long long #define MAXN 10000000 int T , N , M ; int p [ MAXN / 10 + 5 ], mu [ MAXN ], s [ MAXN ], tot ; bool v [ MAXN + 5 ]; int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= MAXN ; ++ j ){ v [ i * p [ j ]] = 1 ; if ( i % p [ j ] ) mu [ i * p [ j ]] = - mu [ i ]; else break ; } } for ( int i = 1 ; i <= tot ; ++ i ) for ( int j = p [ i ]; j <= MAXN ; j += p [ i ] ) s [ j ] += mu [ j / p [ i ]]; for ( int i = 1 ; i <= MAXN ; ++ i ) s [ i ] += s [ i - 1 ]; while ( T -- ){ LL ans ( 0 ); scanf ( \"%d%d\" , & N , & M ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans += ( LL )( N / i ) * ( LL )( M / i ) * ( LL )( s [ j ] - s [ i - 1 ] ); } printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"\u6d1b\u8c37 P2257 YY\u7684GCD"},{"location":"math/mobius/#p3312-sdoi2014","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <bits/stdc++.h> using namespace std ; #define MAXN 100005 #define n 100000 #define LL long long #define pi pair<LL, int> struct query { int N , M , a , id ; } q [ 20005 ]; bool cmp ( query x , query y ){ return x . a < y . a ; } int Q , mu [ MAXN ], p [ MAXN ], tot ; pi f [ MAXN ]; int ans [ 20005 ], c [ MAXN ]; bool vis [ MAXN ]; inline void Add ( int x , int y ){ for ( ; x <= n ; x += x & - x ) c [ x ] += y ; } inline int Get ( int x ){ int ans ( 0 ); for ( ; x ; x -= x & - x ) ans += c [ x ]; return ans ; } int main (){ scanf ( \"%d\" , & Q ); mu [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ){ if ( ! vis [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= n ; ++ j ){ vis [ i * p [ j ]] = 1 ; if ( i % p [ j ] ) mu [ i * p [ j ]] = - mu [ i ]; else break ; } } for ( int i = 1 ; i <= n ; ++ i ){ f [ i ]. second = i ; for ( int j = i ; j <= n ; j += i ) f [ j ]. first += i ; } sort ( f + 1 , f + n + 1 ); for ( int i = 1 ; i <= Q ; ++ i ) scanf ( \"%d%d%d\" , & q [ i ]. N , & q [ i ]. M , & q [ i ]. a ), q [ i ]. id = i ; sort ( q + 1 , q + Q + 1 , cmp ); for ( int T = 1 , cur = 1 ; T <= Q ; ++ T ){ while ( f [ cur ]. first <= q [ T ]. a ){ int x ( f [ cur ]. second ); for ( int i = x ; i <= n ; i += x ) Add ( i , f [ cur ]. first * mu [ i / x ] ); ++ cur ; } if ( q [ T ]. N > q [ T ]. M ) swap ( q [ T ]. N , q [ T ]. M ); for ( int i = 1 , j ; i <= q [ T ]. N ; i = j + 1 ){ j = min ( q [ T ]. N / ( q [ T ]. N / i ), q [ T ]. M / ( q [ T ]. M / i ) ); ans [ q [ T ]. id ] += ( q [ T ]. N / i ) * ( q [ T ]. M / i ) * ( Get ( j ) - Get ( i - 1 ) ); } if ( ans [ q [ T ]. id ] < 0 ) ans [ q [ T ]. id ] = ans [ q [ T ]. id ] + ( 1 << 30 ) + ( 1 << 30 ); } for ( int i = 1 ; i <= Q ; ++ i ) printf ( \"%d \\n \" , ans [ i ] ); return 0 ; }","title":"\u6d1b\u8c37 P3312 [SDOI2014]\u6570\u8868"},{"location":"math/mobius/#p3327-sdoi2015","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <bits/stdc++.h> using namespace std ; #define MAXN 50000 #define LL long long int T , N , M ; LL ans ; int p [ MAXN + 5 ], tot , mu [ MAXN + 5 ], num [ MAXN + 5 ]; LL d [ MAXN + 5 ]; bool v [ MAXN + 5 ]; int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = 1 ; d [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 , d [ i ] = 2 , num [ i ] = 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= MAXN ; ++ j ){ v [ i * p [ j ]] = 1 ; if ( i % p [ j ] ){ mu [ i * p [ j ]] = - mu [ i ]; num [ i * p [ j ]] = 1 ; d [ i * p [ j ]] = d [ i ] << 1 ; } else { mu [ i * p [ j ]] = 0 ; num [ i * p [ j ]] = num [ i ] + 1 ; d [ i * p [ j ]] = d [ i ] / ( num [ i ] + 1 ) * ( num [ i ] + 2 ); break ; } } } for ( int i = 2 ; i <= MAXN ; ++ i ) mu [ i ] += mu [ i - 1 ], d [ i ] += d [ i - 1 ]; while ( T -- ){ ans = 0 ; scanf ( \"%d%d\" , & N , & M ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ) j = min ( N / ( N / i ), M / ( M / i ) ), ans += ( mu [ j ] - mu [ i - 1 ] ) * d [ N / i ] * d [ M / i ]; printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"\u6d1b\u8c37 P3327 [SDOI2015]\u7ea6\u6570\u4e2a\u6570\u548c"},{"location":"math/mobius/#p3455-poi2007zap-queries","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <bits/stdc++.h> using namespace std ; #define MAXN 50000 int T ; int mu [ MAXN + 5 ], p [ MAXN + 5 ], tot ; bool v [ MAXN + 5 ]; int Work ( int N , int M ){ int ans ( 0 ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans += ( N / i ) * ( M / i ) * ( mu [ j ] - mu [ i - 1 ] ); } return ans ; } int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= MAXN ; ++ j ){ v [ i * p [ j ]] = 1 ; mu [ i * p [ j ]] = i % p [ j ] ? - mu [ i ] : 0 ; if ( i % p [ j ] == 0 ) break ; } } for ( int i = 1 ; i <= MAXN ; ++ i ) mu [ i ] += mu [ i - 1 ]; while ( T -- ){ int a , b , d ; scanf ( \"%d%d%d\" , & a , & b , & d ); a /= d ; b /= d ; printf ( \"%d \\n \" , Work ( a , b ) ); } return 0 ; }","title":"\u6d1b\u8c37 P3455 [POI2007]ZAP-Queries"},{"location":"math/mobius/#p3704-sdoi2017","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <bits/stdc++.h> using namespace std ; #define MAXN 1000000 #define LL long long #define mod 1000000007 int T , N , M ; int p [ MAXN + 5 ], mu [ MAXN + 5 ], tot ; bool v [ MAXN + 5 ]; LL f [ MAXN + 5 ], g [ MAXN + 5 ], s [ MAXN + 5 ]; inline LL Work ( int N , int M ){ LL ans ( 0 ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans = ( ans + ( mu [ j ] - mu [ i - 1 ] ) * ( N / i ) % mod * ( M / i ) % mod ) % mod ; } return ( ans % mod + mod ) % mod ; } inline LL Pow ( LL x , LL y ){ LL ans ( 1 ); for ( x %= mod ; y ; y >>= 1 , x = x * x % mod ) if ( y & 1 ) ans = ans * x % mod ; return ans ;} #define inv(x) (Pow( (x), mod - 2 )) int main (){ scanf ( \"%d\" , & T ); mu [ 1 ] = s [ 0 ] = s [ 1 ] = f [ 1 ] = g [ 1 ] = 1 ; for ( int i = 2 ; i <= MAXN ; ++ i ){ f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % mod , s [ i ] = 1 , g [ i ] = Pow ( f [ i ], mod - 2 ); if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= MAXN ; ++ j ){ v [ i * p [ j ]] = 1 ; mu [ i * p [ j ]] = i % p [ j ] ? - mu [ i ] : 0 ; if ( i % p [ j ] == 0 ) break ; } } for ( int i = 1 ; i <= MAXN ; ++ i ) if ( mu [ i ] ) for ( int j = i ; j <= MAXN ; j += i ) s [ j ] = s [ j ] * ( mu [ i ] == 1 ? f [ j / i ] : g [ j / i ] ) % mod ; for ( int i = 2 ; i <= MAXN ; ++ i ) s [ i ] = s [ i ] * s [ i - 1 ] % mod ; while ( T -- ){ LL ans ( 1 ); scanf ( \"%d%d\" , & N , & M ); if ( N > M ) swap ( N , M ); for ( int i = 1 , j ; i <= N ; i = j + 1 ){ j = min ( N / ( N / i ), M / ( M / i ) ); ans = ( ans * Pow ( s [ j ] * inv ( s [ i - 1 ]) % mod , ( LL )( N / i ) * ( M / i ) ) ) % mod ; } printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"\u6d1b\u8c37 P3704 [SDOI2017]\u6570\u5b57\u8868\u683c"},{"location":"math/mobius/#p4450","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; #define MAXN 1000050 #define LL long long int A , B , d ; int mu [ MAXN ], p [ MAXN ], tot ; char v [ MAXN ]; int main (){ scanf ( \"%d%d%d\" , & A , & B , & d ), A /= d , B /= d , mu [ 1 ] = 1 , A > B ? swap ( A , B ), 0 : 0 ; for ( int i = 2 ; i <= A ; ++ i ){ if ( ! v [ i ] ) p [ ++ tot ] = i , mu [ i ] = - 1 ; for ( int j = 1 ; j <= tot && i * p [ j ] <= A ; ++ j ){ v [ i * p [ j ]] = 1 ; mu [ i * p [ j ]] = i % p [ j ] ? - mu [ i ] : 0 ; if ( i % p [ j ] == 0 ) break ; } } for ( int i = 1 ; i <= A ; ++ i ) mu [ i ] += mu [ i - 1 ]; LL ans ( 0 ); for ( int i = 1 , j ; i <= A ; i = j + 1 ) j = min ( A / ( A / i ), B / ( B / i ) ), ans += ( LL )( A / i ) * ( B / i ) * ( mu [ j ] - mu [ i - 1 ] ); printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"\u6d1b\u8c37 P4450 \u53cc\u4eb2\u6570"},{"location":"math/pythagorean-triple/","text":"\u52fe\u80a1\u6570\u7ec4 \u00b6 \u5199\u5728\u524d\u9762 \u00b6 \u6211\u4eec\u5927\u6982\u8001\u65e9\u5c31\u77e5\u9053\u52fe\u80a1\u5b9a\u7406\uff0c\u5b83\u5927\u6982\u5c31\u957f\u8fd9\u6837\uff1a a^2+b^2=c^2 a^2+b^2=c^2 \u55ef\uff0c\u7684\u786e\u591f\u7b80\u5355\u7684\u3002 \u800c\u4e14\u6211\u4eec\u6e05\u695a\u5730\u77e5\u9053\u5b83\u7684\u4e00\u4e2a\u57fa\u672c\u5e94\u7528\u2014\u2014\u77e5\u9053 Rt\\Delta Rt\\Delta \u7684\u4e24\u8fb9\u957f\uff0c\u6c42\u7b2c\u4e09\u8fb9\u3002\u8fd9\u5927\u6982\u521d\u4e00\u5c31\u5b66\u4e86\u3002 \u5bf9\u4e8e\u4e0d\u77e5\u9053\u52fe\u80a1\u5b9a\u7406\u7684\u7ae5\u978b\u4eec\uff0c\u4e0d\u4e86\u89e3\u6ca1\u5173\u7cfb\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6ca1\u6709\u4e09\u89d2\u5f62\uff0c\u4e5f\u4e0d\u662f\u63a2\u8ba8\u600e\u4e48\u6c42\u7b2c\u4e09\u8fb9\uff0c\u6211\u4eec\u53ea\u63a2\u8ba8\u52fe\u80a1\u6570\u7ec4\u3002 \u8fd9\u91cc\u7684 a \\equiv b(mod\\ c) a \\equiv b(mod\\ c) \u5176\u5b9e\u5c31\u662f a\\%c=b\\%c a\\%c=b\\%c \uff0ca|b\u5176\u5b9e\u5c31\u662f b\\%a=0 b\\%a=0 \uff0c\u5e0c\u671b\u5c0f\u767d\u4eec\u4e0d\u8981\u770b\u4e0d\u61c2\u3002 \u5982\u679c\u771f\u7684\u770b\u4e0d\u61c2\uff0c\u53ef\u4ee5\u5148\u5b66\u4e60\u540c\u4f59\u3001\u7ea6\u6570\u3001\u7d20\u6570\u7684\u77e5\u8bc6\u3002 \u52fe\u80a1\u6570\u7ec4 \u00b6 \u4ec0\u4e48\u4e8b\u90fd\u5f97\u4ece\u5b9a\u4e49\u5f00\u59cb\u3002\u6765\u770b\u770b\u767e\u5ea6\u767e\u79d1\u6559\u4f1a\u6211\u4eec\u4ec0\u4e48\u3002 \u5b9a\u4e49\u2014\u2014\u52fe\u80a1\u6570\u7ec4 \u00b6 \u4e00\u822c\u5730\uff0c\u82e5\u4e09\u89d2\u5f62\u4e09\u8fb9\u957fa\uff0cb\uff0cc\u90fd\u662f\u6b63\u6574\u6570\uff0c\u4e14\u6ee1\u8db3a\uff0cb\u7684 \u5e73\u65b9\u548c \u7b49\u4e8ec\u7684\u5e73\u65b9\uff0c\u90a3\u4e48\u6570\u7ec4\uff08a\uff0cb\uff0cc\uff09\u79f0\u4e3a\u52fe\u80a1\u6570\u7ec4\u3002\u52fe\u80a1\u6570\u7ec4\u662f\u4eba\u4eec\u4e3a\u4e86\u89e3\u51fa\u6ee1\u8db3 \u52fe\u80a1\u5b9a\u7406 \u7684 \u4e0d\u5b9a\u65b9\u7a0b \u7684\u6240\u6709\u6574\u6570\u89e3\u800c\u521b\u9020\u7684\u6982\u5ff5\u3002 \u55ef\uff0c\u591f\u7b80\u5355\u7684\u3002\u4e0d\u8fc7\u6709\u4e9b\u4eba\u603b\u662f\u559c\u6b22\u628a\u5b83\u5f04\u5f97\u9ad8\u5927\u5c1a\u4e9b\uff0c\u628a\u5b83\u53eb\u505a\u201c\u6bd5\u8fbe\u54e5\u62c9\u65af\u4e09\u5143\u7ec4\u201d\uff0c\u5176\u5b9e\u662f\u4e00\u4e2a\u73a9\u610f\u513f\uff0c\u53ea\u662f\u540e\u8005\u542c\u8d77\u6765\u66f4\u52a0\u725b\u3002\u8fd9\u4e0d\u5fc5\u6df1\u7a76\uff0c\u77e5\u9053\u5b83\u5c31\u662f\u52fe\u80a1\u6570\u7ec4\u5373\u53ef\u3002\u800c\u52fe\u80a1\u6570\u7ec4\u4e5f\u5c31\u662f\u628a\u4e09\u4e2a\u6570a,b,c( a^2+b^2=c^2 a^2+b^2=c^2 )\u7528\u5c0f\u62ec\u53f7\u62ec\u8d77\u6765\u800c\u5df2\u3002\u5f88\u7b80\u5355\u5427\uff1f\u6211\u4eec\u4e3e\u51e0\u4e2a\u6817\u5b50\u2014\u2014 a b c 3 4 5 5 12 13 6 8 10 7 24 25 \u8bf6\uff0c(3,4,5)\u3001(6,8,10)\u770b\u7740\u597d\u50cf\uff01emmm \u5b9e\u9645\u4e0a\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u662f\u52fe\u4e09\u80a1\u56db\u5f26\u4e94 \u8fd9\u6837\u5c31\u4e0d\u597d\u73a9\u4e86\u561b\uff09\u5f88\u660e\u663e\uff0c\u5982\u679c\u4e00\u4e2a\u52fe\u80a1\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u540c\u4e58\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5f97\u5230\u7684\u4e09\u5143\u7ec4\u8fd8\u662f\u4e00\u4e2a\u52fe\u80a1\u6570\u7ec4\u3002It's very easy.\u8fd9\u91cc\u7701\u7565\u8bc1\u660e\u8fc7\u7a0b\u3002 \u6240\u4ee5\u8bf4\uff0c\u52fe\u80a1\u6570\u7ec4\u6709\u65e0\u7a77\u4e2a\u3002\u8fd9\u5c31\u4e0d\u597d\u73a9\u4e86\u561b\uff0c\u53ea\u8981\u77e5\u9053\u4e00\u7ec4\u52fe\u80a1\u6570\u7ec4\uff0c\u5c31\u53ef\u4ee5\u63a8\u51fainf\u4e2a\u52fe\u80a1\u6570\u7ec4\u3002\u3002\u3002 \u6700\u6709\u610f\u4e49\u7684\u52fe\u80a1\u6570\u7ec4\uff0c\u5c31\u662f\u5176\u4ed6\u52fe\u80a1\u6570\u7ec4 \\times d(d > 1)) \\times d(d > 1)) \u4e0d\u80fd\u5f97\u5230\u7684\u52fe\u80a1\u6570\u7ec4\u3002\u53ea\u8981\u627e\u5230\u5b83\u4eec\uff0c\u5176\u4ed6\u7684\u52fe\u80a1\u6570\u7ec4\u90fd\u53ef\u4ee5\u7531\u5b83\u4eec\u4e58\u67d0\u4e2a\u6570\u8868\u793a\u51fa\u6765\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5f15\u5165\u672c\u539f\u52fe\u80a1\u6570\u7ec4\u7684\u6982\u5ff5\u3002\u4e0d\u8fc7\u5f88\u9057\u61be\uff0c\u767e\u5ea6\u767e\u79d1\u8bcd\u6761\u91cc\u6ca1\u6709\u3002 \u5b9a\u4e49\u2014\u2014\u672c\u539f\u52fe\u80a1\u6570\u7ec4 \u00b6 \u672c\u539f\u52fe\u80a1\u6570\u7ec4 (\u7b80\u5199\u4e3aPPT)\u662f\u4e00\u4e2a\u4e09\u5143\u7ec4(a,b,c)\uff0c\u5176\u4e2da,b,c\u6ca1\u6709\u516c\u56e0\u6570\uff0c\u4e14\u6ee1\u8db3 a^2+b^2=c^2 a^2+b^2=c^2 \u2014\u2014\u6458\u81eaJoseph H. Silverman\u300aA Friendly Introduction To Number Theory\u300b \\small \\text{\u63d2\u53e5\u5c0f\u5e7f\u544a\uff0c\u8fd9\u672c\u4e66\u5bf9\u4e8e\u5b66\u4e60\u6570\u8bba\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\uff0c\u4e2d\u6587\u8bd1\u540d\u4e3a\u300a\u6570\u8bba\u6982\u8bba\u300b\u3002} \\small \\text{\u63d2\u53e5\u5c0f\u5e7f\u544a\uff0c\u8fd9\u672c\u4e66\u5bf9\u4e8e\u5b66\u4e60\u6570\u8bba\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\uff0c\u4e2d\u6587\u8bd1\u540d\u4e3a\u300a\u6570\u8bba\u6982\u8bba\u300b\u3002} \u7ed9\u51fa\u4e00\u4e9b\u672c\u539f\u52fe\u80a1\u6570\u7ec4\u3002 (3,4,5)(5,12,13)(8,15,17)(7,24,25)...... \u5b83\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u6027\u8d28\u3002\u5982\u679c\u4f60\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u524d\u4e24\u4e2a\u6570\u4f3c\u4e4e\u603b\u662f\u4e00\u5947\u4e00\u5076\u3002\u3002\u3002 \u8fd9\u4e2a\u547d\u9898\u662f\u6b63\u786e\u7684\uff0c\u6765\u770b\u770b\u5982\u4f55\u8bc1\u660e\u3002 \u5f53a\u3001b\u5747\u4e3a\u5076\u6570\u65f6\uff0cc\u5fc5\u7136\u4e3a\u5076\u6570\uff0c\u5b83\u663e\u7136\u4e0d\u662f\u4e00\u4e2a\u672c\u539f\u52fe\u80a1\u6570\u7ec4\uff0ca\u3001b\u3001c\u6709\u516c\u56e0\u65702\u3002 \u5f53a\u3001b\u5747\u4e3a\u5947\u6570\u65f6\uff0cc\u5fc5\u7136\u4e3a\u5076\u6570\uff0c\u8bbe a=2x+1,b=2y+1,c=2z a=2x+1,b=2y+1,c=2z \u3002 \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7 \\frac{a^2+b^2}2 \\frac{a^2+b^2}2 \u3001 \\frac{c^2}2 \\frac{c^2}2 \u5947\u5076\u6027\u5f97\u51fa\u8fd9\u4e5f\u4e0d\u6210\u7acb\u3002\u8bf7\u8bfb\u8005\u81ea\u884c\u5b8c\u6210\u8bc1\u660e\u3002 \u5982\u4f55\u627e\u672c\u539f\u52fe\u80a1\u6570\u7ec4 \u00b6 \u53ea\u8981\u627e\u51fa\u672c\u539f\u52fe\u80a1\u6570\u7ec4\uff0c\u5176\u5b83\u52fe\u80a1\u6570\u7ec4\u90fd\u53ef\u4ee5\u6c42\u51fa\u3002\u5982\u4f55\u627e\u5462\uff1f \u4e3a\u4e86\u4fbf\u4e8e\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u5199\u7684\u8be6\u7ec6\u4e9b\uff09 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u8ba4\u4e3a\u672c\u539f\u52fe\u80a1\u6570\u7ec4(a,b,c)\u4e2d\uff0ca\u4e3a\u5947\u6570\uff0cb\u4e3a\u5076\u6570\uff0cc\u4e3a\u5947\u6570\u3002 a^2+b^2=c^2 a^2+b^2=c^2 a^2=c^2-b^2=(c+b)(c-b) a^2=c^2-b^2=(c+b)(c-b) \u6211\u4eec\u4ece\u8fd9\u65b9\u9762\u8003\u8651\u3002(c+b)\u4e0e(c-b)\u4e0d\u5e94\u8be5\u5b58\u5728>1\u7684\u516c\u7ea6\u6570\u3002 \u8bc1\u660e\uff1a \\text{\u8bbe}d|(c+b)\\text{\u4e14}d|(c-b) \\\\ \\text{\u5219}d|(c+b+c-b),d|(2c)\\\\ d|(c+b-c+b),d|(2b)\\\\ d^2|a^2\\text{\u5373}d|a\\\\ \\because c\\%2=1,b\\%2=0\\\\ \\therefore (b+c)\\%2=1\\\\ \\therefore d\\text{\u4e0d\u53ef\u80fd\u4e3a\u5076\u6570\uff0c\u5426\u5219}d|(c+b)\\text{\u4e0d\u6210\u7acb}\\\\ \\therefore d|b,d|c\\\\ \\because (a,b,c)\\text{\u662f\u672c\u539f\u52fe\u80a1\u6570\u7ec4}\\\\ \\therefore gcd(a,b,c)=1\\\\ \\therefore d=1 \\text{\u8bbe}d|(c+b)\\text{\u4e14}d|(c-b) \\\\ \\text{\u5219}d|(c+b+c-b),d|(2c)\\\\ d|(c+b-c+b),d|(2b)\\\\ d^2|a^2\\text{\u5373}d|a\\\\ \\because c\\%2=1,b\\%2=0\\\\ \\therefore (b+c)\\%2=1\\\\ \\therefore d\\text{\u4e0d\u53ef\u80fd\u4e3a\u5076\u6570\uff0c\u5426\u5219}d|(c+b)\\text{\u4e0d\u6210\u7acb}\\\\ \\therefore d|b,d|c\\\\ \\because (a,b,c)\\text{\u662f\u672c\u539f\u52fe\u80a1\u6570\u7ec4}\\\\ \\therefore gcd(a,b,c)=1\\\\ \\therefore d=1 \u6211\u4eec\u77e5\u9053\uff0c\u4efb\u4f55\u4e00\u4e2a\u5927\u4e8e1\u7684\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210 \u56fa\u5b9a \u51e0\u4e2a\u7d20\u6570\u7684\u79ef\uff0c\u4e5f\u5c31\u662f\u957f\u8fd9\u6a21\u6837\u2014\u2014 a=p_1^{k1}\\times p_2^{k2}\\times p_3^{k3}\\times p_4^{k4}\\text{......} a=p_1^{k1}\\times p_2^{k2}\\times p_3^{k3}\\times p_4^{k4}\\text{......} a^2 a^2 \u65e2\u7136\u4e3a\u5e73\u65b9\u6570\uff0c\u90a3\u4e48\u5982\u679c\u628a a^2 a^2 \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u5bf9\u4e8e\u4efb\u610fki\uff0c\u90fd\u6709 ki \\equiv0(mod\\ 2) ki \\equiv0(mod\\ 2) \u3002 \u524d\u9762\u63d0\u8fc7\uff0cgcd((c+b),(c-b))=1\uff0c\u6240\u4ee5\u5982\u679c p_1|(c+b) p_1|(c+b) \uff0c p_1|(c-b) p_1|(c-b) \u662f\u4e0d\u53ef\u80fd\u6210\u7acb\u7684\u3002 \u6211\u4eec\u6682\u65f6\u629b\u5f00\u7e41\u7410\u7684\u8bc1\u660e\uff0c\u5c1d\u8bd5\u60f3\u8c61\u3002\u5047\u8bbe\u4f60\u7684\u624b\u91cc\u6709\u4e00\u4e2a\u6570 a^2 a^2 \u3002\u770b\u770b\u80fd\u4e0d\u80fd\u628a\u5b83\u5206\u89e3\u62102\u4e2a\u6ca1\u6709\u516c\u56e0\u6570\u7684\u6570\u3002 \u554a\uff0c\u4e0d\u9519\uff0c\u5206\u6210\u7684\u8fd9\u4e24\u4e2a\u6570\u5c31\u662f(c+b)\u4e0e(c-b)\u3002\u8981\u600e\u4e48\u5206\u5462\uff1f\u6211\u4eec\u4e3e\u4e2a\u6817\u5b50\u3002\u8bd5\u8bd5\u5206\u89e3 10^2 10^2 ? \u5148\u5206\u89e3\u8d28\u56e0\u6570\u3002 10^2=2^2 \\times 5^2 10^2=2^2 \\times 5^2 \u6211\u4eec\u9009\u53d6\u4e00\u4e9b\u8d28\u6570\u7ed9(c+b)\uff0c\u5269\u4e0b\u7684\u8d28\u6570\u5168\u90e8\u7ed9(c-b) \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4ec5\u63a2\u8ba8\u6b63\u6574\u6570\u8303\u56f4\u5185\uff0c\u5206\u89e3\u8981\u6ee1\u8db3(c+b)>(c-b),\u5e76\u4e14\u90fd\u662f\u5076\u6570 \u55ef\uff0c\u8fd9\u597d\u50cf\u53ea\u6709\u4e00\u79cd\u5206\u6cd5 \\to c-b=2^2,c+b=5^2 \\to c-b=2^2,c+b=5^2 \u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u518d\u9009\u51e0\u4e2a\u6570\uff0c\u52a8\u624b\u5c1d\u8bd5\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c c-b c-b \u5982\u679c\u542b\u6709\u8d28\u56e0\u6570p, c-b c-b \u80af\u5b9a\u4e5f\u542b\u6709\u56e0\u6570 p^2 p^2 \u3002 c+b c+b \u4e5f\u662f\u5982\u6b64\u3002\u6240\u4ee5\uff0c (c-b) (c-b) \u4e0e (c+b) (c+b) \u4e00\u5b9a\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u3002 \u6765\u5427\uff0c\u51b2\u5411\u80dc\u5229\uff01 \u6211\u4eec\u8bbe s^2=c+b,t^2=c-b(s>b) s^2=c+b,t^2=c-b(s>b) \u6211\u4eec\u628a\u4e0a\u9762\u4fe9\u5f0f\u5b50\u52a0\u4e00\u52a0\u3001\u51cf\u4e00\u51cf\u2014\u2014\u54c7\uff01 2c={s^2+t^2},c=\\frac {s^2+t^2}2 2c={s^2+t^2},c=\\frac {s^2+t^2}2 2b={s^2-t^2},b=\\frac {s^2-t^2}2 2b={s^2-t^2},b=\\frac {s^2-t^2}2 \\because a^2=(c+b)\\times(c-b) \\because a^2=(c+b)\\times(c-b) \\therefore a^2=s^2\\times t^2 \\therefore a^2=s^2\\times t^2 \\therefore a=st \\therefore a=st \u52fe\u80a1\u6570\u7ec4\u5b9a\u7406 \u00b6 \u6bcf\u4e2a\u672c\u539f\u52fe\u80a1\u6570\u7ec4(a,b,c)(\u5176\u4e2da\u4e3a\u5947\u6570\uff0cb\u4e3a\u5076\u6570)\uff0c\u90fd\u53ef\u4ece\u5982\u4e0b\u516c\u5f0f\u5f97\u51fa\u3002 \\large a=st,b=\\frac {s^2-t^2}2,c=\\frac {s^2+t^2}2 \\large a=st,b=\\frac {s^2-t^2}2,c=\\frac {s^2+t^2}2 \u5176\u4e2d s >t \\ge 0 s >t \\ge 0 \u662f\u4efb\u610f\u6ca1\u6709\u516c\u56e0\u6570\u7684\u5947\u6570\u3002 \u5f53\u7136\uff0c\u4ee5\u4e0a\u8bc1\u660e\u662f\u4e0d\u5b8c\u6574\u7684\u3002\u6211\u4eec\u8fd8\u8981\u8bc1\u660ea\u3001b\u3001c\u6ca1\u6709\u516c\u56e0\u6570\u3002 \u6211\u4eec\u8fd0\u7528\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe gcd(st,\\frac{s^2-t^2}2,\\frac{s^2+t^2}2)\\not=1 gcd(st,\\frac{s^2-t^2}2,\\frac{s^2+t^2}2)\\not=1 \u6211\u4eec\u5047\u8bbe\u8d28\u6570 p|(st) p|(st) , p p \u80af\u5b9a\u4e3a s s \u6216 t t \u7684\u4e00\u4e2a\u8d28\u56e0\u6570\u3002 \u5047\u8bbe p p \u4e3a s s \u7684\u4e00\u4e2a\u8d28\u56e0\u6570\uff0c p p \u80af\u5b9a\u4e0d\u4e3a t t \u7684\u8d28\u56e0\u6570\u3002\u8fd9\u5341\u5206\u660e\u663e\uff0c\u56e0\u4e3as\u3001r\u4e92\u8d28\u561b\uff09 \\frac{s^2-t^2}2=\\frac{(s+t)(s-t)}2 \\frac{s^2-t^2}2=\\frac{(s+t)(s-t)}2 \u7531 s\\%p=0,t\\%p\\not=0 s\\%p=0,t\\%p\\not=0 \u53ef\u77e5 (s+t)\\%p\\not=0,(s-t)\\%p\\not=0 (s+t)\\%p\\not=0,(s-t)\\%p\\not=0 \\therefore (\\frac{s^2+t^2}2)\\%p\\not=0 \\therefore (\\frac{s^2+t^2}2)\\%p\\not=0 \u82e5 p p \u4e3a t t \u7684\u8d28\u56e0\u6570\uff0c\u8bc1\u660e\u8fc7\u7a0b\u51e0\u4e4e\u548c\u4e0a\u9762\u4e00\u6a21\u4e00\u6837\uff0c\u8bf7\u8bfb\u8005\u81ea\u884c\u5b8c\u6210\u3002 \u6240\u4ee5\uff0c\u5bf9\u4e8e st st \u7684\u4efb\u610f\u8d28\u56e0\u6570\uff0c\u90fd\u4e0d\u80fd\u6574\u9664 \\frac{s^2-t^2}2 \\frac{s^2-t^2}2 ,\u5373 gcd(st,\\frac{s^2-t^2}2)=1 gcd(st,\\frac{s^2-t^2}2)=1 \u7efc\u4e0a\u6240\u8ff0\uff0c gcd(st,\\frac{s^2-t^2}2,\\frac{s^2+t^2}2)\\not=1 gcd(st,\\frac{s^2-t^2}2,\\frac{s^2+t^2}2)\\not=1 \u4e0d\u6210\u7acb\uff0c\u539f\u547d\u9898\u6b63\u786e\u3002 QED. \u5982\u4f55\u627e\u52fe\u80a1\u6570\u7ec4 \u00b6 \u6211\u4eec\u4f1a\u627e\u672c\u539f\u52fe\u80a1\u6570\u7ec4\uff0c\u81ea\u7136\u627e\u51fa\u4e86\u6240\u6709\u52fe\u80a1\u6570\u7ec4\u3002 \u4e0d\u8fc7\uff0c\u8fd8\u6709\u4e00\u79cd\u795e\u5947\u7684\u65b9\u6cd5\uff0c\u5df2\u77e5 c c \uff0c\u53ef\u4ee5\u5728 O(\\sqrt c) O(\\sqrt c) \u7684\u65f6\u95f4\u5185\u6c42\u51fa\u6ee1\u8db3 a^2+b^2=c^2 a^2+b^2=c^2 \u7684 a a \u3001 b b \u4e2a\u6570\u3002 \u8fd9\u91cc\u653e\u4e2a \u94fe\u63a5 \uff0c\u91cc\u9762\u8bb2\u7684\u8fd8\u662f\u5f88\u4e0d\u9519\u7684QAQ~~(\u80af\u5b9a\u8bb2\u7684\u6bd4\u6211\u597d) \uff0c\u5f3a\u70c8\u5efa\u8bae\u7ae5\u978b\u4eec\u53bbHave a look\u3002 ~~\u987a\u4fbf\u5207\u9053\u7d2b\u9898 P2508 [HAOI2008]\u5706\u4e0a\u7684\u6574\u70b9 \u3002 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u9ad8\u65af\u6574\u6570 \u00b6 \u9ad8\u65af\u6574\u6570\uff08gaussian integer\uff09\u662f\u5b9e\u6570\u90e8\u5206\uff08\u5b9e\u90e8\uff09\u548c\u865a\u6570\u90e8\u5206\uff08\u865a\u90e8\uff09\u90fd\u662f\u6574\u6570\u7684\u590d\u6570\u3002\u4e5f\u5c31\u662f\u590d\u5e73\u9762\u4e2d\u70b9\u96c6{a+bi|a,b \u90fd\u662f\u6574\u6570}\u3002\u6240\u6709\u9ad8\u65af\u6574\u6570\u7ec4\u6210\u4e86\u4e00\u4e2a\u6574\u73af\uff0c\u5199\u4f5cZ\u3002\u5b83\u662f\u4e2a\u4e0d\u53ef\u4ee5\u8f6c\u6210\u6709\u5e8f\u73af\u7684\u6b27\u51e0\u91cc\u5fb7\u6574\u73af\uff0c\u6240\u4ee5\u662f\u552f\u4e00\u56e0\u5b50\u5206\u89e3\u6574\u73af\u3002 \u4e5f\u5c31\u662f\u5728\u8fd9\u4e2a\u6574\u73af\u4e2d\uff0c\u5982\u540c\u6574\u6570\u96c6\u4e00\u6837\uff0c\u53ef\u4ee5\u5b58\u5728\u552f\u4e00\u56e0\u5b50\u5206\u89e3\u5b9a\u7406\u3002 \u2014\u2014\u6458\u81ea\u767e\u5ea6\u767e\u79d1 \u8d39\u9a6c\u5e73\u65b9\u548c\u5b9a\u7406 \u00b6 \u5947\u7d20\u6570p\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u5e73\u65b9\u548c\uff0c\u5f53\u4e14\u4ec5\u5f53p\u662f4k+1\u578b\u7684\u3002\u5e76\u4e14\u5728\u4e0d\u8003\u8651\u4e24\u4e2a\u6b63\u6574\u6570\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u8868\u793a\u65b9\u6cd5\u552f\u4e00\u3002\u2014\u2014\u6458\u81ea\u4e0a\u9762\u94fe\u63a5\u7684\u8bc4\u8bba \u5947\u8d28\u6570\u80fd\u8868\u793a\u4e3a\u4e24\u4e2a\u5e73\u65b9\u6570\u4e4b\u548c\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662f\u8be5\u8d28\u6570\u88ab4\u9664\u4f591\u2014\u2014\u6458\u81ea\u767e\u5ea6\u767e\u79d1 \u7531\u4e8e\u8d39\u9a6c\u5e73\u65b9\u548c\u5b9a\u7406\u8bc1\u660e\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u627e\u5230\u7684\u4e00\u4e9b\u7b80\u5355\u7684\u8bc1\u660e\u90fd\u662f\u7247\u9762\u6216\u9519\u8bef\u7684\uff0c\u5b8c\u5168\u7684\u8bc1\u660e\u4f3c\u4e4e\u8981\u52065\u6b65\uff0c\u8bf7\u81ea\u884c\u4e86\u89e3\uff0c\u8fd9\u91cc\u4e0d\u4ed4\u7ec6\u8bb2\u3002 a^2+b^2=c^2 a^2+b^2=c^2 \uff0c\u6216\u8005\u66f4\u5e7f\u6cdb\u5730\uff0c a^2+b^2=c(\\text{a\u3001b\u3001c\u90fd\u4e3a\u6574\u6570(\u4e0d\u4e00\u5b9a\u662f\u6b63\u7684)}) a^2+b^2=c(\\text{a\u3001b\u3001c\u90fd\u4e3a\u6574\u6570(\u4e0d\u4e00\u5b9a\u662f\u6b63\u7684)}) (\u8fd9\u91cc\u6211\u4eec\u9009\u540e\u8005\u4e3a\u4f8b)\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\uff0c\u4e00\u4e2a\u4ee5O\u4e3a\u5706\u5fc3\u3001\u4ee5 \\sqrt c \\sqrt c \u4e3a\u5706\u5fc3\u7684\u5706\u7ecf\u8fc7\u51e0\u4e2a\u683c\u70b9\u3002(\u8fd9\u91cc\u4e3a\u4e86\u66f4\u65b9\u4fbf\uff0ca\u3001b\u3001c\u90fd\u4e3a \u6574\u6570 \uff0c\u4e0d\u4e00\u5b9a\u8981\u6b63\u6574\u6570\uff0c\u53ef\u4ee5\u662f0\u3001\u8d1f\u6574\u6570)\u3002 \u6211\u4eec\u628a\u5706\u653e\u5728\u590d\u6570\u5e73\u9762\u4e2d(x\u8f74\u4e3a\u5b9e\u6570\u8f74\uff0cy\u8f74\u4e3a\u865a\u6570\u8f74)\u3002 \u7136\u540e\u5c31\u6709\u60ca\u559c\u3002\u6ce8\u610f\uff1a\u4ee5\u4e0b\u53d9\u8ff0\u90fd\u662f\u5728\u590d\u6570\u5e73\u9762\u4e2d\uff0c\u4e0d\u518d\u662f\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff09 \u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u2014\u2014 c=25 c=25 \u5728\u4e0a\u9762\u90a3\u4e2a\u94fe\u63a5\u89c6\u9891\u4e2d\u63d0\u5230XX\u7684\u6a21\uff0c\u6211\u7684\u7406\u89e3\u4e3aXX\u4e0e\u539f\u70b9\u7684\u8ddd\u79bb\uff09 \u5f88\u660e\u663e\uff0c\u4ee5 \\sqrt c \\sqrt c \u4e3a\u534a\u5f84\u7684\u5706\u7ecf\u8fc7\u7684\u683c\u70b9\u6709 (0+5i),(3+4i),(4+3i),(5+0i),(4-3i),(3-4i),(0-5i),(-3-4i),(-4-3i),(-5+0i),(-4+3i),(-3+4i) (0+5i),(3+4i),(4+3i),(5+0i),(4-3i),(3-4i),(0-5i),(-3-4i),(-4-3i),(-5+0i),(-4+3i),(-3+4i) \u517112\u4e2a\u3002 (3+4i),(3-4i) (3+4i),(3-4i) \u8fd9\u7c7b\u5173\u4e8e\u5b9e\u6570\u8f74\u5bf9\u79f0\u7684\u70b9\u4e92\u4e3a\u201c\u590d\u5171\u8f68\u201d\u3002 (3+4i) (3+4i) \u7684\u6a21\u662f5\uff0c\u8bbe\u5b83\u4e0e\u5b9e\u6570\u8f74\u5448 \\alpha \\alpha , (3-4i) (3-4i) \u7684\u6a21\u4e5f\u662f5\uff0c\u5b83\u4e0e\u5b9e\u6570\u8f74\u5448 -\\alpha -\\alpha \uff0c\u5f88\u660e\u663e\uff0c\u5b83\u4eec\u76f8\u4e58\u5f97\u5230\u7684\u7ed3\u679c\u4e0e\u5b9e\u6570\u8f74\u5448 \\alpha - \\alpha=0 \\alpha - \\alpha=0 \u5ea6\uff0c\u800c (3+4i)(3-4i) (3+4i)(3-4i) \u7684\u6a21(\u5176\u5b9e\u548c\u6570\u503c\u662f\u4e00\u6837\u7684)\u4e3a 25 25 \uff0c\u4e5f\u5c31\u662f c c \u3002\u5f88\u660e\u663e\uff0c\u50cf\u8fd9\u6837\u683c\u70b9(\u4e5f\u5c31\u662f(a+bi)(a-bi)=c)\u90fd\u662f\u5728\u5706\u4e0a\u7684\u3002\u8fd9\u6837\uff0c\u95ee\u9898\u5c31\u8f6c\u6362\u4e3a\u591a\u5c11\u4e2a\u9ad8\u65af\u6574\u6570\u4e0e\u5176\u590d\u5171\u8f68\u4e4b\u79ef\u4e3a c c \u3002 \u600e\u4e48\u89e3\u51b3\u5462\uff1f\u8fd9\u5c31\u7528\u5230\u524d\u7f6e\u77e5\u8bc6\u4e2d\u7684 \u8d39\u9a6c\u5e73\u65b9\u548c\u5b9a\u7406 \uff0c\u4e0d\u719f\u6089\u7684\u7ae5\u978b\u53ef\u4ee5\u518d\u53bb\u770b\u770b\u3002 \u6211\u4eec\u628a\u4e0d\u80fd\u518d\u5206\u89e3\u7684\u9ad8\u65af\u6574\u6570\u79f0\u4e3a\u201c\u9ad8\u65af\u7d20\u6570\u201d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9ad8\u65af\u7d20\u6570\u67093\u79cd\uff1a 4k+3\u578b\u7684\u7d20\u6570 4k+1\u578b\u7d20\u6570\u5206\u89e3\u51fa\u7684\u4e24\u4e2a\u9ad8\u65af\u6574\u6570 2 \u6839\u636e \u8d39\u9a6c\u5e73\u65b9\u548c\u5b9a\u7406 \uff0c\u4e00\u4e2a4k+1\u578b\u7684\u7d20\u6570\u53ef\u4ee5\u5206\u89e3\u6210 (a+bi)(a-bi) (a+bi)(a-bi) \uff0c\u5f88\u660e\u663e\uff0c\u8fd9\u4e24\u4e2a\u7d20\u6570\u4e92\u4e3a\u590d\u5171\u8f68\u3002 \u5982\u679c\u4e00\u4e2a\u6570\u8d28\u56e0\u5b50\u4e2d\u53ea\u67094k+1\u578b\u7684\u7d20\u6570\uff0c\u50cf\u6211\u4eec\u4e3e\u4f8b\u768425\uff0c\u90a3\u5c31\u597d\u529e\u4e86\u3002 \u50cf\u8fd9\u6837\uff0c\u5c06\u5b83\u5206\u89e3\u6210\u82e5\u5e72\u9ad8\u65af\u7d20\u6570\u7684\u4e58\u79ef(\u5f88\u660e\u663e\uff0c\u8fd9\u662f\u552f\u4e00\u7684)\uff0c\u5e76\u5c06\u4e92\u4e3a\u590d\u5171\u8f68\u7684\u4e00\u5bf9\u9ad8\u65af\u7d20\u6570\u5199\u4e24\u8fb9\uff0c\u5de6\u8fb9\u6240\u6709\u9ad8\u65af\u7d20\u6570\u7684\u4e58\u79ef\u4e0e\u53f3\u8fb9\u7684\u4e58\u79ef\u4e92\u4e3a\u590d\u5171\u8f68\u3002\u8981\u4f7f\u5de6\u53f3\u4e58\u79ef\u7ee7\u7eed\u4fdd\u6301\u4e92\u4e3a\u590d\u5171\u8f68\uff0c\u53ea\u80fd\u4ea4\u6362\u4e00\u5bf9\u4e92\u4e3a\u590d\u5171\u8f68\u7684\u9ad8\u65af\u7d20\u6570\u7684\u4f4d\u7f6e\uff08\u8fd9\u4e2a\u4e0d\u96be\u7406\u89e3\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff0c\u5bf9\u4e8e\u76f8\u540c\u7684\u9ad8\u65af\u7d20\u6570(\u6211\u6307\u7684\u662f\u6210\u5bf9\u7684)\uff0c\uff08\u5c31\u6bd4\u5982 (1+2i) (1+2i) \uff09\uff0c\u5b83\u5728\u5de6\u8fb9\u53ef\u4ee5\u653e0\u4e2a\uff0c\u653e1\u4e2a\uff0c\u653e2\u4e2a\u2026\u2026\u5f53\u7136\uff0c\u4e0d\u662f\u4f60\u60f3\u653e\u5c31\u968f\u4fbf\u653e\u7684\uff0c\u628a1\u4e2a\u653e\u5230\u5de6\u8fb9\u7684\u540c\u65f6\uff0c\u8981\u628a\u5b83\u7684\u590d\u5171\u8f68\u79fb\u4e00\u4e2a\u5230\u53f3\u8fb9\uff0c\u4ee5\u4fdd\u6301\u5de6\u53f3\u4e58\u79ef\u4ecd\u4e92\u4e3a\u590d\u5171\u8f68\u3002\u8fd9\u6837\uff0c\u5982\u679c\u603b\u5171\u6709p\u4e2a\uff0c\u5c31\u6709(p+1)\u79cd\u653e\u6cd5\u3002\u7136\u540e\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u9ad8\u65af\u7d20\u6570(\u5f53\u7136\uff0c\u5904\u7406\u8fc7\u4e00\u4e2a\u9ad8\u65af\u7d20\u6570\uff0c\u4e0d\u5fc5\u518d\u5904\u7406\u5b83\u7684\u590d\u5171\u8f68)\u3002\u6700\u540e\uff0c\u4e3a\u4e86\u907f\u514d\u91cd\u590d\uff0c\u6211\u4eec\u53ea\u53d6\u5de6\u8fb9\u7684\u4e58\u79ef\u4f5c\u4e3a\u7ed3\u679c\u3002\u7136\u9e45\uff0c\u4e8b\u60c5\u5e76\u975e\u8fd9\u4e48\u7b80\u5355\u3002\u5982\u679c\u4f60\u8fd9\u4e48\u7b97\uff0c25\u5f97\u5230\u7684\u7ed3\u679c\u4e3a (2+1)=3 (2+1)=3 \u3002\u624d\u8fd9\u4e48\u70b9\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4f60\u5728\u5de6\u3001\u53f3\u5206\u522b\u4e58\u4e0a-1\u4e0e-1\u3001i\u4e0e-i\u3001-i\u4e0ei\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e0d\u540c\u7684\uff0c\u800c\u4e14\u5f88\u663e\u7136\uff0c\u5b83\u4eec\u90fd\u662f\u5bf9\u7684\u3002\u4f46\u662f\u5b83\u4eec\u7684\u672c\u8d28\u662f\u76f8\u540c\u7684\u3002\u5c31\u597d\u6bd4 3\\times4=12 3\\times4=12 \uff0c (-3)\\times(-4)=12 (-3)\\times(-4)=12 \u4e00\u6837\u3002\u6240\u4ee5\uff0c\u6700\u540e\u7684\u7ed3\u679c\u8981\u4e584\u3002 4k+3\u578b\u7684\u7d20\u6570\u5df2\u7ecf\u662f\u9ad8\u65af\u7d20\u6570\uff0c\u800c\u4e14\u5b83\u7684\u590d\u5171\u8f68\u5c31\u662f\u672c\u8eab\uff0c\u56e0\u6b64\uff0c\u53ea\u80fd\u5c06\u5b83\u5e73\u5747\u5206\u914d\u7ed9\u5de6\u8fb9\u548c\u53f3\u8fb9\u3002\u5982\u679c\u67d0\u4e2a\u8fd9\u79cd\u7d20\u6570\u6709\u5947\u6570\u4e2a\uff0c\u4e0d\u80fd\u5e73\u5747\u5206\u914d\u7ed9\u5de6\u53f3\uff0c\u90a3\u5f88\u9057\u61be\uff0c\u4e00\u4e2a\u89e3\u4e5f\u6ca1\u6709\u3002 \u5bf9\u4e8e\u7d20\u65702\uff0c\u5b83\u80fd\u5206\u89e3\u6210\u4e24\u4e2a\u9ad8\u65af\u7d20\u6570 (1-i)(1+i) (1-i)(1+i) \uff0c\u4f46\u662f\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c -i\\times(1-i)=(1+i) -i\\times(1-i)=(1+i) \uff0c\u5982\u679c\u5c06 (1-i) (1-i) \u4e0e (1+i) (1+i) \u4e92\u6362\u4f4d\u7f6e\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4e58 -i -i \uff0c\u53e6\u4e00\u4e2a\u4e58 i i \uff0c\u5b83\u4eec\u7684\u672c\u8d28\u8fd8\u662f\u6ca1\u6709\u53d8\uff0c\u6240\u4ee5\uff0c\u7d20\u65702 \u4e0d\u5f71\u54cd\u7ed3\u679c \u3002 \u6765\u770b\u770b[HAOI2008]\u5706\u4e0a\u7684\u6574\u70b9\uff0c\u56e0\u4e3a\u8fd9\u9898\u4e2d\u534a\u5f84r\u4e3a\u6b63\u6574\u6570\uff0c\u6240\u4ee5 r^2 r^2 \u6240\u542b\u7684 4k+3 4k+3 \u90fd\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c c^2\\%p=0 c^2\\%p=0 \uff0c\u90a3\u4e48 c^2\\%p^2=0 c^2\\%p^2=0 \uff0c\u6240\u4ee5\u76f4\u63a5\u5ffd\u7565 2 2 \u4e0e 4k+3 4k+3 \u578b\u7d20\u6570\u3002\u5982\u4f55\u5904\u7406 4k+1 4k+1 \u7684\u7d20\u6570\uff0c\u8bf7\u53c2\u7167\u4e0a\u6587\u3002\uff08\u627e\u8d28\u56e0\u6570\u4e0d\u5fc5\u8bb2\u4e86\u5427 \u4ee3\u7801 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; #define LL long long LL R , N , ans ( 1 ); int main (){ scanf ( \"%lld\" , & R ); N = R ; if ( R == 0 ){ printf ( \"1 \\n \" ); return 0 ; } //\u70b9\u5706 while ( R % 2 == 0 ) R >>= 1 ; //\u8d28\u56e0\u65702\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848 for ( LL i = 3 ; i * i <= N ; i += 2 ){ LL cnt ( 0 ); while ( R % i == 0 ) cnt ++ , R /= i ; //\u6570\u51fai\u7684\u5e42 if ( i % 4 == 1 ) ans *= ( cnt * 2 + 1 ); //i\u662f\u53ef\u4ee5\u5206\u89e3\u62102\u4e2a\u9ad8\u65af\u7d20\u6570\u7684\u8d28\u56e0\u6570\uff0c\u800c\u4e14\u5728N\u4e2d\u5b83\u7684\u5e42\u662fcnt,\u5b83\u5728N^2\u4e2d\u5b83\u7684\u5e42\u5c31\u662f2*cnt\u3002 } //\u5f88\u660e\u663e\uff0c> sqrt(N) \u7684\u8d28\u56e0\u6570\u6700\u591a\u6709\u4e00\u4e2a if ( R > 1 && R % 4 == 1 ) ans *= 3 ; //3 = 1 * 2 + 1 printf ( \"%lld\" , ans << 2 ); //*1, *(-1), *i, *(-i) return 0 ; } \u4e00\u4e9b\u5176\u4ed6\u6027\u8d28 \u00b6 \u8fd9\u91cc\u8fd8\u662f\u5047\u8bbe\u672c\u539f\u52fe\u80a1\u6570\u7ec4(a,b,c)\u4e2d\uff0ca\u4e3a\u5947\u6570\u3002 c-a=2t^2,t\\text{\u4e3a\u4e00\u6574\u6570} c-a=2t^2,t\\text{\u4e3a\u4e00\u6574\u6570} \u8fd9\u4e2a\u8bc1\u660e\u601d\u8def\u4e0e\u4e0a\u9762\u5341\u5206\u76f8\u4f3c\u3002\u53ea\u8981\u628a a^2 a^2 \u79fb\u5230\u53f3\u8fb9instead of b^2 b^2 \u5373\u53ef\u3002 Very easy. \u7ed9\u4e2a\u5f00\u5934\uff0c\u8bf7\u81ea\u884c\u8bc1\u660e\u3002\u5f53\u7136\uff0c\u8fd9\u4e5f\u80fd\u5728 \u6240\u6709 \u52fe\u80a1\u6570\u7ec4\u4e2d\u9002\u7528) $$ b 2=c 2-a^2=(c+a)(c-a) $$ a \\equiv 0(mod \\ 3)\\text{\u6216}b \\equiv 0(mod\\ 3) a \\equiv 0(mod \\ 3)\\text{\u6216}b \\equiv 0(mod\\ 3) \u8fd9\u91cc\u611f\u8c22@ LJC00118 Rank1\u5946\u4f6c\u6559\u4f1a\u6211\u5982\u4f55\u8bc1\u660e\u3002\u8fd9\u91cc\u58f0\u660e\u4e00\u4e0b\uff0c\u6211\u7edd\u5bf9\u6ca1\u6709\u7167\u642c\u7167\u6284) \u8bc1\u660e\uff1a \u6709\u4e00\u4e2a\u5b9a\u7406 a^2\\%3=0\\text{\u6216}1 a^2\\%3=0\\text{\u6216}1 \uff0c\u8fd9\u5341\u5206\u597d\u8bc1\uff0c\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\uff0c\u8fd9\u91cc\u7701\u7565\u8bc1\u660e\u3002 \u5047\u8bbe\u8be5\u5b9a\u7406\u4e0d\u6210\u7acb\uff0c \u5373 a \\not= 0\\text{\u4e14}b\\not=0 a \\not= 0\\text{\u4e14}b\\not=0 \\therefore a^2\\%3=1 \\therefore a^2\\%3=1 b^2\\%3=1 b^2\\%3=1 \\therefore(a^2+b^2)\\%3=2 \\therefore(a^2+b^2)\\%3=2 \\therefore c^2\\%3=2 \\therefore c^2\\%3=2 \u8fd9\u4e0e c^2\\%3=0\\text{\u6216}1 c^2\\%3=0\\text{\u6216}1 \u77db\u76fe\uff0c\u56e0\u6b64\u8be5\u5b9a\u7406\u6210\u7acb QED. \u8fd8\u6709\u4e24\u6761\u4e0d\u5e38\u7528\u7684\u6027\u8d28\uff0c\u4e86\u89e3\u5373\u53ef\u3002 a^4b^4+b^4c^4+c^4a^4=L^2 a^4b^4+b^4c^4+c^4a^4=L^2 a^8+b^8+c^8=2L^2 a^8+b^8+c^8=2L^2 \u5173\u4e8e\u8d39\u9a6c\u5927\u5b9a\u7406 \u00b6 \u8d39\u9a6c\u5728\u67d0\u672c\u4e66\u7684\u8fb9\u6cbf\u4e0a\u5199\u9053\u3002 \u4e0d\u53ef\u80fd\u5c06\u4e00\u4e2a3\u6b21\u65b9\u5206\u6210\u4e24\u4e2a3\u6b21\u65b9\u4e4b\u548c\uff1b\u4e00\u4e2a4\u6b21\u65b9\u4e0d\u53ef\u80fd\u5199\u6210\u4e24\u4e2a4\u6b21\u65b9\u4e4b\u548c\uff1b\u4e00\u822c\u5730\uff0c\u4efb\u4f55\u9ad8\u4e8e2\u6b21\u7684\u5e42\u4e0d\u53ef\u80fd\u5199\u6210\u4e24\u4e2a\u540c\u6b21\u5e42\u4e4b\u548c.\u6211\u5df2\u53d1\u73b0\u4e00\u4e2a\u7f8e\u5999\u7684\u8bc1\u660e\uff0c\u8fd9\u91cc\u7a7a\u767d\u592a\u5c0f\u5199\u4e0d\u4e0b \u4e5f\u5c31\u662f\u8bf4\uff0c a^n+b^n=c^n(n>2) a^n+b^n=c^n(n>2) \u6ca1\u6709\u6b63\u6574\u6570\u89e3\u3002\u8fd9\u5c31\u662f\u8d6b\u8d6b\u6709\u540d\u7684\u8d39\u9a6c\u5927\u5b9a\u7406\u3002 W(\uffe3_\uffe3)W\u3002\u3002\u3002\u8fd9\u662f\u4e00\u4e2a\u4e16\u7eaa\u96be\u9898\uff0c1986\u5e74\u624d\u88ab\u89e3\u51b3\u3002\u3002\u3002\u5927\u5bb6\u4e86\u89e3\u5373\u53ef\uff0c\u4e86\u89e3\u5373\u53ef\uff0c\u5982\u679c\u60a8\u8bc1\u51fa\u6765\u4e86\uff0c\u6211\u53ea\u80fd\u819c\u62dc\u5927\u4ed9\u3002\u5982\u679c\u771f\u7684\u78b0\u5230\u7c7b\u4f3c\u4e8e\u8fd9\u6837\u7684\u5f0f\u5b50\uff0c\u76f4\u63a5\u62ff\u51fa\u6765\u7528\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u8981\u50bbfufu\u5730\u53bb\u8bc1\u660e\u3002 \u6700\u540e\u7684\u8865\u5145 \u00b6 \u8fd9\u91cc\u518d\u589e\u52a0\u4e00\u4e9b\u77e5\u8bc6\u70b9\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u63a8\u51fa\u52fe\u80a1\u6570\u7ec4\u5b9a\u7406\u3002 a^2+b^2=c^2 \\to (\\frac ac)^2+(\\frac bc)^2=1 a^2+b^2=c^2 \\to (\\frac ac)^2+(\\frac bc)^2=1 \u8fd9\u6837\u5c31\u8f6c\u6362\u4e3a\u5982\u4f55\u627e\u51fa x^2+y^2=1 x^2+y^2=1 \u7684\u6240\u6709 \u6709\u7406\u6570 \u89e3 \u6211\u4eec\u4ee5(0,0)\u4e3a\u5706\u5fc3\uff0cr=1\u4e3a\u534a\u5f84\u753b\u5706\u3002 \u5f88\u660e\u663e\uff0c\u70b9(1,0)\u662f\u4e00\u4e2a\u89e3\u3002\u6211\u4eec\u8fc7\u70b9(1,0)\u4f5c\u76f4\u7ebfy=mx-m \u7136\u540e\u5c31\u53ef\u4ee5\u89e3\u65b9\u7a0b\u7ec4\u8fa3 m(x-1)=y m(x-1)=y x^2+y^2=1 x^2+y^2=1 \u5f97 (m^2+1)x^2-2m^2x+m^2-1=0 (m^2+1)x^2-2m^2x+m^2-1=0 \u7531\u4e8ex=1\u662f\u4e00\u4e2a\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5f0f\u5b50\u5206\u89e3\u3002 \u5f97\u5230 (x-1)[(m^2+1)x-(m^2 - 1)] (x-1)[(m^2+1)x-(m^2 - 1)] \u7b97\u4e86\u534a\u5929 \u547c\u3002\u3002\u3002) (m^2+1)x-(m^2-1)=0 (m^2+1)x-(m^2-1)=0 (m^2+1)x=m^2-1 (m^2+1)x=m^2-1 x=\\frac{m^2-1}{m^2+1} x=\\frac{m^2-1}{m^2+1} y=\\frac {-2m}{m^2+1} y=\\frac {-2m}{m^2+1} \u5f53\u7136\uff0c\u5982\u679c\u9009\u53d6(-1, 0)\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u6837\u6c42\u51fa\u6765\u7684\u7b54\u6848\u6709\u70b9\u4e0d\u4e00\u6837\u3002 x=\\frac{1-m^2}{1+m^2} x=\\frac{1-m^2}{1+m^2} y=\\frac {2m}{1+m^2} y=\\frac {2m}{1+m^2} \u8fd9\u4e24\u4e2a\u5f0f\u5b50\u51e0\u4e4e\u662f\u7b49\u6548\u7684\u3002\u5982\u679c\u8bbe\u524d\u4e00\u4e2a\u5f0f\u5b50\u4e2d\u7684 m m \u4e3a m_1 m_1 \uff0c\u540e\u4e00\u4e2a\u4e3a m_2 m_2 \u5f53 m_1=-\\frac 1 {m_2} m_1=-\\frac 1 {m_2} \u65f6\uff0c\u8fd9\u4e24\u4e2a\u5f0f\u5b50\u6c42\u51fa\u7684\u5750\u6807\u662f\u4e00\u6837\u7684\u3002\uff08\u5f53\u7136\uff0c\u524d\u63d0\u662fm\u4e0d\u4e3a0\uff09 \u5341\u5206\u795e\u5947\uff0cright\uff1f \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u63cf\u8ff0\u6240\u6709\u52fe\u80a1\u6570\u7ec4\u3002 \u6211\u4eec\u4ee4 m=\\frac vu m=\\frac vu \u4ee3\u5165\u6c42\u503c\uff08\u4e0b\u9762\u7684\u5f0f\u5b50\uff09\u2014\u2014 \\huge x=\\frac{1-m^2}{1+m^2}=\\frac{1-(\\frac vu)^2}{1+(\\frac vu)^2}=\\frac{u^2-v^2}{u^2+v^2} \\huge x=\\frac{1-m^2}{1+m^2}=\\frac{1-(\\frac vu)^2}{1+(\\frac vu)^2}=\\frac{u^2-v^2}{u^2+v^2} \\huge y = \\frac{2(\\frac vu)}{1+(\\frac vu)^2}=\\frac{2uv}{u^2+v^2} \\huge y = \\frac{2(\\frac vu)}{1+(\\frac vu)^2}=\\frac{2uv}{u^2+v^2} \u8fd9\u6837\u6211\u4eec\u5f97\u5230\u4e00\u7ec4\u52fe\u80a1\u6570\u3002 (2uv,u^2-v^2,u^2+v^2) (2uv,u^2-v^2,u^2+v^2) \u4e4b\u524d\u5fd8\u4e86\u8bf4\u660e\u8fd9\u662f\u6709\u7406\u6570\uff0c\u73b0\u5728\u8865\u4e0a\u3002 \u7ed9\u5927\u5bb6\u4e00\u4e2a\u8868\u683c(\u6765\u6e90: https://www.bilibili.com/video/av29019452/?p=9 ) \u4e5f\u5c31\u662f\u8bf4\uff0c\u6709\u7406\u6570(RATIONAL)\u4e0e\u6709\u7406\u6570\u7ecf\u8fc7\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97\u540e\u8fd8\u662f\u6709\u7406\u6570\uff0c\u7531\u4e8e\u5e73\u65b9\u8fd0\u7b97\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u6709\u7406\u6570\u81ea\u5df1\u4e58\u81ea\u5df1\uff0c\u5c5e\u4e8e\u4e58\u6cd5 \uff08\u6574\u6570\u6b21\u5e42\u90fd\u53ef\u4ee5\u770b\u6210\u4e58\u6cd5\uff09\uff0c\u6240\u4ee5\uff0c\u4e0a\u8ff0\u5f0f\u5b50\u539f\u6765\u7684\u53d8\u91cf\u53ea\u6d89\u53ca\u5b9e\u6570\u7684\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\u8fd0\u7b97\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u8fd8\u662f\u6709\u7406\u6570\u3002 \u53ea\u8981\u4f60\u5b9a\u4e49\u7684m\u6ee1\u8db3\u662f\u6709\u7406\u6570\uff0c\u4e0a\u9762\u63d0\u53ca\u7684\u6240\u6709\u53d8\u91cf\u90fd\u662f\u6709\u7406\u6570\u3002 \u6240\u6709\u52fe\u80a1\u6570\u7ec4\u90fd\u53ef\u4ee5\u901a\u8fc7\u8be5\u5f0f\u63a8\u51fa\u3002\u5f53\u7136\uff0c\u6709\u4e00\u4e9b\u9650\u5236\uff09 \u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u8bbe u=\\frac{s+t}2,v=\\frac{s-t}2 u=\\frac{s+t}2,v=\\frac{s-t}2 ,\u53c8\u53ef\u4ee5\u4e0e\u4e4b\u524d\u7684\u52fe\u80a1\u6570\u7ec4\u5b9a\u7406\u76f8\u7ed3\u5408\u3002 \u5f53\u7136\uff0c\u66f4\u5927\u7684\u5706\u4e5f\u53ef\u4ee5\u7b97\uff0c\u8bf7\u81ea\u5df1\u5c1d\u8bd5\u2014\u2014 \u8fd9\u4e9b\u56fe\u9664\u4e86\u201c\u5982\u4f55\u627e\u52fe\u80a1\u6570\u7ec4\u201d\u90a3\u5f20 \u90fd\u662f\u81ea\u5df1\u753b\u7684QAQ \u7528\u82f1\u6587\u7684\u4e3b\u8981\u539f\u56e0\u662f\u5b57\u4f53\u4e0d\u652f\u6301\u4e2d\u6587QAQ \u6700\u540e\u7684\u6700\u540e \u00b6 \u7531\u4e8e\u6211\u5f88\u5f31\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u51fa\u9519\uff0c\u6b22\u8fce\u6307\u6b63\u9519\u8befQAQ\u3002","title":"\u52fe\u80a1\u6570\u7ec4"},{"location":"math/pythagorean-triple/#_1","text":"","title":"\u52fe\u80a1\u6570\u7ec4"},{"location":"math/pythagorean-triple/#_2","text":"\u6211\u4eec\u5927\u6982\u8001\u65e9\u5c31\u77e5\u9053\u52fe\u80a1\u5b9a\u7406\uff0c\u5b83\u5927\u6982\u5c31\u957f\u8fd9\u6837\uff1a a^2+b^2=c^2 a^2+b^2=c^2 \u55ef\uff0c\u7684\u786e\u591f\u7b80\u5355\u7684\u3002 \u800c\u4e14\u6211\u4eec\u6e05\u695a\u5730\u77e5\u9053\u5b83\u7684\u4e00\u4e2a\u57fa\u672c\u5e94\u7528\u2014\u2014\u77e5\u9053 Rt\\Delta Rt\\Delta \u7684\u4e24\u8fb9\u957f\uff0c\u6c42\u7b2c\u4e09\u8fb9\u3002\u8fd9\u5927\u6982\u521d\u4e00\u5c31\u5b66\u4e86\u3002 \u5bf9\u4e8e\u4e0d\u77e5\u9053\u52fe\u80a1\u5b9a\u7406\u7684\u7ae5\u978b\u4eec\uff0c\u4e0d\u4e86\u89e3\u6ca1\u5173\u7cfb\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6ca1\u6709\u4e09\u89d2\u5f62\uff0c\u4e5f\u4e0d\u662f\u63a2\u8ba8\u600e\u4e48\u6c42\u7b2c\u4e09\u8fb9\uff0c\u6211\u4eec\u53ea\u63a2\u8ba8\u52fe\u80a1\u6570\u7ec4\u3002 \u8fd9\u91cc\u7684 a \\equiv b(mod\\ c) a \\equiv b(mod\\ c) \u5176\u5b9e\u5c31\u662f a\\%c=b\\%c a\\%c=b\\%c \uff0ca|b\u5176\u5b9e\u5c31\u662f b\\%a=0 b\\%a=0 \uff0c\u5e0c\u671b\u5c0f\u767d\u4eec\u4e0d\u8981\u770b\u4e0d\u61c2\u3002 \u5982\u679c\u771f\u7684\u770b\u4e0d\u61c2\uff0c\u53ef\u4ee5\u5148\u5b66\u4e60\u540c\u4f59\u3001\u7ea6\u6570\u3001\u7d20\u6570\u7684\u77e5\u8bc6\u3002","title":"\u5199\u5728\u524d\u9762"},{"location":"math/pythagorean-triple/#_3","text":"\u4ec0\u4e48\u4e8b\u90fd\u5f97\u4ece\u5b9a\u4e49\u5f00\u59cb\u3002\u6765\u770b\u770b\u767e\u5ea6\u767e\u79d1\u6559\u4f1a\u6211\u4eec\u4ec0\u4e48\u3002","title":"\u52fe\u80a1\u6570\u7ec4"},{"location":"math/pythagorean-triple/#_4","text":"\u4e00\u822c\u5730\uff0c\u82e5\u4e09\u89d2\u5f62\u4e09\u8fb9\u957fa\uff0cb\uff0cc\u90fd\u662f\u6b63\u6574\u6570\uff0c\u4e14\u6ee1\u8db3a\uff0cb\u7684 \u5e73\u65b9\u548c \u7b49\u4e8ec\u7684\u5e73\u65b9\uff0c\u90a3\u4e48\u6570\u7ec4\uff08a\uff0cb\uff0cc\uff09\u79f0\u4e3a\u52fe\u80a1\u6570\u7ec4\u3002\u52fe\u80a1\u6570\u7ec4\u662f\u4eba\u4eec\u4e3a\u4e86\u89e3\u51fa\u6ee1\u8db3 \u52fe\u80a1\u5b9a\u7406 \u7684 \u4e0d\u5b9a\u65b9\u7a0b \u7684\u6240\u6709\u6574\u6570\u89e3\u800c\u521b\u9020\u7684\u6982\u5ff5\u3002 \u55ef\uff0c\u591f\u7b80\u5355\u7684\u3002\u4e0d\u8fc7\u6709\u4e9b\u4eba\u603b\u662f\u559c\u6b22\u628a\u5b83\u5f04\u5f97\u9ad8\u5927\u5c1a\u4e9b\uff0c\u628a\u5b83\u53eb\u505a\u201c\u6bd5\u8fbe\u54e5\u62c9\u65af\u4e09\u5143\u7ec4\u201d\uff0c\u5176\u5b9e\u662f\u4e00\u4e2a\u73a9\u610f\u513f\uff0c\u53ea\u662f\u540e\u8005\u542c\u8d77\u6765\u66f4\u52a0\u725b\u3002\u8fd9\u4e0d\u5fc5\u6df1\u7a76\uff0c\u77e5\u9053\u5b83\u5c31\u662f\u52fe\u80a1\u6570\u7ec4\u5373\u53ef\u3002\u800c\u52fe\u80a1\u6570\u7ec4\u4e5f\u5c31\u662f\u628a\u4e09\u4e2a\u6570a,b,c( a^2+b^2=c^2 a^2+b^2=c^2 )\u7528\u5c0f\u62ec\u53f7\u62ec\u8d77\u6765\u800c\u5df2\u3002\u5f88\u7b80\u5355\u5427\uff1f\u6211\u4eec\u4e3e\u51e0\u4e2a\u6817\u5b50\u2014\u2014 a b c 3 4 5 5 12 13 6 8 10 7 24 25 \u8bf6\uff0c(3,4,5)\u3001(6,8,10)\u770b\u7740\u597d\u50cf\uff01emmm \u5b9e\u9645\u4e0a\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u662f\u52fe\u4e09\u80a1\u56db\u5f26\u4e94 \u8fd9\u6837\u5c31\u4e0d\u597d\u73a9\u4e86\u561b\uff09\u5f88\u660e\u663e\uff0c\u5982\u679c\u4e00\u4e2a\u52fe\u80a1\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u540c\u4e58\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5f97\u5230\u7684\u4e09\u5143\u7ec4\u8fd8\u662f\u4e00\u4e2a\u52fe\u80a1\u6570\u7ec4\u3002It's very easy.\u8fd9\u91cc\u7701\u7565\u8bc1\u660e\u8fc7\u7a0b\u3002 \u6240\u4ee5\u8bf4\uff0c\u52fe\u80a1\u6570\u7ec4\u6709\u65e0\u7a77\u4e2a\u3002\u8fd9\u5c31\u4e0d\u597d\u73a9\u4e86\u561b\uff0c\u53ea\u8981\u77e5\u9053\u4e00\u7ec4\u52fe\u80a1\u6570\u7ec4\uff0c\u5c31\u53ef\u4ee5\u63a8\u51fainf\u4e2a\u52fe\u80a1\u6570\u7ec4\u3002\u3002\u3002 \u6700\u6709\u610f\u4e49\u7684\u52fe\u80a1\u6570\u7ec4\uff0c\u5c31\u662f\u5176\u4ed6\u52fe\u80a1\u6570\u7ec4 \\times d(d > 1)) \\times d(d > 1)) \u4e0d\u80fd\u5f97\u5230\u7684\u52fe\u80a1\u6570\u7ec4\u3002\u53ea\u8981\u627e\u5230\u5b83\u4eec\uff0c\u5176\u4ed6\u7684\u52fe\u80a1\u6570\u7ec4\u90fd\u53ef\u4ee5\u7531\u5b83\u4eec\u4e58\u67d0\u4e2a\u6570\u8868\u793a\u51fa\u6765\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5f15\u5165\u672c\u539f\u52fe\u80a1\u6570\u7ec4\u7684\u6982\u5ff5\u3002\u4e0d\u8fc7\u5f88\u9057\u61be\uff0c\u767e\u5ea6\u767e\u79d1\u8bcd\u6761\u91cc\u6ca1\u6709\u3002","title":"\u5b9a\u4e49\u2014\u2014\u52fe\u80a1\u6570\u7ec4"},{"location":"math/pythagorean-triple/#_5","text":"\u672c\u539f\u52fe\u80a1\u6570\u7ec4 (\u7b80\u5199\u4e3aPPT)\u662f\u4e00\u4e2a\u4e09\u5143\u7ec4(a,b,c)\uff0c\u5176\u4e2da,b,c\u6ca1\u6709\u516c\u56e0\u6570\uff0c\u4e14\u6ee1\u8db3 a^2+b^2=c^2 a^2+b^2=c^2 \u2014\u2014\u6458\u81eaJoseph H. Silverman\u300aA Friendly Introduction To Number Theory\u300b \\small \\text{\u63d2\u53e5\u5c0f\u5e7f\u544a\uff0c\u8fd9\u672c\u4e66\u5bf9\u4e8e\u5b66\u4e60\u6570\u8bba\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\uff0c\u4e2d\u6587\u8bd1\u540d\u4e3a\u300a\u6570\u8bba\u6982\u8bba\u300b\u3002} \\small \\text{\u63d2\u53e5\u5c0f\u5e7f\u544a\uff0c\u8fd9\u672c\u4e66\u5bf9\u4e8e\u5b66\u4e60\u6570\u8bba\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\uff0c\u4e2d\u6587\u8bd1\u540d\u4e3a\u300a\u6570\u8bba\u6982\u8bba\u300b\u3002} \u7ed9\u51fa\u4e00\u4e9b\u672c\u539f\u52fe\u80a1\u6570\u7ec4\u3002 (3,4,5)(5,12,13)(8,15,17)(7,24,25)...... \u5b83\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u6027\u8d28\u3002\u5982\u679c\u4f60\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u524d\u4e24\u4e2a\u6570\u4f3c\u4e4e\u603b\u662f\u4e00\u5947\u4e00\u5076\u3002\u3002\u3002 \u8fd9\u4e2a\u547d\u9898\u662f\u6b63\u786e\u7684\uff0c\u6765\u770b\u770b\u5982\u4f55\u8bc1\u660e\u3002 \u5f53a\u3001b\u5747\u4e3a\u5076\u6570\u65f6\uff0cc\u5fc5\u7136\u4e3a\u5076\u6570\uff0c\u5b83\u663e\u7136\u4e0d\u662f\u4e00\u4e2a\u672c\u539f\u52fe\u80a1\u6570\u7ec4\uff0ca\u3001b\u3001c\u6709\u516c\u56e0\u65702\u3002 \u5f53a\u3001b\u5747\u4e3a\u5947\u6570\u65f6\uff0cc\u5fc5\u7136\u4e3a\u5076\u6570\uff0c\u8bbe a=2x+1,b=2y+1,c=2z a=2x+1,b=2y+1,c=2z \u3002 \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7 \\frac{a^2+b^2}2 \\frac{a^2+b^2}2 \u3001 \\frac{c^2}2 \\frac{c^2}2 \u5947\u5076\u6027\u5f97\u51fa\u8fd9\u4e5f\u4e0d\u6210\u7acb\u3002\u8bf7\u8bfb\u8005\u81ea\u884c\u5b8c\u6210\u8bc1\u660e\u3002","title":"\u5b9a\u4e49\u2014\u2014\u672c\u539f\u52fe\u80a1\u6570\u7ec4"},{"location":"math/pythagorean-triple/#_6","text":"\u53ea\u8981\u627e\u51fa\u672c\u539f\u52fe\u80a1\u6570\u7ec4\uff0c\u5176\u5b83\u52fe\u80a1\u6570\u7ec4\u90fd\u53ef\u4ee5\u6c42\u51fa\u3002\u5982\u4f55\u627e\u5462\uff1f \u4e3a\u4e86\u4fbf\u4e8e\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u5199\u7684\u8be6\u7ec6\u4e9b\uff09 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u8ba4\u4e3a\u672c\u539f\u52fe\u80a1\u6570\u7ec4(a,b,c)\u4e2d\uff0ca\u4e3a\u5947\u6570\uff0cb\u4e3a\u5076\u6570\uff0cc\u4e3a\u5947\u6570\u3002 a^2+b^2=c^2 a^2+b^2=c^2 a^2=c^2-b^2=(c+b)(c-b) a^2=c^2-b^2=(c+b)(c-b) \u6211\u4eec\u4ece\u8fd9\u65b9\u9762\u8003\u8651\u3002(c+b)\u4e0e(c-b)\u4e0d\u5e94\u8be5\u5b58\u5728>1\u7684\u516c\u7ea6\u6570\u3002 \u8bc1\u660e\uff1a \\text{\u8bbe}d|(c+b)\\text{\u4e14}d|(c-b) \\\\ \\text{\u5219}d|(c+b+c-b),d|(2c)\\\\ d|(c+b-c+b),d|(2b)\\\\ d^2|a^2\\text{\u5373}d|a\\\\ \\because c\\%2=1,b\\%2=0\\\\ \\therefore (b+c)\\%2=1\\\\ \\therefore d\\text{\u4e0d\u53ef\u80fd\u4e3a\u5076\u6570\uff0c\u5426\u5219}d|(c+b)\\text{\u4e0d\u6210\u7acb}\\\\ \\therefore d|b,d|c\\\\ \\because (a,b,c)\\text{\u662f\u672c\u539f\u52fe\u80a1\u6570\u7ec4}\\\\ \\therefore gcd(a,b,c)=1\\\\ \\therefore d=1 \\text{\u8bbe}d|(c+b)\\text{\u4e14}d|(c-b) \\\\ \\text{\u5219}d|(c+b+c-b),d|(2c)\\\\ d|(c+b-c+b),d|(2b)\\\\ d^2|a^2\\text{\u5373}d|a\\\\ \\because c\\%2=1,b\\%2=0\\\\ \\therefore (b+c)\\%2=1\\\\ \\therefore d\\text{\u4e0d\u53ef\u80fd\u4e3a\u5076\u6570\uff0c\u5426\u5219}d|(c+b)\\text{\u4e0d\u6210\u7acb}\\\\ \\therefore d|b,d|c\\\\ \\because (a,b,c)\\text{\u662f\u672c\u539f\u52fe\u80a1\u6570\u7ec4}\\\\ \\therefore gcd(a,b,c)=1\\\\ \\therefore d=1 \u6211\u4eec\u77e5\u9053\uff0c\u4efb\u4f55\u4e00\u4e2a\u5927\u4e8e1\u7684\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210 \u56fa\u5b9a \u51e0\u4e2a\u7d20\u6570\u7684\u79ef\uff0c\u4e5f\u5c31\u662f\u957f\u8fd9\u6a21\u6837\u2014\u2014 a=p_1^{k1}\\times p_2^{k2}\\times p_3^{k3}\\times p_4^{k4}\\text{......} a=p_1^{k1}\\times p_2^{k2}\\times p_3^{k3}\\times p_4^{k4}\\text{......} a^2 a^2 \u65e2\u7136\u4e3a\u5e73\u65b9\u6570\uff0c\u90a3\u4e48\u5982\u679c\u628a a^2 a^2 \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u5bf9\u4e8e\u4efb\u610fki\uff0c\u90fd\u6709 ki \\equiv0(mod\\ 2) ki \\equiv0(mod\\ 2) \u3002 \u524d\u9762\u63d0\u8fc7\uff0cgcd((c+b),(c-b))=1\uff0c\u6240\u4ee5\u5982\u679c p_1|(c+b) p_1|(c+b) \uff0c p_1|(c-b) p_1|(c-b) \u662f\u4e0d\u53ef\u80fd\u6210\u7acb\u7684\u3002 \u6211\u4eec\u6682\u65f6\u629b\u5f00\u7e41\u7410\u7684\u8bc1\u660e\uff0c\u5c1d\u8bd5\u60f3\u8c61\u3002\u5047\u8bbe\u4f60\u7684\u624b\u91cc\u6709\u4e00\u4e2a\u6570 a^2 a^2 \u3002\u770b\u770b\u80fd\u4e0d\u80fd\u628a\u5b83\u5206\u89e3\u62102\u4e2a\u6ca1\u6709\u516c\u56e0\u6570\u7684\u6570\u3002 \u554a\uff0c\u4e0d\u9519\uff0c\u5206\u6210\u7684\u8fd9\u4e24\u4e2a\u6570\u5c31\u662f(c+b)\u4e0e(c-b)\u3002\u8981\u600e\u4e48\u5206\u5462\uff1f\u6211\u4eec\u4e3e\u4e2a\u6817\u5b50\u3002\u8bd5\u8bd5\u5206\u89e3 10^2 10^2 ? \u5148\u5206\u89e3\u8d28\u56e0\u6570\u3002 10^2=2^2 \\times 5^2 10^2=2^2 \\times 5^2 \u6211\u4eec\u9009\u53d6\u4e00\u4e9b\u8d28\u6570\u7ed9(c+b)\uff0c\u5269\u4e0b\u7684\u8d28\u6570\u5168\u90e8\u7ed9(c-b) \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4ec5\u63a2\u8ba8\u6b63\u6574\u6570\u8303\u56f4\u5185\uff0c\u5206\u89e3\u8981\u6ee1\u8db3(c+b)>(c-b),\u5e76\u4e14\u90fd\u662f\u5076\u6570 \u55ef\uff0c\u8fd9\u597d\u50cf\u53ea\u6709\u4e00\u79cd\u5206\u6cd5 \\to c-b=2^2,c+b=5^2 \\to c-b=2^2,c+b=5^2 \u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u518d\u9009\u51e0\u4e2a\u6570\uff0c\u52a8\u624b\u5c1d\u8bd5\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c c-b c-b \u5982\u679c\u542b\u6709\u8d28\u56e0\u6570p, c-b c-b \u80af\u5b9a\u4e5f\u542b\u6709\u56e0\u6570 p^2 p^2 \u3002 c+b c+b \u4e5f\u662f\u5982\u6b64\u3002\u6240\u4ee5\uff0c (c-b) (c-b) \u4e0e (c+b) (c+b) \u4e00\u5b9a\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u3002 \u6765\u5427\uff0c\u51b2\u5411\u80dc\u5229\uff01 \u6211\u4eec\u8bbe s^2=c+b,t^2=c-b(s>b) s^2=c+b,t^2=c-b(s>b) \u6211\u4eec\u628a\u4e0a\u9762\u4fe9\u5f0f\u5b50\u52a0\u4e00\u52a0\u3001\u51cf\u4e00\u51cf\u2014\u2014\u54c7\uff01 2c={s^2+t^2},c=\\frac {s^2+t^2}2 2c={s^2+t^2},c=\\frac {s^2+t^2}2 2b={s^2-t^2},b=\\frac {s^2-t^2}2 2b={s^2-t^2},b=\\frac {s^2-t^2}2 \\because a^2=(c+b)\\times(c-b) \\because a^2=(c+b)\\times(c-b) \\therefore a^2=s^2\\times t^2 \\therefore a^2=s^2\\times t^2 \\therefore a=st \\therefore a=st","title":"\u5982\u4f55\u627e\u672c\u539f\u52fe\u80a1\u6570\u7ec4"},{"location":"math/pythagorean-triple/#_7","text":"\u6bcf\u4e2a\u672c\u539f\u52fe\u80a1\u6570\u7ec4(a,b,c)(\u5176\u4e2da\u4e3a\u5947\u6570\uff0cb\u4e3a\u5076\u6570)\uff0c\u90fd\u53ef\u4ece\u5982\u4e0b\u516c\u5f0f\u5f97\u51fa\u3002 \\large a=st,b=\\frac {s^2-t^2}2,c=\\frac {s^2+t^2}2 \\large a=st,b=\\frac {s^2-t^2}2,c=\\frac {s^2+t^2}2 \u5176\u4e2d s >t \\ge 0 s >t \\ge 0 \u662f\u4efb\u610f\u6ca1\u6709\u516c\u56e0\u6570\u7684\u5947\u6570\u3002 \u5f53\u7136\uff0c\u4ee5\u4e0a\u8bc1\u660e\u662f\u4e0d\u5b8c\u6574\u7684\u3002\u6211\u4eec\u8fd8\u8981\u8bc1\u660ea\u3001b\u3001c\u6ca1\u6709\u516c\u56e0\u6570\u3002 \u6211\u4eec\u8fd0\u7528\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe gcd(st,\\frac{s^2-t^2}2,\\frac{s^2+t^2}2)\\not=1 gcd(st,\\frac{s^2-t^2}2,\\frac{s^2+t^2}2)\\not=1 \u6211\u4eec\u5047\u8bbe\u8d28\u6570 p|(st) p|(st) , p p \u80af\u5b9a\u4e3a s s \u6216 t t \u7684\u4e00\u4e2a\u8d28\u56e0\u6570\u3002 \u5047\u8bbe p p \u4e3a s s \u7684\u4e00\u4e2a\u8d28\u56e0\u6570\uff0c p p \u80af\u5b9a\u4e0d\u4e3a t t \u7684\u8d28\u56e0\u6570\u3002\u8fd9\u5341\u5206\u660e\u663e\uff0c\u56e0\u4e3as\u3001r\u4e92\u8d28\u561b\uff09 \\frac{s^2-t^2}2=\\frac{(s+t)(s-t)}2 \\frac{s^2-t^2}2=\\frac{(s+t)(s-t)}2 \u7531 s\\%p=0,t\\%p\\not=0 s\\%p=0,t\\%p\\not=0 \u53ef\u77e5 (s+t)\\%p\\not=0,(s-t)\\%p\\not=0 (s+t)\\%p\\not=0,(s-t)\\%p\\not=0 \\therefore (\\frac{s^2+t^2}2)\\%p\\not=0 \\therefore (\\frac{s^2+t^2}2)\\%p\\not=0 \u82e5 p p \u4e3a t t \u7684\u8d28\u56e0\u6570\uff0c\u8bc1\u660e\u8fc7\u7a0b\u51e0\u4e4e\u548c\u4e0a\u9762\u4e00\u6a21\u4e00\u6837\uff0c\u8bf7\u8bfb\u8005\u81ea\u884c\u5b8c\u6210\u3002 \u6240\u4ee5\uff0c\u5bf9\u4e8e st st \u7684\u4efb\u610f\u8d28\u56e0\u6570\uff0c\u90fd\u4e0d\u80fd\u6574\u9664 \\frac{s^2-t^2}2 \\frac{s^2-t^2}2 ,\u5373 gcd(st,\\frac{s^2-t^2}2)=1 gcd(st,\\frac{s^2-t^2}2)=1 \u7efc\u4e0a\u6240\u8ff0\uff0c gcd(st,\\frac{s^2-t^2}2,\\frac{s^2+t^2}2)\\not=1 gcd(st,\\frac{s^2-t^2}2,\\frac{s^2+t^2}2)\\not=1 \u4e0d\u6210\u7acb\uff0c\u539f\u547d\u9898\u6b63\u786e\u3002 QED.","title":"\u52fe\u80a1\u6570\u7ec4\u5b9a\u7406"},{"location":"math/pythagorean-triple/#_8","text":"\u6211\u4eec\u4f1a\u627e\u672c\u539f\u52fe\u80a1\u6570\u7ec4\uff0c\u81ea\u7136\u627e\u51fa\u4e86\u6240\u6709\u52fe\u80a1\u6570\u7ec4\u3002 \u4e0d\u8fc7\uff0c\u8fd8\u6709\u4e00\u79cd\u795e\u5947\u7684\u65b9\u6cd5\uff0c\u5df2\u77e5 c c \uff0c\u53ef\u4ee5\u5728 O(\\sqrt c) O(\\sqrt c) \u7684\u65f6\u95f4\u5185\u6c42\u51fa\u6ee1\u8db3 a^2+b^2=c^2 a^2+b^2=c^2 \u7684 a a \u3001 b b \u4e2a\u6570\u3002 \u8fd9\u91cc\u653e\u4e2a \u94fe\u63a5 \uff0c\u91cc\u9762\u8bb2\u7684\u8fd8\u662f\u5f88\u4e0d\u9519\u7684QAQ~~(\u80af\u5b9a\u8bb2\u7684\u6bd4\u6211\u597d) \uff0c\u5f3a\u70c8\u5efa\u8bae\u7ae5\u978b\u4eec\u53bbHave a look\u3002 ~~\u987a\u4fbf\u5207\u9053\u7d2b\u9898 P2508 [HAOI2008]\u5706\u4e0a\u7684\u6574\u70b9 \u3002","title":"\u5982\u4f55\u627e\u52fe\u80a1\u6570\u7ec4"},{"location":"math/pythagorean-triple/#_9","text":"","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"math/pythagorean-triple/#_10","text":"\u9ad8\u65af\u6574\u6570\uff08gaussian integer\uff09\u662f\u5b9e\u6570\u90e8\u5206\uff08\u5b9e\u90e8\uff09\u548c\u865a\u6570\u90e8\u5206\uff08\u865a\u90e8\uff09\u90fd\u662f\u6574\u6570\u7684\u590d\u6570\u3002\u4e5f\u5c31\u662f\u590d\u5e73\u9762\u4e2d\u70b9\u96c6{a+bi|a,b \u90fd\u662f\u6574\u6570}\u3002\u6240\u6709\u9ad8\u65af\u6574\u6570\u7ec4\u6210\u4e86\u4e00\u4e2a\u6574\u73af\uff0c\u5199\u4f5cZ\u3002\u5b83\u662f\u4e2a\u4e0d\u53ef\u4ee5\u8f6c\u6210\u6709\u5e8f\u73af\u7684\u6b27\u51e0\u91cc\u5fb7\u6574\u73af\uff0c\u6240\u4ee5\u662f\u552f\u4e00\u56e0\u5b50\u5206\u89e3\u6574\u73af\u3002 \u4e5f\u5c31\u662f\u5728\u8fd9\u4e2a\u6574\u73af\u4e2d\uff0c\u5982\u540c\u6574\u6570\u96c6\u4e00\u6837\uff0c\u53ef\u4ee5\u5b58\u5728\u552f\u4e00\u56e0\u5b50\u5206\u89e3\u5b9a\u7406\u3002 \u2014\u2014\u6458\u81ea\u767e\u5ea6\u767e\u79d1","title":"\u9ad8\u65af\u6574\u6570"},{"location":"math/pythagorean-triple/#_11","text":"\u5947\u7d20\u6570p\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u5e73\u65b9\u548c\uff0c\u5f53\u4e14\u4ec5\u5f53p\u662f4k+1\u578b\u7684\u3002\u5e76\u4e14\u5728\u4e0d\u8003\u8651\u4e24\u4e2a\u6b63\u6574\u6570\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u8868\u793a\u65b9\u6cd5\u552f\u4e00\u3002\u2014\u2014\u6458\u81ea\u4e0a\u9762\u94fe\u63a5\u7684\u8bc4\u8bba \u5947\u8d28\u6570\u80fd\u8868\u793a\u4e3a\u4e24\u4e2a\u5e73\u65b9\u6570\u4e4b\u548c\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662f\u8be5\u8d28\u6570\u88ab4\u9664\u4f591\u2014\u2014\u6458\u81ea\u767e\u5ea6\u767e\u79d1 \u7531\u4e8e\u8d39\u9a6c\u5e73\u65b9\u548c\u5b9a\u7406\u8bc1\u660e\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u627e\u5230\u7684\u4e00\u4e9b\u7b80\u5355\u7684\u8bc1\u660e\u90fd\u662f\u7247\u9762\u6216\u9519\u8bef\u7684\uff0c\u5b8c\u5168\u7684\u8bc1\u660e\u4f3c\u4e4e\u8981\u52065\u6b65\uff0c\u8bf7\u81ea\u884c\u4e86\u89e3\uff0c\u8fd9\u91cc\u4e0d\u4ed4\u7ec6\u8bb2\u3002 a^2+b^2=c^2 a^2+b^2=c^2 \uff0c\u6216\u8005\u66f4\u5e7f\u6cdb\u5730\uff0c a^2+b^2=c(\\text{a\u3001b\u3001c\u90fd\u4e3a\u6574\u6570(\u4e0d\u4e00\u5b9a\u662f\u6b63\u7684)}) a^2+b^2=c(\\text{a\u3001b\u3001c\u90fd\u4e3a\u6574\u6570(\u4e0d\u4e00\u5b9a\u662f\u6b63\u7684)}) (\u8fd9\u91cc\u6211\u4eec\u9009\u540e\u8005\u4e3a\u4f8b)\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\uff0c\u4e00\u4e2a\u4ee5O\u4e3a\u5706\u5fc3\u3001\u4ee5 \\sqrt c \\sqrt c \u4e3a\u5706\u5fc3\u7684\u5706\u7ecf\u8fc7\u51e0\u4e2a\u683c\u70b9\u3002(\u8fd9\u91cc\u4e3a\u4e86\u66f4\u65b9\u4fbf\uff0ca\u3001b\u3001c\u90fd\u4e3a \u6574\u6570 \uff0c\u4e0d\u4e00\u5b9a\u8981\u6b63\u6574\u6570\uff0c\u53ef\u4ee5\u662f0\u3001\u8d1f\u6574\u6570)\u3002 \u6211\u4eec\u628a\u5706\u653e\u5728\u590d\u6570\u5e73\u9762\u4e2d(x\u8f74\u4e3a\u5b9e\u6570\u8f74\uff0cy\u8f74\u4e3a\u865a\u6570\u8f74)\u3002 \u7136\u540e\u5c31\u6709\u60ca\u559c\u3002\u6ce8\u610f\uff1a\u4ee5\u4e0b\u53d9\u8ff0\u90fd\u662f\u5728\u590d\u6570\u5e73\u9762\u4e2d\uff0c\u4e0d\u518d\u662f\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff09 \u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u2014\u2014 c=25 c=25 \u5728\u4e0a\u9762\u90a3\u4e2a\u94fe\u63a5\u89c6\u9891\u4e2d\u63d0\u5230XX\u7684\u6a21\uff0c\u6211\u7684\u7406\u89e3\u4e3aXX\u4e0e\u539f\u70b9\u7684\u8ddd\u79bb\uff09 \u5f88\u660e\u663e\uff0c\u4ee5 \\sqrt c \\sqrt c \u4e3a\u534a\u5f84\u7684\u5706\u7ecf\u8fc7\u7684\u683c\u70b9\u6709 (0+5i),(3+4i),(4+3i),(5+0i),(4-3i),(3-4i),(0-5i),(-3-4i),(-4-3i),(-5+0i),(-4+3i),(-3+4i) (0+5i),(3+4i),(4+3i),(5+0i),(4-3i),(3-4i),(0-5i),(-3-4i),(-4-3i),(-5+0i),(-4+3i),(-3+4i) \u517112\u4e2a\u3002 (3+4i),(3-4i) (3+4i),(3-4i) \u8fd9\u7c7b\u5173\u4e8e\u5b9e\u6570\u8f74\u5bf9\u79f0\u7684\u70b9\u4e92\u4e3a\u201c\u590d\u5171\u8f68\u201d\u3002 (3+4i) (3+4i) \u7684\u6a21\u662f5\uff0c\u8bbe\u5b83\u4e0e\u5b9e\u6570\u8f74\u5448 \\alpha \\alpha , (3-4i) (3-4i) \u7684\u6a21\u4e5f\u662f5\uff0c\u5b83\u4e0e\u5b9e\u6570\u8f74\u5448 -\\alpha -\\alpha \uff0c\u5f88\u660e\u663e\uff0c\u5b83\u4eec\u76f8\u4e58\u5f97\u5230\u7684\u7ed3\u679c\u4e0e\u5b9e\u6570\u8f74\u5448 \\alpha - \\alpha=0 \\alpha - \\alpha=0 \u5ea6\uff0c\u800c (3+4i)(3-4i) (3+4i)(3-4i) \u7684\u6a21(\u5176\u5b9e\u548c\u6570\u503c\u662f\u4e00\u6837\u7684)\u4e3a 25 25 \uff0c\u4e5f\u5c31\u662f c c \u3002\u5f88\u660e\u663e\uff0c\u50cf\u8fd9\u6837\u683c\u70b9(\u4e5f\u5c31\u662f(a+bi)(a-bi)=c)\u90fd\u662f\u5728\u5706\u4e0a\u7684\u3002\u8fd9\u6837\uff0c\u95ee\u9898\u5c31\u8f6c\u6362\u4e3a\u591a\u5c11\u4e2a\u9ad8\u65af\u6574\u6570\u4e0e\u5176\u590d\u5171\u8f68\u4e4b\u79ef\u4e3a c c \u3002 \u600e\u4e48\u89e3\u51b3\u5462\uff1f\u8fd9\u5c31\u7528\u5230\u524d\u7f6e\u77e5\u8bc6\u4e2d\u7684 \u8d39\u9a6c\u5e73\u65b9\u548c\u5b9a\u7406 \uff0c\u4e0d\u719f\u6089\u7684\u7ae5\u978b\u53ef\u4ee5\u518d\u53bb\u770b\u770b\u3002 \u6211\u4eec\u628a\u4e0d\u80fd\u518d\u5206\u89e3\u7684\u9ad8\u65af\u6574\u6570\u79f0\u4e3a\u201c\u9ad8\u65af\u7d20\u6570\u201d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9ad8\u65af\u7d20\u6570\u67093\u79cd\uff1a 4k+3\u578b\u7684\u7d20\u6570 4k+1\u578b\u7d20\u6570\u5206\u89e3\u51fa\u7684\u4e24\u4e2a\u9ad8\u65af\u6574\u6570 2 \u6839\u636e \u8d39\u9a6c\u5e73\u65b9\u548c\u5b9a\u7406 \uff0c\u4e00\u4e2a4k+1\u578b\u7684\u7d20\u6570\u53ef\u4ee5\u5206\u89e3\u6210 (a+bi)(a-bi) (a+bi)(a-bi) \uff0c\u5f88\u660e\u663e\uff0c\u8fd9\u4e24\u4e2a\u7d20\u6570\u4e92\u4e3a\u590d\u5171\u8f68\u3002 \u5982\u679c\u4e00\u4e2a\u6570\u8d28\u56e0\u5b50\u4e2d\u53ea\u67094k+1\u578b\u7684\u7d20\u6570\uff0c\u50cf\u6211\u4eec\u4e3e\u4f8b\u768425\uff0c\u90a3\u5c31\u597d\u529e\u4e86\u3002 \u50cf\u8fd9\u6837\uff0c\u5c06\u5b83\u5206\u89e3\u6210\u82e5\u5e72\u9ad8\u65af\u7d20\u6570\u7684\u4e58\u79ef(\u5f88\u660e\u663e\uff0c\u8fd9\u662f\u552f\u4e00\u7684)\uff0c\u5e76\u5c06\u4e92\u4e3a\u590d\u5171\u8f68\u7684\u4e00\u5bf9\u9ad8\u65af\u7d20\u6570\u5199\u4e24\u8fb9\uff0c\u5de6\u8fb9\u6240\u6709\u9ad8\u65af\u7d20\u6570\u7684\u4e58\u79ef\u4e0e\u53f3\u8fb9\u7684\u4e58\u79ef\u4e92\u4e3a\u590d\u5171\u8f68\u3002\u8981\u4f7f\u5de6\u53f3\u4e58\u79ef\u7ee7\u7eed\u4fdd\u6301\u4e92\u4e3a\u590d\u5171\u8f68\uff0c\u53ea\u80fd\u4ea4\u6362\u4e00\u5bf9\u4e92\u4e3a\u590d\u5171\u8f68\u7684\u9ad8\u65af\u7d20\u6570\u7684\u4f4d\u7f6e\uff08\u8fd9\u4e2a\u4e0d\u96be\u7406\u89e3\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff0c\u5bf9\u4e8e\u76f8\u540c\u7684\u9ad8\u65af\u7d20\u6570(\u6211\u6307\u7684\u662f\u6210\u5bf9\u7684)\uff0c\uff08\u5c31\u6bd4\u5982 (1+2i) (1+2i) \uff09\uff0c\u5b83\u5728\u5de6\u8fb9\u53ef\u4ee5\u653e0\u4e2a\uff0c\u653e1\u4e2a\uff0c\u653e2\u4e2a\u2026\u2026\u5f53\u7136\uff0c\u4e0d\u662f\u4f60\u60f3\u653e\u5c31\u968f\u4fbf\u653e\u7684\uff0c\u628a1\u4e2a\u653e\u5230\u5de6\u8fb9\u7684\u540c\u65f6\uff0c\u8981\u628a\u5b83\u7684\u590d\u5171\u8f68\u79fb\u4e00\u4e2a\u5230\u53f3\u8fb9\uff0c\u4ee5\u4fdd\u6301\u5de6\u53f3\u4e58\u79ef\u4ecd\u4e92\u4e3a\u590d\u5171\u8f68\u3002\u8fd9\u6837\uff0c\u5982\u679c\u603b\u5171\u6709p\u4e2a\uff0c\u5c31\u6709(p+1)\u79cd\u653e\u6cd5\u3002\u7136\u540e\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u9ad8\u65af\u7d20\u6570(\u5f53\u7136\uff0c\u5904\u7406\u8fc7\u4e00\u4e2a\u9ad8\u65af\u7d20\u6570\uff0c\u4e0d\u5fc5\u518d\u5904\u7406\u5b83\u7684\u590d\u5171\u8f68)\u3002\u6700\u540e\uff0c\u4e3a\u4e86\u907f\u514d\u91cd\u590d\uff0c\u6211\u4eec\u53ea\u53d6\u5de6\u8fb9\u7684\u4e58\u79ef\u4f5c\u4e3a\u7ed3\u679c\u3002\u7136\u9e45\uff0c\u4e8b\u60c5\u5e76\u975e\u8fd9\u4e48\u7b80\u5355\u3002\u5982\u679c\u4f60\u8fd9\u4e48\u7b97\uff0c25\u5f97\u5230\u7684\u7ed3\u679c\u4e3a (2+1)=3 (2+1)=3 \u3002\u624d\u8fd9\u4e48\u70b9\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4f60\u5728\u5de6\u3001\u53f3\u5206\u522b\u4e58\u4e0a-1\u4e0e-1\u3001i\u4e0e-i\u3001-i\u4e0ei\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e0d\u540c\u7684\uff0c\u800c\u4e14\u5f88\u663e\u7136\uff0c\u5b83\u4eec\u90fd\u662f\u5bf9\u7684\u3002\u4f46\u662f\u5b83\u4eec\u7684\u672c\u8d28\u662f\u76f8\u540c\u7684\u3002\u5c31\u597d\u6bd4 3\\times4=12 3\\times4=12 \uff0c (-3)\\times(-4)=12 (-3)\\times(-4)=12 \u4e00\u6837\u3002\u6240\u4ee5\uff0c\u6700\u540e\u7684\u7ed3\u679c\u8981\u4e584\u3002 4k+3\u578b\u7684\u7d20\u6570\u5df2\u7ecf\u662f\u9ad8\u65af\u7d20\u6570\uff0c\u800c\u4e14\u5b83\u7684\u590d\u5171\u8f68\u5c31\u662f\u672c\u8eab\uff0c\u56e0\u6b64\uff0c\u53ea\u80fd\u5c06\u5b83\u5e73\u5747\u5206\u914d\u7ed9\u5de6\u8fb9\u548c\u53f3\u8fb9\u3002\u5982\u679c\u67d0\u4e2a\u8fd9\u79cd\u7d20\u6570\u6709\u5947\u6570\u4e2a\uff0c\u4e0d\u80fd\u5e73\u5747\u5206\u914d\u7ed9\u5de6\u53f3\uff0c\u90a3\u5f88\u9057\u61be\uff0c\u4e00\u4e2a\u89e3\u4e5f\u6ca1\u6709\u3002 \u5bf9\u4e8e\u7d20\u65702\uff0c\u5b83\u80fd\u5206\u89e3\u6210\u4e24\u4e2a\u9ad8\u65af\u7d20\u6570 (1-i)(1+i) (1-i)(1+i) \uff0c\u4f46\u662f\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c -i\\times(1-i)=(1+i) -i\\times(1-i)=(1+i) \uff0c\u5982\u679c\u5c06 (1-i) (1-i) \u4e0e (1+i) (1+i) \u4e92\u6362\u4f4d\u7f6e\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4e58 -i -i \uff0c\u53e6\u4e00\u4e2a\u4e58 i i \uff0c\u5b83\u4eec\u7684\u672c\u8d28\u8fd8\u662f\u6ca1\u6709\u53d8\uff0c\u6240\u4ee5\uff0c\u7d20\u65702 \u4e0d\u5f71\u54cd\u7ed3\u679c \u3002 \u6765\u770b\u770b[HAOI2008]\u5706\u4e0a\u7684\u6574\u70b9\uff0c\u56e0\u4e3a\u8fd9\u9898\u4e2d\u534a\u5f84r\u4e3a\u6b63\u6574\u6570\uff0c\u6240\u4ee5 r^2 r^2 \u6240\u542b\u7684 4k+3 4k+3 \u90fd\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c c^2\\%p=0 c^2\\%p=0 \uff0c\u90a3\u4e48 c^2\\%p^2=0 c^2\\%p^2=0 \uff0c\u6240\u4ee5\u76f4\u63a5\u5ffd\u7565 2 2 \u4e0e 4k+3 4k+3 \u578b\u7d20\u6570\u3002\u5982\u4f55\u5904\u7406 4k+1 4k+1 \u7684\u7d20\u6570\uff0c\u8bf7\u53c2\u7167\u4e0a\u6587\u3002\uff08\u627e\u8d28\u56e0\u6570\u4e0d\u5fc5\u8bb2\u4e86\u5427","title":"\u8d39\u9a6c\u5e73\u65b9\u548c\u5b9a\u7406"},{"location":"math/pythagorean-triple/#_12","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; #define LL long long LL R , N , ans ( 1 ); int main (){ scanf ( \"%lld\" , & R ); N = R ; if ( R == 0 ){ printf ( \"1 \\n \" ); return 0 ; } //\u70b9\u5706 while ( R % 2 == 0 ) R >>= 1 ; //\u8d28\u56e0\u65702\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848 for ( LL i = 3 ; i * i <= N ; i += 2 ){ LL cnt ( 0 ); while ( R % i == 0 ) cnt ++ , R /= i ; //\u6570\u51fai\u7684\u5e42 if ( i % 4 == 1 ) ans *= ( cnt * 2 + 1 ); //i\u662f\u53ef\u4ee5\u5206\u89e3\u62102\u4e2a\u9ad8\u65af\u7d20\u6570\u7684\u8d28\u56e0\u6570\uff0c\u800c\u4e14\u5728N\u4e2d\u5b83\u7684\u5e42\u662fcnt,\u5b83\u5728N^2\u4e2d\u5b83\u7684\u5e42\u5c31\u662f2*cnt\u3002 } //\u5f88\u660e\u663e\uff0c> sqrt(N) \u7684\u8d28\u56e0\u6570\u6700\u591a\u6709\u4e00\u4e2a if ( R > 1 && R % 4 == 1 ) ans *= 3 ; //3 = 1 * 2 + 1 printf ( \"%lld\" , ans << 2 ); //*1, *(-1), *i, *(-i) return 0 ; }","title":"\u4ee3\u7801"},{"location":"math/pythagorean-triple/#_13","text":"\u8fd9\u91cc\u8fd8\u662f\u5047\u8bbe\u672c\u539f\u52fe\u80a1\u6570\u7ec4(a,b,c)\u4e2d\uff0ca\u4e3a\u5947\u6570\u3002 c-a=2t^2,t\\text{\u4e3a\u4e00\u6574\u6570} c-a=2t^2,t\\text{\u4e3a\u4e00\u6574\u6570} \u8fd9\u4e2a\u8bc1\u660e\u601d\u8def\u4e0e\u4e0a\u9762\u5341\u5206\u76f8\u4f3c\u3002\u53ea\u8981\u628a a^2 a^2 \u79fb\u5230\u53f3\u8fb9instead of b^2 b^2 \u5373\u53ef\u3002 Very easy. \u7ed9\u4e2a\u5f00\u5934\uff0c\u8bf7\u81ea\u884c\u8bc1\u660e\u3002\u5f53\u7136\uff0c\u8fd9\u4e5f\u80fd\u5728 \u6240\u6709 \u52fe\u80a1\u6570\u7ec4\u4e2d\u9002\u7528) $$ b 2=c 2-a^2=(c+a)(c-a) $$ a \\equiv 0(mod \\ 3)\\text{\u6216}b \\equiv 0(mod\\ 3) a \\equiv 0(mod \\ 3)\\text{\u6216}b \\equiv 0(mod\\ 3) \u8fd9\u91cc\u611f\u8c22@ LJC00118 Rank1\u5946\u4f6c\u6559\u4f1a\u6211\u5982\u4f55\u8bc1\u660e\u3002\u8fd9\u91cc\u58f0\u660e\u4e00\u4e0b\uff0c\u6211\u7edd\u5bf9\u6ca1\u6709\u7167\u642c\u7167\u6284) \u8bc1\u660e\uff1a \u6709\u4e00\u4e2a\u5b9a\u7406 a^2\\%3=0\\text{\u6216}1 a^2\\%3=0\\text{\u6216}1 \uff0c\u8fd9\u5341\u5206\u597d\u8bc1\uff0c\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\uff0c\u8fd9\u91cc\u7701\u7565\u8bc1\u660e\u3002 \u5047\u8bbe\u8be5\u5b9a\u7406\u4e0d\u6210\u7acb\uff0c \u5373 a \\not= 0\\text{\u4e14}b\\not=0 a \\not= 0\\text{\u4e14}b\\not=0 \\therefore a^2\\%3=1 \\therefore a^2\\%3=1 b^2\\%3=1 b^2\\%3=1 \\therefore(a^2+b^2)\\%3=2 \\therefore(a^2+b^2)\\%3=2 \\therefore c^2\\%3=2 \\therefore c^2\\%3=2 \u8fd9\u4e0e c^2\\%3=0\\text{\u6216}1 c^2\\%3=0\\text{\u6216}1 \u77db\u76fe\uff0c\u56e0\u6b64\u8be5\u5b9a\u7406\u6210\u7acb QED. \u8fd8\u6709\u4e24\u6761\u4e0d\u5e38\u7528\u7684\u6027\u8d28\uff0c\u4e86\u89e3\u5373\u53ef\u3002 a^4b^4+b^4c^4+c^4a^4=L^2 a^4b^4+b^4c^4+c^4a^4=L^2 a^8+b^8+c^8=2L^2 a^8+b^8+c^8=2L^2","title":"\u4e00\u4e9b\u5176\u4ed6\u6027\u8d28"},{"location":"math/pythagorean-triple/#_14","text":"\u8d39\u9a6c\u5728\u67d0\u672c\u4e66\u7684\u8fb9\u6cbf\u4e0a\u5199\u9053\u3002 \u4e0d\u53ef\u80fd\u5c06\u4e00\u4e2a3\u6b21\u65b9\u5206\u6210\u4e24\u4e2a3\u6b21\u65b9\u4e4b\u548c\uff1b\u4e00\u4e2a4\u6b21\u65b9\u4e0d\u53ef\u80fd\u5199\u6210\u4e24\u4e2a4\u6b21\u65b9\u4e4b\u548c\uff1b\u4e00\u822c\u5730\uff0c\u4efb\u4f55\u9ad8\u4e8e2\u6b21\u7684\u5e42\u4e0d\u53ef\u80fd\u5199\u6210\u4e24\u4e2a\u540c\u6b21\u5e42\u4e4b\u548c.\u6211\u5df2\u53d1\u73b0\u4e00\u4e2a\u7f8e\u5999\u7684\u8bc1\u660e\uff0c\u8fd9\u91cc\u7a7a\u767d\u592a\u5c0f\u5199\u4e0d\u4e0b \u4e5f\u5c31\u662f\u8bf4\uff0c a^n+b^n=c^n(n>2) a^n+b^n=c^n(n>2) \u6ca1\u6709\u6b63\u6574\u6570\u89e3\u3002\u8fd9\u5c31\u662f\u8d6b\u8d6b\u6709\u540d\u7684\u8d39\u9a6c\u5927\u5b9a\u7406\u3002 W(\uffe3_\uffe3)W\u3002\u3002\u3002\u8fd9\u662f\u4e00\u4e2a\u4e16\u7eaa\u96be\u9898\uff0c1986\u5e74\u624d\u88ab\u89e3\u51b3\u3002\u3002\u3002\u5927\u5bb6\u4e86\u89e3\u5373\u53ef\uff0c\u4e86\u89e3\u5373\u53ef\uff0c\u5982\u679c\u60a8\u8bc1\u51fa\u6765\u4e86\uff0c\u6211\u53ea\u80fd\u819c\u62dc\u5927\u4ed9\u3002\u5982\u679c\u771f\u7684\u78b0\u5230\u7c7b\u4f3c\u4e8e\u8fd9\u6837\u7684\u5f0f\u5b50\uff0c\u76f4\u63a5\u62ff\u51fa\u6765\u7528\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u8981\u50bbfufu\u5730\u53bb\u8bc1\u660e\u3002","title":"\u5173\u4e8e\u8d39\u9a6c\u5927\u5b9a\u7406"},{"location":"math/pythagorean-triple/#_15","text":"\u8fd9\u91cc\u518d\u589e\u52a0\u4e00\u4e9b\u77e5\u8bc6\u70b9\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u63a8\u51fa\u52fe\u80a1\u6570\u7ec4\u5b9a\u7406\u3002 a^2+b^2=c^2 \\to (\\frac ac)^2+(\\frac bc)^2=1 a^2+b^2=c^2 \\to (\\frac ac)^2+(\\frac bc)^2=1 \u8fd9\u6837\u5c31\u8f6c\u6362\u4e3a\u5982\u4f55\u627e\u51fa x^2+y^2=1 x^2+y^2=1 \u7684\u6240\u6709 \u6709\u7406\u6570 \u89e3 \u6211\u4eec\u4ee5(0,0)\u4e3a\u5706\u5fc3\uff0cr=1\u4e3a\u534a\u5f84\u753b\u5706\u3002 \u5f88\u660e\u663e\uff0c\u70b9(1,0)\u662f\u4e00\u4e2a\u89e3\u3002\u6211\u4eec\u8fc7\u70b9(1,0)\u4f5c\u76f4\u7ebfy=mx-m \u7136\u540e\u5c31\u53ef\u4ee5\u89e3\u65b9\u7a0b\u7ec4\u8fa3 m(x-1)=y m(x-1)=y x^2+y^2=1 x^2+y^2=1 \u5f97 (m^2+1)x^2-2m^2x+m^2-1=0 (m^2+1)x^2-2m^2x+m^2-1=0 \u7531\u4e8ex=1\u662f\u4e00\u4e2a\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5f0f\u5b50\u5206\u89e3\u3002 \u5f97\u5230 (x-1)[(m^2+1)x-(m^2 - 1)] (x-1)[(m^2+1)x-(m^2 - 1)] \u7b97\u4e86\u534a\u5929 \u547c\u3002\u3002\u3002) (m^2+1)x-(m^2-1)=0 (m^2+1)x-(m^2-1)=0 (m^2+1)x=m^2-1 (m^2+1)x=m^2-1 x=\\frac{m^2-1}{m^2+1} x=\\frac{m^2-1}{m^2+1} y=\\frac {-2m}{m^2+1} y=\\frac {-2m}{m^2+1} \u5f53\u7136\uff0c\u5982\u679c\u9009\u53d6(-1, 0)\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u6837\u6c42\u51fa\u6765\u7684\u7b54\u6848\u6709\u70b9\u4e0d\u4e00\u6837\u3002 x=\\frac{1-m^2}{1+m^2} x=\\frac{1-m^2}{1+m^2} y=\\frac {2m}{1+m^2} y=\\frac {2m}{1+m^2} \u8fd9\u4e24\u4e2a\u5f0f\u5b50\u51e0\u4e4e\u662f\u7b49\u6548\u7684\u3002\u5982\u679c\u8bbe\u524d\u4e00\u4e2a\u5f0f\u5b50\u4e2d\u7684 m m \u4e3a m_1 m_1 \uff0c\u540e\u4e00\u4e2a\u4e3a m_2 m_2 \u5f53 m_1=-\\frac 1 {m_2} m_1=-\\frac 1 {m_2} \u65f6\uff0c\u8fd9\u4e24\u4e2a\u5f0f\u5b50\u6c42\u51fa\u7684\u5750\u6807\u662f\u4e00\u6837\u7684\u3002\uff08\u5f53\u7136\uff0c\u524d\u63d0\u662fm\u4e0d\u4e3a0\uff09 \u5341\u5206\u795e\u5947\uff0cright\uff1f \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u63cf\u8ff0\u6240\u6709\u52fe\u80a1\u6570\u7ec4\u3002 \u6211\u4eec\u4ee4 m=\\frac vu m=\\frac vu \u4ee3\u5165\u6c42\u503c\uff08\u4e0b\u9762\u7684\u5f0f\u5b50\uff09\u2014\u2014 \\huge x=\\frac{1-m^2}{1+m^2}=\\frac{1-(\\frac vu)^2}{1+(\\frac vu)^2}=\\frac{u^2-v^2}{u^2+v^2} \\huge x=\\frac{1-m^2}{1+m^2}=\\frac{1-(\\frac vu)^2}{1+(\\frac vu)^2}=\\frac{u^2-v^2}{u^2+v^2} \\huge y = \\frac{2(\\frac vu)}{1+(\\frac vu)^2}=\\frac{2uv}{u^2+v^2} \\huge y = \\frac{2(\\frac vu)}{1+(\\frac vu)^2}=\\frac{2uv}{u^2+v^2} \u8fd9\u6837\u6211\u4eec\u5f97\u5230\u4e00\u7ec4\u52fe\u80a1\u6570\u3002 (2uv,u^2-v^2,u^2+v^2) (2uv,u^2-v^2,u^2+v^2) \u4e4b\u524d\u5fd8\u4e86\u8bf4\u660e\u8fd9\u662f\u6709\u7406\u6570\uff0c\u73b0\u5728\u8865\u4e0a\u3002 \u7ed9\u5927\u5bb6\u4e00\u4e2a\u8868\u683c(\u6765\u6e90: https://www.bilibili.com/video/av29019452/?p=9 ) \u4e5f\u5c31\u662f\u8bf4\uff0c\u6709\u7406\u6570(RATIONAL)\u4e0e\u6709\u7406\u6570\u7ecf\u8fc7\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97\u540e\u8fd8\u662f\u6709\u7406\u6570\uff0c\u7531\u4e8e\u5e73\u65b9\u8fd0\u7b97\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u6709\u7406\u6570\u81ea\u5df1\u4e58\u81ea\u5df1\uff0c\u5c5e\u4e8e\u4e58\u6cd5 \uff08\u6574\u6570\u6b21\u5e42\u90fd\u53ef\u4ee5\u770b\u6210\u4e58\u6cd5\uff09\uff0c\u6240\u4ee5\uff0c\u4e0a\u8ff0\u5f0f\u5b50\u539f\u6765\u7684\u53d8\u91cf\u53ea\u6d89\u53ca\u5b9e\u6570\u7684\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\u8fd0\u7b97\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u8fd8\u662f\u6709\u7406\u6570\u3002 \u53ea\u8981\u4f60\u5b9a\u4e49\u7684m\u6ee1\u8db3\u662f\u6709\u7406\u6570\uff0c\u4e0a\u9762\u63d0\u53ca\u7684\u6240\u6709\u53d8\u91cf\u90fd\u662f\u6709\u7406\u6570\u3002 \u6240\u6709\u52fe\u80a1\u6570\u7ec4\u90fd\u53ef\u4ee5\u901a\u8fc7\u8be5\u5f0f\u63a8\u51fa\u3002\u5f53\u7136\uff0c\u6709\u4e00\u4e9b\u9650\u5236\uff09 \u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u8bbe u=\\frac{s+t}2,v=\\frac{s-t}2 u=\\frac{s+t}2,v=\\frac{s-t}2 ,\u53c8\u53ef\u4ee5\u4e0e\u4e4b\u524d\u7684\u52fe\u80a1\u6570\u7ec4\u5b9a\u7406\u76f8\u7ed3\u5408\u3002 \u5f53\u7136\uff0c\u66f4\u5927\u7684\u5706\u4e5f\u53ef\u4ee5\u7b97\uff0c\u8bf7\u81ea\u5df1\u5c1d\u8bd5\u2014\u2014 \u8fd9\u4e9b\u56fe\u9664\u4e86\u201c\u5982\u4f55\u627e\u52fe\u80a1\u6570\u7ec4\u201d\u90a3\u5f20 \u90fd\u662f\u81ea\u5df1\u753b\u7684QAQ \u7528\u82f1\u6587\u7684\u4e3b\u8981\u539f\u56e0\u662f\u5b57\u4f53\u4e0d\u652f\u6301\u4e2d\u6587QAQ","title":"\u6700\u540e\u7684\u8865\u5145"},{"location":"math/pythagorean-triple/#_16","text":"\u7531\u4e8e\u6211\u5f88\u5f31\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u51fa\u9519\uff0c\u6b22\u8fce\u6307\u6b63\u9519\u8befQAQ\u3002","title":"\u6700\u540e\u7684\u6700\u540e"},{"location":"math/cm/cantor/","text":"\u5eb7\u6258\u5c55\u5f00 \u00b6 1.\u5eb7\u6258\u5c55\u5f00 \u00b6 \u5eb7\u6258\u5c55\u5f00\u771f\u662f\u4e2a\u795e\u5947\u7684\u4e1c\u897f\u3002 \u9664\u4e86\u672c\u9898\u7528\u4e8e\u6c42\u67d0\u6392\u5217\u7684\u6392\u540d\u5916\uff0c\u5eb7\u6258\u5c55\u5f00\u4e00\u822c\u7528\u4e8e\u54c8\u5e0c\uff0c\u4e0d\u8fc7\u6211\u4e5f\u6ca1\u505a\u5230\u8fc7\u8fd9\u6837\u7684\u54c8\u5e0c\u9898\u3002 \u5148\u7ed9\u4f60\u67ff\u5b50\u3002 $$ ans=1+\\sum_{i=1}^{n} A[i]\\times(n-i)! $$ \u5176\u4e2d A[i] A[i] \u4ee3\u8868 \\sum_{j=i}^{n}[a[j] < a[i]] \\sum_{j=i}^{n}[a[j] < a[i]] \u600e\u4e48\u6765\u7406\u89e3\u8fd9\u4e2a\u67ff\u5b50\u5462\uff1f\u60f3\u8c61\u6784\u9020\u51fa\u5b57\u5178\u5e8f\u6bd4\u5f53\u524d\u6392\u5217\u5c0f\u7684\u6709\u51e0\u4e2a\u6392\u5217\u3002 \u679a\u4e3e\u5230 i i \u8868\u793a 1 1 \u5230 i-1 i-1 \u548c\u539f\u6765\u7684\u6392\u5217\u4e00\u6837, i i \u4f4d\u80af\u5b9a\u4e0d\u4e00\u6837,\u4e4b\u540e\u548b\u6837\u90fd\u884c\u3002 \u65e2\u7136\u5230 i i \u4f4d\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u5b57\u5178\u5e8f\u5927\u5c0f\u5176\u5b9e\u5c31\u662f\u53d6\u51b3\u4e8e i i \u4f4d\u3002\u5f88\u660e\u663e\uff0c\u7b2c i i \u4f4d\u80af\u5b9a\u8981\u5c0f\u4e8e a[i] a[i] \u3002\u7136\u540e\u53ea\u8981\u628a i i \u540e\u9762\u5c0f\u4e8e a[i] a[i] \u7684\u6570\u4ea4\u6362\u5230 i i \u4f4d,\u540e\u9762\u968f\u4fbf\u6392\u5c31\u884c\u4e86\u3002 \u5f88\u660e\u663e\uff0c\u8fd9\u6837\u679a\u4e3e\u53ef\u4ee5\u505a\u5230\u4e0d\u91cd\u4e0d\u6f0f\u3002\u56e0\u4e3a\u8981\u6c42\u7684\u662f\u6392\u540d,\u6240\u4ee5 ans+=1 ans+=1 \u3002 \u5f53\u7136\u8981\u7528\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u4e00\u4e0b\uff0c\u590d\u6742\u5ea6\u662f O(nlgn) O(nlgn) \u7684\u3002 \u53cc\u8bed\u4ee3\u7801\uff08\u6ed1\u7a3d \u00b6 \u5199Pascal\u5c31\u662f\u4e3a\u4e86\u5361\u5e38\u6570,\u52a0O2\u79d2\u6740C++) C++98/11/14/17 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <bits/stdc++.h> using namespace std ; #define MAXN 1000005 #define rgt register #define mod 998244353 int N , a [ MAXN ], fac , c [ MAXN ], ans ; char * p ; inline void read ( rgt int & x ){ x = 0 ; while ( ! isdigit ( * p ) ) ++ p ; while ( isdigit ( * p ) ) x = x * 10 + ( * p & 15 ), ++ p ; } int main (){ scanf ( \"%d\" , & N ), fac = 1 ; p = new char [ N * 8 + 100 ], fread ( p , 1 , N * 8 + 100 , stdin ); for ( rgt int i = N ; i ; -- i ) read ( a [ i ]); for ( rgt int i = 1 , s , j ; i <= N ; ++ i ){ for ( s = 0 , j = a [ i ]; j ; j -= j & - j ) s += c [ j ]; ans = ( ans + 1ll * fac * s ) % mod , fac = 1ll * fac * i % mod ; for ( j = a [ i ]; j <= N ; j += j & - j ) ++ c [ j ]; } printf ( \"%d \\n \" , ans + 1 ); return 0 ; } Pascal \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 var n , fac , s , ans , i , j : longint ; a , c : array [ 1 .. 1000000 ] of longint ; begin read ( n ) ; fac := 1 ; ans := 0 ; for i := n downto 1 do begin read ( a [ i ]) ; c [ i ] := 0 ; end ; for i := 1 to n do begin j := a [ i ] ; s := 0 ; while j > 0 do begin s := s + c [ j ] ; j := j - ( j and - j ) ; end ; ans := ( QWORD ( ans ) + QWORD ( fac ) * QWORD ( s ) ) mod 998244353 ; fac := QWORD ( fac ) * QWORD ( i ) mod 998244353 ; j := a [ i ] ; while j <= n do begin c [ j ] := c [ j ] + 1 ; j := j + ( j and - j ) ; end ; end ; writeln (( ans + 1 ) mod 998244353 ) ; end . 2.\u9006\u5eb7\u6258\u5c55\u5f00 \u00b6 \u7c7b\u4f3c\u4e8e\u8fdb\u5236\u8f6c\u6362\uff0c\u4e0d\u65ad \\%(n-i)! \\%(n-i)! , /(n-1)! /(n-1)! \u5c31\u53ef\u4ee5\u5f97\u5230A\u6570\u7ec4\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8fd8\u539f\u51fa\u539f\u6392\u5217\u3002 Update on 2019.7.23 \u6628\u5929\u521a\u521a\u96c6\u8bad\u56de\u6765\uff0c\u4e8e\u662f\u5c31\u6765\u586b\u5751\u4e86 \u4f8b\u9898 \u8fd9\u9898\u5341\u5206\u597d\u5fc3\u5730\u4e3a\u6211\u4eec\u7701\u53bb\u4e86\u6c42\u51fa A A \u6570\u7ec4\u7684\u8fc7\u7a0b\uff08\u5426\u5219\u8981\u9ad8\u7cbe\u5ea6\u9664\u6cd5\uff1f \u95ee\u9898\u8bf4\u767d\u4e86\u5c31\u662f\u5728\u6bcf\u4e00\u4e2a [i,n] [i,n] \u533a\u95f4\u5185\u6c42 K K \u5927\u503c\u3002\u53ef\u4ee5\u4f7f\u7528\u6743\u503c\u7ebf\u6bb5\u6811+\u4e8c\u5206\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002\u8fd9\u5e94\u8be5\u6bd4\u8f83\u57fa\u7840\uff0c\u6240\u4ee5\u770b\u4ee3\u7801\u5427qaq\u3002 \u4ee3\u7801 \u00b6 \u6ca1\u600e\u4e48\u5361\u5e38\u6570\uff0c\u672c\u6765\u60f3\u641ezkw\u7ebf\u6bb5\u6811\u975e\u9012\u5f52\u51cf\u5c0f\u5e38\u6570\uff0c\u4f46\u662f\u61d2\u3002\u3002\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; #define MAXN 50005 int T , N , tr [ MAXN << 2 ]; void Build ( int c , int l , int r ){ //\u5efa\u6811 if ( l == r ) return tr [ c ] = 1 , void (); int mid (( l + r ) >> 1 ), ls ( c << 1 ), rs ( c << 1 | 1 ); Build ( ls , l , mid ), Build ( rs , mid + 1 , r ), tr [ c ] = tr [ ls ] + tr [ rs ]; } int Get ( int c , int l , int r , int k ){ //\u627e\u5230k\u5927\u503c\u7684\u540c\u65f6\u5220\u9664k\u5927\u503c -- tr [ c ]; if ( l == r ) return l ; int mid (( l + r ) >> 1 ), ls ( c << 1 ), rs ( ls | 1 ); if ( tr [ ls ] < k ) return Get ( rs , mid + 1 , r , k - tr [ ls ] ); //\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u5230k\u5927\u503c return Get ( ls , l , mid , k ); } int main (){ scanf ( \"%d\" , & T ); while ( T -- ){ scanf ( \"%d\" , & N ), Build ( 1 , 1 , N ); for ( int i = 1 , s ; i <= N ; ++ i ) scanf ( \"%d\" , & s ), printf ( \"%d%c\" , Get ( 1 , 1 , N , s + 1 ), \" \\n \" [ i < N ] ); } return 0 ; }","title":"\u5eb7\u6258\u5c55\u5f00"},{"location":"math/cm/cantor/#_1","text":"","title":"\u5eb7\u6258\u5c55\u5f00"},{"location":"math/cm/cantor/#1","text":"\u5eb7\u6258\u5c55\u5f00\u771f\u662f\u4e2a\u795e\u5947\u7684\u4e1c\u897f\u3002 \u9664\u4e86\u672c\u9898\u7528\u4e8e\u6c42\u67d0\u6392\u5217\u7684\u6392\u540d\u5916\uff0c\u5eb7\u6258\u5c55\u5f00\u4e00\u822c\u7528\u4e8e\u54c8\u5e0c\uff0c\u4e0d\u8fc7\u6211\u4e5f\u6ca1\u505a\u5230\u8fc7\u8fd9\u6837\u7684\u54c8\u5e0c\u9898\u3002 \u5148\u7ed9\u4f60\u67ff\u5b50\u3002 $$ ans=1+\\sum_{i=1}^{n} A[i]\\times(n-i)! $$ \u5176\u4e2d A[i] A[i] \u4ee3\u8868 \\sum_{j=i}^{n}[a[j] < a[i]] \\sum_{j=i}^{n}[a[j] < a[i]] \u600e\u4e48\u6765\u7406\u89e3\u8fd9\u4e2a\u67ff\u5b50\u5462\uff1f\u60f3\u8c61\u6784\u9020\u51fa\u5b57\u5178\u5e8f\u6bd4\u5f53\u524d\u6392\u5217\u5c0f\u7684\u6709\u51e0\u4e2a\u6392\u5217\u3002 \u679a\u4e3e\u5230 i i \u8868\u793a 1 1 \u5230 i-1 i-1 \u548c\u539f\u6765\u7684\u6392\u5217\u4e00\u6837, i i \u4f4d\u80af\u5b9a\u4e0d\u4e00\u6837,\u4e4b\u540e\u548b\u6837\u90fd\u884c\u3002 \u65e2\u7136\u5230 i i \u4f4d\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u5b57\u5178\u5e8f\u5927\u5c0f\u5176\u5b9e\u5c31\u662f\u53d6\u51b3\u4e8e i i \u4f4d\u3002\u5f88\u660e\u663e\uff0c\u7b2c i i \u4f4d\u80af\u5b9a\u8981\u5c0f\u4e8e a[i] a[i] \u3002\u7136\u540e\u53ea\u8981\u628a i i \u540e\u9762\u5c0f\u4e8e a[i] a[i] \u7684\u6570\u4ea4\u6362\u5230 i i \u4f4d,\u540e\u9762\u968f\u4fbf\u6392\u5c31\u884c\u4e86\u3002 \u5f88\u660e\u663e\uff0c\u8fd9\u6837\u679a\u4e3e\u53ef\u4ee5\u505a\u5230\u4e0d\u91cd\u4e0d\u6f0f\u3002\u56e0\u4e3a\u8981\u6c42\u7684\u662f\u6392\u540d,\u6240\u4ee5 ans+=1 ans+=1 \u3002 \u5f53\u7136\u8981\u7528\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u4e00\u4e0b\uff0c\u590d\u6742\u5ea6\u662f O(nlgn) O(nlgn) \u7684\u3002","title":"1.\u5eb7\u6258\u5c55\u5f00"},{"location":"math/cm/cantor/#_2","text":"\u5199Pascal\u5c31\u662f\u4e3a\u4e86\u5361\u5e38\u6570,\u52a0O2\u79d2\u6740C++)","title":"\u53cc\u8bed\u4ee3\u7801\uff08\u6ed1\u7a3d"},{"location":"math/cm/cantor/#c98111417","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <bits/stdc++.h> using namespace std ; #define MAXN 1000005 #define rgt register #define mod 998244353 int N , a [ MAXN ], fac , c [ MAXN ], ans ; char * p ; inline void read ( rgt int & x ){ x = 0 ; while ( ! isdigit ( * p ) ) ++ p ; while ( isdigit ( * p ) ) x = x * 10 + ( * p & 15 ), ++ p ; } int main (){ scanf ( \"%d\" , & N ), fac = 1 ; p = new char [ N * 8 + 100 ], fread ( p , 1 , N * 8 + 100 , stdin ); for ( rgt int i = N ; i ; -- i ) read ( a [ i ]); for ( rgt int i = 1 , s , j ; i <= N ; ++ i ){ for ( s = 0 , j = a [ i ]; j ; j -= j & - j ) s += c [ j ]; ans = ( ans + 1ll * fac * s ) % mod , fac = 1ll * fac * i % mod ; for ( j = a [ i ]; j <= N ; j += j & - j ) ++ c [ j ]; } printf ( \"%d \\n \" , ans + 1 ); return 0 ; }","title":"C++98/11/14/17"},{"location":"math/cm/cantor/#pascal","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 var n , fac , s , ans , i , j : longint ; a , c : array [ 1 .. 1000000 ] of longint ; begin read ( n ) ; fac := 1 ; ans := 0 ; for i := n downto 1 do begin read ( a [ i ]) ; c [ i ] := 0 ; end ; for i := 1 to n do begin j := a [ i ] ; s := 0 ; while j > 0 do begin s := s + c [ j ] ; j := j - ( j and - j ) ; end ; ans := ( QWORD ( ans ) + QWORD ( fac ) * QWORD ( s ) ) mod 998244353 ; fac := QWORD ( fac ) * QWORD ( i ) mod 998244353 ; j := a [ i ] ; while j <= n do begin c [ j ] := c [ j ] + 1 ; j := j + ( j and - j ) ; end ; end ; writeln (( ans + 1 ) mod 998244353 ) ; end .","title":"Pascal"},{"location":"math/cm/cantor/#2","text":"\u7c7b\u4f3c\u4e8e\u8fdb\u5236\u8f6c\u6362\uff0c\u4e0d\u65ad \\%(n-i)! \\%(n-i)! , /(n-1)! /(n-1)! \u5c31\u53ef\u4ee5\u5f97\u5230A\u6570\u7ec4\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8fd8\u539f\u51fa\u539f\u6392\u5217\u3002 Update on 2019.7.23 \u6628\u5929\u521a\u521a\u96c6\u8bad\u56de\u6765\uff0c\u4e8e\u662f\u5c31\u6765\u586b\u5751\u4e86 \u4f8b\u9898 \u8fd9\u9898\u5341\u5206\u597d\u5fc3\u5730\u4e3a\u6211\u4eec\u7701\u53bb\u4e86\u6c42\u51fa A A \u6570\u7ec4\u7684\u8fc7\u7a0b\uff08\u5426\u5219\u8981\u9ad8\u7cbe\u5ea6\u9664\u6cd5\uff1f \u95ee\u9898\u8bf4\u767d\u4e86\u5c31\u662f\u5728\u6bcf\u4e00\u4e2a [i,n] [i,n] \u533a\u95f4\u5185\u6c42 K K \u5927\u503c\u3002\u53ef\u4ee5\u4f7f\u7528\u6743\u503c\u7ebf\u6bb5\u6811+\u4e8c\u5206\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002\u8fd9\u5e94\u8be5\u6bd4\u8f83\u57fa\u7840\uff0c\u6240\u4ee5\u770b\u4ee3\u7801\u5427qaq\u3002","title":"2.\u9006\u5eb7\u6258\u5c55\u5f00"},{"location":"math/cm/cantor/#_3","text":"\u6ca1\u600e\u4e48\u5361\u5e38\u6570\uff0c\u672c\u6765\u60f3\u641ezkw\u7ebf\u6bb5\u6811\u975e\u9012\u5f52\u51cf\u5c0f\u5e38\u6570\uff0c\u4f46\u662f\u61d2\u3002\u3002\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; #define MAXN 50005 int T , N , tr [ MAXN << 2 ]; void Build ( int c , int l , int r ){ //\u5efa\u6811 if ( l == r ) return tr [ c ] = 1 , void (); int mid (( l + r ) >> 1 ), ls ( c << 1 ), rs ( c << 1 | 1 ); Build ( ls , l , mid ), Build ( rs , mid + 1 , r ), tr [ c ] = tr [ ls ] + tr [ rs ]; } int Get ( int c , int l , int r , int k ){ //\u627e\u5230k\u5927\u503c\u7684\u540c\u65f6\u5220\u9664k\u5927\u503c -- tr [ c ]; if ( l == r ) return l ; int mid (( l + r ) >> 1 ), ls ( c << 1 ), rs ( ls | 1 ); if ( tr [ ls ] < k ) return Get ( rs , mid + 1 , r , k - tr [ ls ] ); //\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u5230k\u5927\u503c return Get ( ls , l , mid , k ); } int main (){ scanf ( \"%d\" , & T ); while ( T -- ){ scanf ( \"%d\" , & N ), Build ( 1 , 1 , N ); for ( int i = 1 , s ; i <= N ; ++ i ) scanf ( \"%d\" , & s ), printf ( \"%d%c\" , Get ( 1 , 1 , N , s + 1 ), \" \\n \" [ i < N ] ); } return 0 ; }","title":"\u4ee3\u7801"},{"location":"math/div/","text":"\u540c\u4f59\u8fd9\u79cd\u4e1c\u897f\u8fd8\u662f\u5341\u5206\u57fa\u7840\u7684\uff0c\u5185\u5bb9\u6bd4\u591a\u9879\u5f0f\u7b80\u5355\u591a\u4e86\u3002\u3002\u3002 \u57fa\u7840\u90e8\u5206\u4e5f\u4e0d\u591a\uff0c\u53ea\u8981\u638c\u63e1\u4ee5\u4e0b\u51e0\u4e2a\u5f0f\u5b50\u5c31OK\u4e86\u3002 \u4e5f\u6bd4\u8f83\u597d\u63a8\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \u5982\u679c a \\% p = b \\% p a \\% p = b \\% p ( \\% \\% \u8868\u793a\u53d6\u6a21),\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u4f5c a\\equiv b (\\mod p) a\\equiv b (\\mod p) \u5982\u679c a a \u4e0e b b \u4e92\u8d28,\u6211\u4eec\u53ef\u4ee5\u8bb0\u4f5c a \\perp b a \\perp b \u6211\u4eec\u628a a a \u4e0e b b \u7684\u6700\u5927\u516c\u7ea6\u6570\u8bb0\u4e3a \\gcd(a, b) \\gcd(a, b) \\forall a \\equiv b ( \\mod p ), b \\equiv c ( \\mod p ),\\text{\u6709}a \\equiv c ( \\mod p )\\\\ \\forall a \\equiv b ( \\mod p ),c \\in \\mathbb{Z},\\text{\u6709}a \\pm c \\equiv b \\pm c ( \\mod p )\\\\ \\forall a \\equiv b ( \\mod p ),c \\in \\mathbb{Z},\\text{\u6709}a \\times c \\equiv b \\times c ( \\mod p )\\\\ \\forall a \\equiv b ( \\mod p ),c \\in \\mathbb{Z},c \\perp p,c |\\gcd(a, b),\\text{\u6709}\\frac ac \\equiv \\frac bc ( \\mod p )\\\\ \\forall a \\equiv b ( \\mod p ),c | \\gcd( a, b, c ),\\text{\u6709}\\frac ac \\equiv \\frac bc ( \\mod \\frac pc ) \\forall a \\equiv b ( \\mod p ), b \\equiv c ( \\mod p ),\\text{\u6709}a \\equiv c ( \\mod p )\\\\ \\forall a \\equiv b ( \\mod p ),c \\in \\mathbb{Z},\\text{\u6709}a \\pm c \\equiv b \\pm c ( \\mod p )\\\\ \\forall a \\equiv b ( \\mod p ),c \\in \\mathbb{Z},\\text{\u6709}a \\times c \\equiv b \\times c ( \\mod p )\\\\ \\forall a \\equiv b ( \\mod p ),c \\in \\mathbb{Z},c \\perp p,c |\\gcd(a, b),\\text{\u6709}\\frac ac \\equiv \\frac bc ( \\mod p )\\\\ \\forall a \\equiv b ( \\mod p ),c | \\gcd( a, b, c ),\\text{\u6709}\\frac ac \\equiv \\frac bc ( \\mod \\frac pc )","title":"\u57fa\u7840"},{"location":"math/div/gcd/","text":"\u8d1d\u7956\u5b9a\u7406(\u88f4\u8700\u5b9a\u7406) \u00b6 \\forall a,b \\in \\mathbb{N^+}, \\exists x, y,ax+by=\\gcd(a,b) \\forall a,b \\in \\mathbb{N^+}, \\exists x, y,ax+by=\\gcd(a,b) \u8bc1\u660e\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u6269\u5c55\u6b27\u51e0\u91cc\u5f97(exgcd)\u3002 \u6d1b\u8c37 P4549 \u3010\u6a21\u677f\u3011\u88f4\u8700\u5b9a\u7406 \u00b6 \u6839\u636e\u5b9a\u7406\uff0c\u7b54\u6848\u5c31\u662f\u6240\u6709\u6570\u7684\u6700\u5927\u516c\u56e0\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; int gcd ( int x , int y ){ if ( y == 0 ) return x ; return gcd ( y , x % y ); } int N , x , ans ; int main (){ scanf ( \"%d\" , & N ); for ( int i = 1 ; i <= N ; ++ i ){ scanf ( \"%d\" , & x ); if ( ans ) ans = gcd ( ans , x ); else ans = x ; if ( ans < 0 ) ans = - ans ; } printf ( \"%d \\n \" , ans ); } CF510D Fox And Jumping \u00b6 \u8d1d\u7956\u5b9a\u7406+DP \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u00b6 \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7528\u4e8e\u6c42\u6700\u5927\u516c\u7ea6\u6570\u3002 \\forall \\gcd( a, b ) = c, a > b,\\text{\u6709} \\gcd( a - b, b ) = c \\forall \\gcd( a, b ) = c, a > b,\\text{\u6709} \\gcd( a - b, b ) = c \u8bc1\u660e: \\because \\gcd( a, b ) = c \\\\ \\therefore c | a,c | b \\\\ \\therefore c | ( a - b ), c | b \\\\ \\therefore c | gcd( a - b, b ) \\\\ \\text{\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e00\u534a\u4e86,\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u8bc1\u660e\u4e0d\u5b58\u5728}(a-b)\\text{\u548c}b\\text{\u4e4b\u95f4\u6ca1\u6709\u66f4\u5927\u7684\u516c\u7ea6\u6570} \\\\ \\text{\u5047\u8bbe}d > c, d | ( a - b ), d | b \\\\ \\therefore d | a \\\\ \\therefore \\gcd( a, b ) = d > c \\therefore \\text{\u5047\u8bbe\u4e0d\u6210\u7acb,\u539f\u547d\u9898\u6210\u7acb} \\because \\gcd( a, b ) = c \\\\ \\therefore c | a,c | b \\\\ \\therefore c | ( a - b ), c | b \\\\ \\therefore c | gcd( a - b, b ) \\\\ \\text{\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e00\u534a\u4e86,\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u8bc1\u660e\u4e0d\u5b58\u5728}(a-b)\\text{\u548c}b\\text{\u4e4b\u95f4\u6ca1\u6709\u66f4\u5927\u7684\u516c\u7ea6\u6570} \\\\ \\text{\u5047\u8bbe}d > c, d | ( a - b ), d | b \\\\ \\therefore d | a \\\\ \\therefore \\gcd( a, b ) = d > c \\therefore \\text{\u5047\u8bbe\u4e0d\u6210\u7acb,\u539f\u547d\u9898\u6210\u7acb} \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u4ee3\u7801\u8fa3qwq 1 int gcd ( int a , int b ){ return b ? gcd ( b , a % b ) : a ; } \u9ad8\u7cbe\u5ea6\u600e\u4e48\u529e\u5462\uff1f \u7528python\u6216java \u5c31\u6709\u4e00\u79cd\u795e\u5947\u7684\u64cd\u4f5c\u53eb\u66f4\u76f8\u51cf\u635f\u672f,\u5c31\u662f \\gcd( a, b ) = \\gcd( a - b, b ) \\gcd( a, b ) = \\gcd( a - b, b ) \u4f46\u662f\u4f60\u4f1a\u53d1\u73b0,\u66f4\u76f8\u51cf\u635f\u672f\u7684\u590d\u6742\u5ea6\u4e0d\u592a\u5bf9,\u4e00\u4e2a gcd( 1, 1e9 ) gcd( 1, 1e9 ) \u5c31\u80fd\u5361\u5f97TLE\u3002 \u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u5b66\u4e60Stein\u7b97\u6cd5\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u00b6 \u6839\u636e\u8d1d\u7956\u5b9a\u7406\uff0c \\forall a,b \\in \\mathbb{N^+}, \\exists x, y,ax+by=\\gcd(a,b) \\forall a,b \\in \\mathbb{N^+}, \\exists x, y,ax+by=\\gcd(a,b) \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u5c31\u662f\u7528\u6765\u6c42\u5176\u4e2d\u7684 x x \u548c y y \u7684\u3002 1 void exgcd ( int a , int b , int & x , int & y , int & z ); \u5176\u4e2d z z \u8868\u793a \\gcd(a,b) \\gcd(a,b) \u5f88\u660e\u663e\uff0c\u5f53 b=0 b=0 \u65f6\uff0c\u89e3\u5f97 x=1 x=1 , y=0 y=0 \u3002 \u5426\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u89e3 bx'+(a\\%b)y'=\\gcd(b,a\\%b)=\\gcd(a,b) bx'+(a\\%b)y'=\\gcd(b,a\\%b)=\\gcd(a,b) \u8f6c\u6362\u4e00\u4e0b\u53ef\u4ee5\u53d8\u6210 bx'+(a\\%b)y'=bx'+(a-\\lfloor a/b\\rfloor\\times b)y'=ay'+b(x'-\\lfloor a/b\\rfloor\\times y') bx'+(a\\%b)y'=bx'+(a-\\lfloor a/b\\rfloor\\times b)y'=ay'+b(x'-\\lfloor a/b\\rfloor\\times y') \u4e8e\u662f\u6b64\u6b65\u89e3\u4e3a x=y',y=x'-\\lfloor a/b\\rfloor\\times y' x=y',y=x'-\\lfloor a/b\\rfloor\\times y' 1 2 3 4 void exgcd ( int a , int b , int & x , int & y , int & z ){ if ( ! b ) return x = 1 , y = 0 , z = a , void (); exgcd ( b , a % b , y , x , z ), y -= a / b * x ; } \u6d1b\u8c37 P1082 \u540c\u4f59\u65b9\u7a0b \u00b6","title":"gcd\u4e0eexgcd"},{"location":"math/div/gcd/#_1","text":"\\forall a,b \\in \\mathbb{N^+}, \\exists x, y,ax+by=\\gcd(a,b) \\forall a,b \\in \\mathbb{N^+}, \\exists x, y,ax+by=\\gcd(a,b) \u8bc1\u660e\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u6269\u5c55\u6b27\u51e0\u91cc\u5f97(exgcd)\u3002","title":"\u8d1d\u7956\u5b9a\u7406(\u88f4\u8700\u5b9a\u7406)"},{"location":"math/div/gcd/#p4549","text":"\u6839\u636e\u5b9a\u7406\uff0c\u7b54\u6848\u5c31\u662f\u6240\u6709\u6570\u7684\u6700\u5927\u516c\u56e0\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; int gcd ( int x , int y ){ if ( y == 0 ) return x ; return gcd ( y , x % y ); } int N , x , ans ; int main (){ scanf ( \"%d\" , & N ); for ( int i = 1 ; i <= N ; ++ i ){ scanf ( \"%d\" , & x ); if ( ans ) ans = gcd ( ans , x ); else ans = x ; if ( ans < 0 ) ans = - ans ; } printf ( \"%d \\n \" , ans ); }","title":"\u6d1b\u8c37 P4549 \u3010\u6a21\u677f\u3011\u88f4\u8700\u5b9a\u7406"},{"location":"math/div/gcd/#cf510d-fox-and-jumping","text":"\u8d1d\u7956\u5b9a\u7406+DP","title":"CF510D Fox And Jumping"},{"location":"math/div/gcd/#_2","text":"\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7528\u4e8e\u6c42\u6700\u5927\u516c\u7ea6\u6570\u3002 \\forall \\gcd( a, b ) = c, a > b,\\text{\u6709} \\gcd( a - b, b ) = c \\forall \\gcd( a, b ) = c, a > b,\\text{\u6709} \\gcd( a - b, b ) = c \u8bc1\u660e: \\because \\gcd( a, b ) = c \\\\ \\therefore c | a,c | b \\\\ \\therefore c | ( a - b ), c | b \\\\ \\therefore c | gcd( a - b, b ) \\\\ \\text{\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e00\u534a\u4e86,\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u8bc1\u660e\u4e0d\u5b58\u5728}(a-b)\\text{\u548c}b\\text{\u4e4b\u95f4\u6ca1\u6709\u66f4\u5927\u7684\u516c\u7ea6\u6570} \\\\ \\text{\u5047\u8bbe}d > c, d | ( a - b ), d | b \\\\ \\therefore d | a \\\\ \\therefore \\gcd( a, b ) = d > c \\therefore \\text{\u5047\u8bbe\u4e0d\u6210\u7acb,\u539f\u547d\u9898\u6210\u7acb} \\because \\gcd( a, b ) = c \\\\ \\therefore c | a,c | b \\\\ \\therefore c | ( a - b ), c | b \\\\ \\therefore c | gcd( a - b, b ) \\\\ \\text{\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e00\u534a\u4e86,\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u8bc1\u660e\u4e0d\u5b58\u5728}(a-b)\\text{\u548c}b\\text{\u4e4b\u95f4\u6ca1\u6709\u66f4\u5927\u7684\u516c\u7ea6\u6570} \\\\ \\text{\u5047\u8bbe}d > c, d | ( a - b ), d | b \\\\ \\therefore d | a \\\\ \\therefore \\gcd( a, b ) = d > c \\therefore \\text{\u5047\u8bbe\u4e0d\u6210\u7acb,\u539f\u547d\u9898\u6210\u7acb} \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u4ee3\u7801\u8fa3qwq 1 int gcd ( int a , int b ){ return b ? gcd ( b , a % b ) : a ; } \u9ad8\u7cbe\u5ea6\u600e\u4e48\u529e\u5462\uff1f \u7528python\u6216java \u5c31\u6709\u4e00\u79cd\u795e\u5947\u7684\u64cd\u4f5c\u53eb\u66f4\u76f8\u51cf\u635f\u672f,\u5c31\u662f \\gcd( a, b ) = \\gcd( a - b, b ) \\gcd( a, b ) = \\gcd( a - b, b ) \u4f46\u662f\u4f60\u4f1a\u53d1\u73b0,\u66f4\u76f8\u51cf\u635f\u672f\u7684\u590d\u6742\u5ea6\u4e0d\u592a\u5bf9,\u4e00\u4e2a gcd( 1, 1e9 ) gcd( 1, 1e9 ) \u5c31\u80fd\u5361\u5f97TLE\u3002 \u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u5b66\u4e60Stein\u7b97\u6cd5\u3002","title":"\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"math/div/gcd/#_3","text":"\u6839\u636e\u8d1d\u7956\u5b9a\u7406\uff0c \\forall a,b \\in \\mathbb{N^+}, \\exists x, y,ax+by=\\gcd(a,b) \\forall a,b \\in \\mathbb{N^+}, \\exists x, y,ax+by=\\gcd(a,b) \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u5c31\u662f\u7528\u6765\u6c42\u5176\u4e2d\u7684 x x \u548c y y \u7684\u3002 1 void exgcd ( int a , int b , int & x , int & y , int & z ); \u5176\u4e2d z z \u8868\u793a \\gcd(a,b) \\gcd(a,b) \u5f88\u660e\u663e\uff0c\u5f53 b=0 b=0 \u65f6\uff0c\u89e3\u5f97 x=1 x=1 , y=0 y=0 \u3002 \u5426\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u89e3 bx'+(a\\%b)y'=\\gcd(b,a\\%b)=\\gcd(a,b) bx'+(a\\%b)y'=\\gcd(b,a\\%b)=\\gcd(a,b) \u8f6c\u6362\u4e00\u4e0b\u53ef\u4ee5\u53d8\u6210 bx'+(a\\%b)y'=bx'+(a-\\lfloor a/b\\rfloor\\times b)y'=ay'+b(x'-\\lfloor a/b\\rfloor\\times y') bx'+(a\\%b)y'=bx'+(a-\\lfloor a/b\\rfloor\\times b)y'=ay'+b(x'-\\lfloor a/b\\rfloor\\times y') \u4e8e\u662f\u6b64\u6b65\u89e3\u4e3a x=y',y=x'-\\lfloor a/b\\rfloor\\times y' x=y',y=x'-\\lfloor a/b\\rfloor\\times y' 1 2 3 4 void exgcd ( int a , int b , int & x , int & y , int & z ){ if ( ! b ) return x = 1 , y = 0 , z = a , void (); exgcd ( b , a % b , y , x , z ), y -= a / b * x ; }","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"math/div/gcd/#p1082","text":"","title":"\u6d1b\u8c37 P1082 \u540c\u4f59\u65b9\u7a0b"},{"location":"math/la/gauss/","text":"\u9ad8\u65af\u6d88\u5143 \u00b6 \u5f15\u5165 \u00b6 \u7ed9\u4f60\u4e00\u4e2aN\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\uff0c\u600e\u4e48\u6c42\u51fa\u5b83\u7684\u89e3\uff1f \u5c31\u50cf\u8fd9\u6837\u5b50qwq \\left\\{\\begin{aligned} x+4y-10z&=-21 \\notag \\\\ 4x+y+z&=9 \\notag \\\\ 3x+y+4z&=17 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} x+4y-10z&=-21 \\notag \\\\ 4x+y+z&=9 \\notag \\\\ 3x+y+4z&=17 \\notag \\end{aligned}\\right. \u52a8\u7b14\u7b97\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053\u89e3\u4e3a \\left\\{\\begin{aligned} x&=1 \\notag \\\\ y&=2 \\notag \\\\ z&=3 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} x&=1 \\notag \\\\ y&=2 \\notag \\\\ z&=3 \\notag \\end{aligned}\\right. \u56de\u60f3\u4f60\u662f\u600e\u4e48\u7b97\u51fa\u8fd9\u4e2a\u89e3\u7684? \u662f\u4e0d\u662f\u4e24\u4e2a\u65b9\u7a0b\u76f8\u52a0\u3001\u76f8\u51cf\uff0c\u4e0d\u65ad\u51cf\u5c11\u65b9\u7a0b\u4e2d\u672a\u77e5\u6570\u7684\u4e2a\u6570\uff0c\u6700\u540e\u53ea\u5269\u4e00\u4e2a\u800c\u5f97\u5230\u89e3\uff1f \u5176\u5b9e\u8fd9\u5c31\u662f\u9ad8\u65af\u6d88\u5143\u7684\u4e3b\u8981\u601d\u60f3\u5566qwq \u6b63\u9898 \u00b6 \u9ad8\u65af\u6d88\u5143\u5c31\u662f\u6a21\u62df\u4eba\u624b\u7b97\u7684\u8fc7\u7a0b\u3002 \u5bf9\u4e8e\u65b9\u7a0b\u7ec4 \\left\\{\\begin{aligned} a_{1,1}x_1+a_{1,2}x_2+a_{1,3}x_3...&=a_{1,n+1} &(1) \\\\ a_{2,1}x_1+a_{2,2}x_2+a_{2,3}x_3...&=a_{2,n+1} &(2)\\\\ ...&= ... &(..) \\\\ a_{n,1}x_1+a_{n,2}x_2+a_{n,3}x_3...&=a_{n,n+1}&(n) \\end{aligned}\\right. \\left\\{\\begin{aligned} a_{1,1}x_1+a_{1,2}x_2+a_{1,3}x_3...&=a_{1,n+1} &(1) \\\\ a_{2,1}x_1+a_{2,2}x_2+a_{2,3}x_3...&=a_{2,n+1} &(2)\\\\ ...&= ... &(..) \\\\ a_{n,1}x_1+a_{n,2}x_2+a_{n,3}x_3...&=a_{n,n+1}&(n) \\end{aligned}\\right. \u6211\u4eec\u7528(1)\u65b9\u7a0b\u6d88\u53bb(2)~(n)\u4e2d\u6240\u6709\u7684 x_1 x_1 ,\u7528(2)\u65b9\u7a0b\u6d88\u53bb(3)~(n)\u4e2d\u6240\u6709 x_2 x_2 .... \u6700\u540e\u518d\u53cd\u8fc7\u6765\u4ee3\u56de\u53bb\uff0c\u5c31\u5f97\u5230\u4e86\u6240\u6709\u89e3\u3002 \u4ee3\u7801 \u00b6 mat\u5b58\u50a8\u65b9\u7a0b\u7684\u7cfb\u6570\u3002 \\left[ \\begin{matrix} a_{1,1}&a_{1,2}&a_{1,3}&a_{1,4}&\\cdots&a_{1,n+1} \\notag \\\\ a_{2,1}&a_{2,2}&a_{2,3}&a_{2,4}&\\cdots&a_{2,n+1} \\notag \\\\ a_{3,1}&a_{3,2}&a_{3,3}&a_{3,4}&\\cdots&a_{3,n+1} \\notag \\\\ \\vdots&\\vdots&\\vdots&\\vdots&\\ddots&\\vdots \\notag \\\\ a_{n,1}&a_{n,2}&a_{n,3}&a_{n,4}&\\cdots&a_{n,n+1} \\notag \\end{matrix} \\right] \\left[ \\begin{matrix} a_{1,1}&a_{1,2}&a_{1,3}&a_{1,4}&\\cdots&a_{1,n+1} \\notag \\\\ a_{2,1}&a_{2,2}&a_{2,3}&a_{2,4}&\\cdots&a_{2,n+1} \\notag \\\\ a_{3,1}&a_{3,2}&a_{3,3}&a_{3,4}&\\cdots&a_{3,n+1} \\notag \\\\ \\vdots&\\vdots&\\vdots&\\vdots&\\ddots&\\vdots \\notag \\\\ a_{n,1}&a_{n,2}&a_{n,3}&a_{n,4}&\\cdots&a_{n,n+1} \\notag \\end{matrix} \\right] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 for ( rgt int i = 1 , r , N1 ( N + 1 ), i1 ; i <= N ; ++ i ){ i1 = ( r = i ) + 1 ; for ( rgt int j = i1 ; j <= N ; ++ j ) if ( Fabs ( mat [ j ][ i ]) > Fabs ( mat [ r ][ i ]) ) r = j ; //\u907f\u514d\u51fa\u73b00 if ( r != i ) for ( rgt int j = i ; j <= N1 ; ++ j ) swap ( mat [ i ][ j ], mat [ r ][ j ] ); rgt double t ( 1. / mat [ i ][ i ]); mat [ i ][ i ] = 1 ; for ( rgt int j = i1 ; j <= N1 ; ++ j ) mat [ i ][ j ] *= t ; for ( rgt int j = i1 ; j <= N ; ++ j ){ t = mat [ j ][ i ], mat [ j ][ i ] = 0 ; for ( rgt int k = i1 ; k <= N1 ; ++ k ) mat [ j ][ k ] -= t * mat [ i ][ k ]; } } for ( rgt int i = N ; i >= 1 ; -- i ){ ans [ i ] = mat [ i ][ N + 1 ]; for ( rgt int j = i + 1 ; j <= N ; ++ j ) ans [ i ] -= mat [ i ][ j ] * ans [ j ]; }","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"math/la/gauss/#_1","text":"","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"math/la/gauss/#_2","text":"\u7ed9\u4f60\u4e00\u4e2aN\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\uff0c\u600e\u4e48\u6c42\u51fa\u5b83\u7684\u89e3\uff1f \u5c31\u50cf\u8fd9\u6837\u5b50qwq \\left\\{\\begin{aligned} x+4y-10z&=-21 \\notag \\\\ 4x+y+z&=9 \\notag \\\\ 3x+y+4z&=17 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} x+4y-10z&=-21 \\notag \\\\ 4x+y+z&=9 \\notag \\\\ 3x+y+4z&=17 \\notag \\end{aligned}\\right. \u52a8\u7b14\u7b97\u4e00\u4e0b\u4f60\u5c31\u77e5\u9053\u89e3\u4e3a \\left\\{\\begin{aligned} x&=1 \\notag \\\\ y&=2 \\notag \\\\ z&=3 \\notag \\end{aligned}\\right. \\left\\{\\begin{aligned} x&=1 \\notag \\\\ y&=2 \\notag \\\\ z&=3 \\notag \\end{aligned}\\right. \u56de\u60f3\u4f60\u662f\u600e\u4e48\u7b97\u51fa\u8fd9\u4e2a\u89e3\u7684? \u662f\u4e0d\u662f\u4e24\u4e2a\u65b9\u7a0b\u76f8\u52a0\u3001\u76f8\u51cf\uff0c\u4e0d\u65ad\u51cf\u5c11\u65b9\u7a0b\u4e2d\u672a\u77e5\u6570\u7684\u4e2a\u6570\uff0c\u6700\u540e\u53ea\u5269\u4e00\u4e2a\u800c\u5f97\u5230\u89e3\uff1f \u5176\u5b9e\u8fd9\u5c31\u662f\u9ad8\u65af\u6d88\u5143\u7684\u4e3b\u8981\u601d\u60f3\u5566qwq","title":"\u5f15\u5165"},{"location":"math/la/gauss/#_3","text":"\u9ad8\u65af\u6d88\u5143\u5c31\u662f\u6a21\u62df\u4eba\u624b\u7b97\u7684\u8fc7\u7a0b\u3002 \u5bf9\u4e8e\u65b9\u7a0b\u7ec4 \\left\\{\\begin{aligned} a_{1,1}x_1+a_{1,2}x_2+a_{1,3}x_3...&=a_{1,n+1} &(1) \\\\ a_{2,1}x_1+a_{2,2}x_2+a_{2,3}x_3...&=a_{2,n+1} &(2)\\\\ ...&= ... &(..) \\\\ a_{n,1}x_1+a_{n,2}x_2+a_{n,3}x_3...&=a_{n,n+1}&(n) \\end{aligned}\\right. \\left\\{\\begin{aligned} a_{1,1}x_1+a_{1,2}x_2+a_{1,3}x_3...&=a_{1,n+1} &(1) \\\\ a_{2,1}x_1+a_{2,2}x_2+a_{2,3}x_3...&=a_{2,n+1} &(2)\\\\ ...&= ... &(..) \\\\ a_{n,1}x_1+a_{n,2}x_2+a_{n,3}x_3...&=a_{n,n+1}&(n) \\end{aligned}\\right. \u6211\u4eec\u7528(1)\u65b9\u7a0b\u6d88\u53bb(2)~(n)\u4e2d\u6240\u6709\u7684 x_1 x_1 ,\u7528(2)\u65b9\u7a0b\u6d88\u53bb(3)~(n)\u4e2d\u6240\u6709 x_2 x_2 .... \u6700\u540e\u518d\u53cd\u8fc7\u6765\u4ee3\u56de\u53bb\uff0c\u5c31\u5f97\u5230\u4e86\u6240\u6709\u89e3\u3002","title":"\u6b63\u9898"},{"location":"math/la/gauss/#_4","text":"mat\u5b58\u50a8\u65b9\u7a0b\u7684\u7cfb\u6570\u3002 \\left[ \\begin{matrix} a_{1,1}&a_{1,2}&a_{1,3}&a_{1,4}&\\cdots&a_{1,n+1} \\notag \\\\ a_{2,1}&a_{2,2}&a_{2,3}&a_{2,4}&\\cdots&a_{2,n+1} \\notag \\\\ a_{3,1}&a_{3,2}&a_{3,3}&a_{3,4}&\\cdots&a_{3,n+1} \\notag \\\\ \\vdots&\\vdots&\\vdots&\\vdots&\\ddots&\\vdots \\notag \\\\ a_{n,1}&a_{n,2}&a_{n,3}&a_{n,4}&\\cdots&a_{n,n+1} \\notag \\end{matrix} \\right] \\left[ \\begin{matrix} a_{1,1}&a_{1,2}&a_{1,3}&a_{1,4}&\\cdots&a_{1,n+1} \\notag \\\\ a_{2,1}&a_{2,2}&a_{2,3}&a_{2,4}&\\cdots&a_{2,n+1} \\notag \\\\ a_{3,1}&a_{3,2}&a_{3,3}&a_{3,4}&\\cdots&a_{3,n+1} \\notag \\\\ \\vdots&\\vdots&\\vdots&\\vdots&\\ddots&\\vdots \\notag \\\\ a_{n,1}&a_{n,2}&a_{n,3}&a_{n,4}&\\cdots&a_{n,n+1} \\notag \\end{matrix} \\right] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 for ( rgt int i = 1 , r , N1 ( N + 1 ), i1 ; i <= N ; ++ i ){ i1 = ( r = i ) + 1 ; for ( rgt int j = i1 ; j <= N ; ++ j ) if ( Fabs ( mat [ j ][ i ]) > Fabs ( mat [ r ][ i ]) ) r = j ; //\u907f\u514d\u51fa\u73b00 if ( r != i ) for ( rgt int j = i ; j <= N1 ; ++ j ) swap ( mat [ i ][ j ], mat [ r ][ j ] ); rgt double t ( 1. / mat [ i ][ i ]); mat [ i ][ i ] = 1 ; for ( rgt int j = i1 ; j <= N1 ; ++ j ) mat [ i ][ j ] *= t ; for ( rgt int j = i1 ; j <= N ; ++ j ){ t = mat [ j ][ i ], mat [ j ][ i ] = 0 ; for ( rgt int k = i1 ; k <= N1 ; ++ k ) mat [ j ][ k ] -= t * mat [ i ][ k ]; } } for ( rgt int i = N ; i >= 1 ; -- i ){ ans [ i ] = mat [ i ][ N + 1 ]; for ( rgt int j = i + 1 ; j <= N ; ++ j ) ans [ i ] -= mat [ i ][ j ] * ans [ j ]; }","title":"\u4ee3\u7801"},{"location":"math/la/matrix-inversion/","text":"\u77e9\u9635\u6c42\u9006 \u00b6 \u7ed9\u51fa\u77e9\u9635 A A ,\u6784\u9020\u51fa\u77e9\u9635 B B \u4f7f A \\times B = E A \\times B = E ,$E\u8868\u793a\u5355\u4f4d\u77e9\u9635\u3002 \u5bf9\u4e8e\u5f0f\u5b50 A \\times B = C A \\times B = C \u6839\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u7ed3\u8bba\u3002 \u4ea4\u6362 A A \u7684 x x , y y \u884c\uff0c\u4ea4\u6362 C C \u7684 x x , y y \u884c\uff0c\u7b49\u5f0f\u4ecd\u7136\u6210\u7acb\u3002 \\sum_{j=1}^n A_{x,j} \\times B_{j,k}=C_{x,k} \\sum_{j=1}^n A_{x,j} \\times B_{j,k}=C_{x,k} \\sum_{j=1}^n A_{y,j} \\times B_{j,k}=C_{y,k} \\sum_{j=1}^n A_{y,j} \\times B_{j,k}=C_{y,k} \u73b0\u5728\u4ea4\u6362 x x , y y \u884c\uff0c\u53ef\u4ee5\u5f97\u5230 \\sum_{j=1}^n A'_{x,j} \\times B_{j,k}=C'_{x,k}=C_{y,k} \\sum_{j=1}^n A'_{x,j} \\times B_{j,k}=C'_{x,k}=C_{y,k} \\sum_{j=1}^n A'_{y,j} \\times B_{j,k}=C'_{y,k}=C_{x,k} \\sum_{j=1}^n A'_{y,j} \\times B_{j,k}=C'_{y,k}=C_{x,k} \u5f88\u660e\u663e\u6210\u7acb\u3002 \u540c\u7406\uff0c\u67d0\u4e00\u884c\u4e58\u4e0a\u540c\u4e00\u4e2a\u6570\u3001\u67d0\u4e00\u884c\u51cf\u53bb\u53e6\u4e00\u884c\u4e58\u4e0a k k ( k\\in R k\\in R )\u4ecd\u7136\u80fd\u4fdd\u6301\u7b49\u5f0f\u6210\u7acb\u3002 \u8fd9\u4e9b\u64cd\u4f5c\u5df2\u8db3\u591f\u7528\u6765\u641e\u9ad8\u65af\u6d88\u5143\u3002 \u4e8e\u662f\u76f4\u63a5\u628a A A \u6d88\u6210\u5355\u4f4d\u77e9\u9635\uff0c\u628a\u7b49\u5f0f\u53d8\u6210 E\\times B=A' E\\times B=A' \uff0c\u4e5f\u5c31\u662f B=A' B=A' \u5c31OK\u4e86\u3002 \u4f3c\u4e4e\u8fd8\u6709\u4e00\u79cd\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u3002 \u4ee3\u7801 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <bits/stdc++.h> #define u32 unsigned #define i64 long long #define u64 unsigned long long #define f80 long double #define rgt register #define getchar() ( p1 == p2 && ( p2 = bf + fread( bf, 1, 1 << 21, stdin ), p1 = bf ) == p2 ? EOF : *p1++ ) using namespace std ; #define i64 long long #define mod 1000000007 #pragma GCC optimize(3) char bf [ 1 << 21 ], * p1 , * p2 ; template < typename T > inline void read ( rgt T & x ){ x = 0 ; rgt char t , flg ( 0 ); for ( t = getchar (); ! isdigit ( t ); t = getchar () ) flg = t == '-' ; for ( ; isdigit ( t ); t = getchar () ) x = x * 10 + ( t & 15 ); x = flg ? - x : x ; } clock_t __t_bg , __t_ed ; int N ; inline void swp ( int & x , int & y ){ x ^= y ^= x ^= y ; } inline int md ( rgt i64 x ){ return x -= x / mod * mod , x < 0 ? x + mod : x ; } struct Matrix { int a [ 405 ][ 405 ]; inline void SWAP ( int x , int y ){ static int i ; for ( i = 1 ; i <= N ; ++ i ) swp ( a [ x ][ i ], a [ y ][ i ] ); } inline void MUL ( int x , int t ){ static int i ; for ( i = 1 ; i <= N ; ++ i ) a [ x ][ i ] = md ( ( i64 ) a [ x ][ i ] * t ); } inline void MD ( int x , int y , int t ){ static int i ; for ( i = 1 ; i <= N ; ++ i ) a [ y ][ i ] = md ( a [ y ][ i ] + ( i64 ) a [ x ][ i ] * t ); } inline void print (){ static int i , j ; for ( i = 1 ; i <= N ; ++ i ) for ( j = 1 ; j <= N ; ++ j ) printf ( \"%d%c\" , a [ i ][ j ], \" \\n \" [ j == N ] ); } } A , B ; inline int inv ( rgt int x ){ static int ans , y ; for ( ans = 1 , y = mod - 2 ; y ; y >>= 1 , x = ( i64 ) x * x % mod ) if ( y & 1 ) ans = ( i64 ) ans * x % mod ; return ans ; } signed main (){ __t_bg = clock (); read ( N ); for ( rgt int i = 1 ; i <= N ; ++ i ) for ( rgt int j = 1 ; j <= N ; ++ j ) read ( A . a [ i ][ j ]); for ( rgt int i = 1 ; i <= N ; ++ i ) B . a [ i ][ i ] = 1 ; for ( rgt int i = 1 , t ; i <= N ; ++ i ){ for ( rgt int j = i ; j <= N ; ++ j ) if ( A . a [ j ][ i ] ){ if ( i != j ) A . SWAP ( i , j ), B . SWAP ( i , j ); break ; } if ( ! A . a [ i ][ i ] ) return printf ( \"No Solution \\n \" ), 0 ; t = inv ( A . a [ i ][ i ]), A . MUL ( i , t ), B . MUL ( i , t ); for ( rgt int j = 1 ; j <= N ; ++ j ) if ( i != j ) B . MD ( i , j , - A . a [ j ][ i ] ), A . MD ( i , j , - A . a [ j ][ i ] ); } B . print (); __t_ed = clock (), fprintf ( stderr , \"time: %.5lfs \\n \" , double ( __t_ed - __t_bg ) / CLOCKS_PER_SEC ); return 0 ; }","title":"\u77e9\u9635\u6c42\u9006"},{"location":"math/la/matrix-inversion/#_1","text":"\u7ed9\u51fa\u77e9\u9635 A A ,\u6784\u9020\u51fa\u77e9\u9635 B B \u4f7f A \\times B = E A \\times B = E ,$E\u8868\u793a\u5355\u4f4d\u77e9\u9635\u3002 \u5bf9\u4e8e\u5f0f\u5b50 A \\times B = C A \\times B = C \u6839\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u7ed3\u8bba\u3002 \u4ea4\u6362 A A \u7684 x x , y y \u884c\uff0c\u4ea4\u6362 C C \u7684 x x , y y \u884c\uff0c\u7b49\u5f0f\u4ecd\u7136\u6210\u7acb\u3002 \\sum_{j=1}^n A_{x,j} \\times B_{j,k}=C_{x,k} \\sum_{j=1}^n A_{x,j} \\times B_{j,k}=C_{x,k} \\sum_{j=1}^n A_{y,j} \\times B_{j,k}=C_{y,k} \\sum_{j=1}^n A_{y,j} \\times B_{j,k}=C_{y,k} \u73b0\u5728\u4ea4\u6362 x x , y y \u884c\uff0c\u53ef\u4ee5\u5f97\u5230 \\sum_{j=1}^n A'_{x,j} \\times B_{j,k}=C'_{x,k}=C_{y,k} \\sum_{j=1}^n A'_{x,j} \\times B_{j,k}=C'_{x,k}=C_{y,k} \\sum_{j=1}^n A'_{y,j} \\times B_{j,k}=C'_{y,k}=C_{x,k} \\sum_{j=1}^n A'_{y,j} \\times B_{j,k}=C'_{y,k}=C_{x,k} \u5f88\u660e\u663e\u6210\u7acb\u3002 \u540c\u7406\uff0c\u67d0\u4e00\u884c\u4e58\u4e0a\u540c\u4e00\u4e2a\u6570\u3001\u67d0\u4e00\u884c\u51cf\u53bb\u53e6\u4e00\u884c\u4e58\u4e0a k k ( k\\in R k\\in R )\u4ecd\u7136\u80fd\u4fdd\u6301\u7b49\u5f0f\u6210\u7acb\u3002 \u8fd9\u4e9b\u64cd\u4f5c\u5df2\u8db3\u591f\u7528\u6765\u641e\u9ad8\u65af\u6d88\u5143\u3002 \u4e8e\u662f\u76f4\u63a5\u628a A A \u6d88\u6210\u5355\u4f4d\u77e9\u9635\uff0c\u628a\u7b49\u5f0f\u53d8\u6210 E\\times B=A' E\\times B=A' \uff0c\u4e5f\u5c31\u662f B=A' B=A' \u5c31OK\u4e86\u3002 \u4f3c\u4e4e\u8fd8\u6709\u4e00\u79cd\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u3002","title":"\u77e9\u9635\u6c42\u9006"},{"location":"math/la/matrix-inversion/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <bits/stdc++.h> #define u32 unsigned #define i64 long long #define u64 unsigned long long #define f80 long double #define rgt register #define getchar() ( p1 == p2 && ( p2 = bf + fread( bf, 1, 1 << 21, stdin ), p1 = bf ) == p2 ? EOF : *p1++ ) using namespace std ; #define i64 long long #define mod 1000000007 #pragma GCC optimize(3) char bf [ 1 << 21 ], * p1 , * p2 ; template < typename T > inline void read ( rgt T & x ){ x = 0 ; rgt char t , flg ( 0 ); for ( t = getchar (); ! isdigit ( t ); t = getchar () ) flg = t == '-' ; for ( ; isdigit ( t ); t = getchar () ) x = x * 10 + ( t & 15 ); x = flg ? - x : x ; } clock_t __t_bg , __t_ed ; int N ; inline void swp ( int & x , int & y ){ x ^= y ^= x ^= y ; } inline int md ( rgt i64 x ){ return x -= x / mod * mod , x < 0 ? x + mod : x ; } struct Matrix { int a [ 405 ][ 405 ]; inline void SWAP ( int x , int y ){ static int i ; for ( i = 1 ; i <= N ; ++ i ) swp ( a [ x ][ i ], a [ y ][ i ] ); } inline void MUL ( int x , int t ){ static int i ; for ( i = 1 ; i <= N ; ++ i ) a [ x ][ i ] = md ( ( i64 ) a [ x ][ i ] * t ); } inline void MD ( int x , int y , int t ){ static int i ; for ( i = 1 ; i <= N ; ++ i ) a [ y ][ i ] = md ( a [ y ][ i ] + ( i64 ) a [ x ][ i ] * t ); } inline void print (){ static int i , j ; for ( i = 1 ; i <= N ; ++ i ) for ( j = 1 ; j <= N ; ++ j ) printf ( \"%d%c\" , a [ i ][ j ], \" \\n \" [ j == N ] ); } } A , B ; inline int inv ( rgt int x ){ static int ans , y ; for ( ans = 1 , y = mod - 2 ; y ; y >>= 1 , x = ( i64 ) x * x % mod ) if ( y & 1 ) ans = ( i64 ) ans * x % mod ; return ans ; } signed main (){ __t_bg = clock (); read ( N ); for ( rgt int i = 1 ; i <= N ; ++ i ) for ( rgt int j = 1 ; j <= N ; ++ j ) read ( A . a [ i ][ j ]); for ( rgt int i = 1 ; i <= N ; ++ i ) B . a [ i ][ i ] = 1 ; for ( rgt int i = 1 , t ; i <= N ; ++ i ){ for ( rgt int j = i ; j <= N ; ++ j ) if ( A . a [ j ][ i ] ){ if ( i != j ) A . SWAP ( i , j ), B . SWAP ( i , j ); break ; } if ( ! A . a [ i ][ i ] ) return printf ( \"No Solution \\n \" ), 0 ; t = inv ( A . a [ i ][ i ]), A . MUL ( i , t ), B . MUL ( i , t ); for ( rgt int j = 1 ; j <= N ; ++ j ) if ( i != j ) B . MD ( i , j , - A . a [ j ][ i ] ), A . MD ( i , j , - A . a [ j ][ i ] ); } B . print (); __t_ed = clock (), fprintf ( stderr , \"time: %.5lfs \\n \" , double ( __t_ed - __t_bg ) / CLOCKS_PER_SEC ); return 0 ; }","title":"\u4ee3\u7801"},{"location":"math/la/matrix-tree/","text":"\u77e9\u9635\u6811\u5b9a\u7406 \u00b6 \u5148\u8bb2\u8bb2\u8fd9\u662f\u5e72\u561b\u7528\u7684\u3002 \u77e9\u9635\u6811\u5b9a\u7406\u7528\u4e8e\u6c42\u6709\u5411\u56fe/\u65e0\u5411\u56fe\u7684\u751f\u6210\u6811\u4e2a\u6570\u3002 \u8fd9\u79cd\u8fd9\u4e48\u96be\u7684\u4e1c\u897f\u6211\u4e0d\u4f1a\u8bc1\u660e\u554aqwq \u6eda\u53bb\u5b66\u5b66\u7ebf\u6027\u4ee3\u6570\u518d\u6765\u586b\u5751\u597d\u4e86qwq \u586b\u5751\u65f6\u95f4\u7684\u8bdd 0 0 ~ +\\infty +\\infty \u5e74\u4e0d\u7b49 \u9996\u5148\u6784\u9020\u90bb\u63a5\u77e9\u9635 A A \u4ee5\u53ca\u5ea6\u6570\u77e9\u9635 D D \uff0c\u57fa\u5c14\u970d\u592b\u77e9\u9635(Kirchhoff)\u4e3a K=D-A K=D-A \u3002 \u8bb2\u7684\u901a\u4fd7\u4e00\u70b9\uff0c\u628a\u52a0\u8fb9\u64cd\u4f5c\u53d8\u6210\u8fd9\u6837\uff1a 1 2 3 inline void add ( int x , int y ){ ++ a [ x ][ x ], ++ a [ y ][ y ], -- a [ x ][ y ], -- a [ y ][ x ]; } a a \u5373\u4e3a\u57fa\u5c14\u970d\u592b\u77e9\u9635\u3002 \u8fd9\u662f\u65e0\u5411\u56fe\u7684\u52a0\u8fb9\u65b9\u5f0f\u3002 \u5bf9\u4e8e\u6709\u5411\u56fe\u7684\u60c5\u51b5\uff0c\u5982\u679c\u8981\u6c42\u662f\u5916\u5411\u6811(\u6240\u6709\u8fb9\u65b9\u5411\u90fd\u8fdc\u79bb\u6839\u8282\u70b9)\uff0c\u5efa\u8fb9\u65b9\u5f0f\u4e3a 1 2 3 inline void add ( int x , int y ){ ++ a [ y ][ y ], -- a [ x ][ y ]; } \u5982\u679c\u8981\u6c42\u662f\u5185\u5411\u6811\uff0c\u5efa\u8fb9\u65b9\u5f0f\u4e3a 1 2 3 inline void add ( int x , int y ){ ++ a [ x ][ x ], -- a [ x ][ y ]; } \u7136\u540e\u5bf9\u6839\u8282\u70b9\u6c42\u4f59\u5b50\u5f0f(\u4e5f\u5c31\u662f\u53bb\u6389\u6839\u8282\u70b9\u6c42\u884c\u5217\u5f0f)\u5373\u53ef\u3002 SP104 HIGH - Highways \u00b6 \u77e9\u9635\u6811\u5b9a\u7406\u88f8\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <bits/stdc++.h> using namespace std ; #define Re register #define MAXN 20 #define LD long double int T , N , M , x , y ; LD a [ MAXN ][ MAXN ]; int main (){ scanf ( \"%d\" , & T ); while ( T -- ){ scanf ( \"%d%d\" , & N , & M ); N -- ; memset ( a , 0 , sizeof a ); for ( int i = 1 ; i <= M ; ++ i ) scanf ( \"%d%d\" , & x , & y ), a [ x ][ x ] += 1 , a [ y ][ y ] += 1 , a [ x ][ y ] -= 1 , a [ y ][ x ] -= 1 ; bool flg ( 1 ); for ( int i = 1 ; i <= N ; ++ i ){ int mx ( i ); for ( int j = i + 1 ; j <= N ; ++ j ) if ( a [ mx ][ i ] < a [ j ][ i ] ) mx = j ; if ( i != mx ) for ( int j = i ; j <= N ; ++ j ) swap ( a [ i ][ j ], a [ mx ][ j ] ); if ( a [ i ][ i ] < 1e-8 && a [ i ][ i ] > - 1e-8 ){ printf ( \"0 \\n \" ); flg = 0 ; break ; } for ( int j = i + 1 ; j <= N ; ++ j ){ LD t ( a [ j ][ i ] / a [ i ][ i ]); for ( int k = i ; k <= N ; ++ k ) a [ j ][ k ] -= a [ i ][ k ] * t ; } } if ( flg ){ LD ans ( 1 ); for ( int i = 1 ; i <= N ; ++ i ) ans *= a [ i ][ i ]; printf ( \"%.0Lf \\n \" , ans >= 0 ? ans : - ans ); } } return 0 ; } [HEOI2015]\u5c0fZ\u7684\u623f\u95f4 \u00b6 \u8fd8\u662f\u6a21\u677f\u9898\u554a\u3002\u3002\u3002 \u56e0\u4e3a\u8981\u53d6\u4f59\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6765\u6d88\u5143\uff0c\u6216\u8005\u53ef\u4ee5\u6c42\u51fa\u9006\u5143\uff08\u8fd9\u53ef\u80fd\u66f4\u65b9\u4fbf\uff0c\u4f46\u662f\u5f88\u9057\u61be\u6a21\u6570\u4e0d\u4e3a\u8d28\u6570\u3002\u3002\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <bits/stdc++.h> using namespace std ; #define Re register #define MAXN 99 #define LL long long #define mod 1000000000 int N , M ; char s [ 13 ][ 13 ], cnt , c [ 13 ][ 13 ]; LL a [ MAXN ][ MAXN ]; bool flg ; void Add ( int x , int y ){ a [ x ][ y ] -- ; a [ y ][ x ] -- ; a [ x ][ x ] ++ ; a [ y ][ y ] ++ ; } int main (){ scanf ( \"%d%d\" , & N , & M ); for ( int i = 1 ; i <= N ; ++ i ) scanf ( \"%s\" , s [ i ] + 1 ); for ( int i = 1 ; i <= N ; ++ i ) for ( int j = 1 ; j <= M ; ++ j ) if ( s [ i ][ j ] == '.' ) c [ i ][ j ] = ++ cnt ; for ( int i = 1 ; i <= N ; ++ i ) for ( int j = 1 ; j <= M ; ++ j ){ if ( ! c [ i ][ j ] ) continue ; if ( c [ i ][ j + 1 ] ) Add ( c [ i ][ j ], c [ i ][ j + 1 ] ); if ( c [ i + 1 ][ j ] ) Add ( c [ i ][ j ], c [ i + 1 ][ j ] ); } cnt -- ; flg = 1 ; for ( int i = 1 ; i <= cnt ; ++ i ){ int mx ( i ); for ( int j = i + 1 ; j <= cnt ; ++ j ) if ( c [ i ][ j ] > c [ i ][ mx ] ) mx = i ; if ( mx != i ){ flg = ! flg ; for ( int j = i ; j <= cnt ; ++ j ) swap ( c [ i ][ j ], c [ i ][ mx ] ); } if ( ! a [ i ][ i ] ){ printf ( \"0 \\n \" ); return 0 ; } for ( int j = i + 1 ; j <= cnt ; ++ j ){ while ( 1 ){ int t ( a [ j ][ i ] / a [ i ][ i ]); for ( int k = i ; k <= cnt ; ++ k ) a [ j ][ k ] = ( ( a [ j ][ k ] - ( a [ i ][ k ] * t ) % mod ) % mod + mod ) % mod ; if ( a [ j ][ i ] == 0 ) break ; for ( int k = i ; k <= cnt ; ++ k ) swap ( a [ i ][ k ], a [ j ][ k ] ); flg = ! flg ; } } } LL ans ( 1 ); for ( int i = 1 ; i <= cnt ; ++ i ) ans = ( ans * a [ i ][ i ] ) % mod ; printf ( \"%lld \\n \" , flg ? ans : mod - ans ); return 0 ; } bzoj4894 \u5929\u8d4b \u00b6 \u8fd8\u662f\u6a21\u677f\u9898\u54e6 [SHOI2016]\u9ed1\u6697\u524d\u7684\u5e7b\u60f3\u4e61 \u00b6 [SDOI2014]\u91cd\u5efa \u00b6 [JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570 \u00b6 bzoj5056 OI\u6e38\u620f \u00b6","title":"\u77e9\u9635\u6811\u5b9a\u7406"},{"location":"math/la/matrix-tree/#_1","text":"\u5148\u8bb2\u8bb2\u8fd9\u662f\u5e72\u561b\u7528\u7684\u3002 \u77e9\u9635\u6811\u5b9a\u7406\u7528\u4e8e\u6c42\u6709\u5411\u56fe/\u65e0\u5411\u56fe\u7684\u751f\u6210\u6811\u4e2a\u6570\u3002 \u8fd9\u79cd\u8fd9\u4e48\u96be\u7684\u4e1c\u897f\u6211\u4e0d\u4f1a\u8bc1\u660e\u554aqwq \u6eda\u53bb\u5b66\u5b66\u7ebf\u6027\u4ee3\u6570\u518d\u6765\u586b\u5751\u597d\u4e86qwq \u586b\u5751\u65f6\u95f4\u7684\u8bdd 0 0 ~ +\\infty +\\infty \u5e74\u4e0d\u7b49 \u9996\u5148\u6784\u9020\u90bb\u63a5\u77e9\u9635 A A \u4ee5\u53ca\u5ea6\u6570\u77e9\u9635 D D \uff0c\u57fa\u5c14\u970d\u592b\u77e9\u9635(Kirchhoff)\u4e3a K=D-A K=D-A \u3002 \u8bb2\u7684\u901a\u4fd7\u4e00\u70b9\uff0c\u628a\u52a0\u8fb9\u64cd\u4f5c\u53d8\u6210\u8fd9\u6837\uff1a 1 2 3 inline void add ( int x , int y ){ ++ a [ x ][ x ], ++ a [ y ][ y ], -- a [ x ][ y ], -- a [ y ][ x ]; } a a \u5373\u4e3a\u57fa\u5c14\u970d\u592b\u77e9\u9635\u3002 \u8fd9\u662f\u65e0\u5411\u56fe\u7684\u52a0\u8fb9\u65b9\u5f0f\u3002 \u5bf9\u4e8e\u6709\u5411\u56fe\u7684\u60c5\u51b5\uff0c\u5982\u679c\u8981\u6c42\u662f\u5916\u5411\u6811(\u6240\u6709\u8fb9\u65b9\u5411\u90fd\u8fdc\u79bb\u6839\u8282\u70b9)\uff0c\u5efa\u8fb9\u65b9\u5f0f\u4e3a 1 2 3 inline void add ( int x , int y ){ ++ a [ y ][ y ], -- a [ x ][ y ]; } \u5982\u679c\u8981\u6c42\u662f\u5185\u5411\u6811\uff0c\u5efa\u8fb9\u65b9\u5f0f\u4e3a 1 2 3 inline void add ( int x , int y ){ ++ a [ x ][ x ], -- a [ x ][ y ]; } \u7136\u540e\u5bf9\u6839\u8282\u70b9\u6c42\u4f59\u5b50\u5f0f(\u4e5f\u5c31\u662f\u53bb\u6389\u6839\u8282\u70b9\u6c42\u884c\u5217\u5f0f)\u5373\u53ef\u3002","title":"\u77e9\u9635\u6811\u5b9a\u7406"},{"location":"math/la/matrix-tree/#sp104-high-highways","text":"\u77e9\u9635\u6811\u5b9a\u7406\u88f8\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <bits/stdc++.h> using namespace std ; #define Re register #define MAXN 20 #define LD long double int T , N , M , x , y ; LD a [ MAXN ][ MAXN ]; int main (){ scanf ( \"%d\" , & T ); while ( T -- ){ scanf ( \"%d%d\" , & N , & M ); N -- ; memset ( a , 0 , sizeof a ); for ( int i = 1 ; i <= M ; ++ i ) scanf ( \"%d%d\" , & x , & y ), a [ x ][ x ] += 1 , a [ y ][ y ] += 1 , a [ x ][ y ] -= 1 , a [ y ][ x ] -= 1 ; bool flg ( 1 ); for ( int i = 1 ; i <= N ; ++ i ){ int mx ( i ); for ( int j = i + 1 ; j <= N ; ++ j ) if ( a [ mx ][ i ] < a [ j ][ i ] ) mx = j ; if ( i != mx ) for ( int j = i ; j <= N ; ++ j ) swap ( a [ i ][ j ], a [ mx ][ j ] ); if ( a [ i ][ i ] < 1e-8 && a [ i ][ i ] > - 1e-8 ){ printf ( \"0 \\n \" ); flg = 0 ; break ; } for ( int j = i + 1 ; j <= N ; ++ j ){ LD t ( a [ j ][ i ] / a [ i ][ i ]); for ( int k = i ; k <= N ; ++ k ) a [ j ][ k ] -= a [ i ][ k ] * t ; } } if ( flg ){ LD ans ( 1 ); for ( int i = 1 ; i <= N ; ++ i ) ans *= a [ i ][ i ]; printf ( \"%.0Lf \\n \" , ans >= 0 ? ans : - ans ); } } return 0 ; }","title":"SP104 HIGH - Highways"},{"location":"math/la/matrix-tree/#heoi2015z","text":"\u8fd8\u662f\u6a21\u677f\u9898\u554a\u3002\u3002\u3002 \u56e0\u4e3a\u8981\u53d6\u4f59\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6765\u6d88\u5143\uff0c\u6216\u8005\u53ef\u4ee5\u6c42\u51fa\u9006\u5143\uff08\u8fd9\u53ef\u80fd\u66f4\u65b9\u4fbf\uff0c\u4f46\u662f\u5f88\u9057\u61be\u6a21\u6570\u4e0d\u4e3a\u8d28\u6570\u3002\u3002\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <bits/stdc++.h> using namespace std ; #define Re register #define MAXN 99 #define LL long long #define mod 1000000000 int N , M ; char s [ 13 ][ 13 ], cnt , c [ 13 ][ 13 ]; LL a [ MAXN ][ MAXN ]; bool flg ; void Add ( int x , int y ){ a [ x ][ y ] -- ; a [ y ][ x ] -- ; a [ x ][ x ] ++ ; a [ y ][ y ] ++ ; } int main (){ scanf ( \"%d%d\" , & N , & M ); for ( int i = 1 ; i <= N ; ++ i ) scanf ( \"%s\" , s [ i ] + 1 ); for ( int i = 1 ; i <= N ; ++ i ) for ( int j = 1 ; j <= M ; ++ j ) if ( s [ i ][ j ] == '.' ) c [ i ][ j ] = ++ cnt ; for ( int i = 1 ; i <= N ; ++ i ) for ( int j = 1 ; j <= M ; ++ j ){ if ( ! c [ i ][ j ] ) continue ; if ( c [ i ][ j + 1 ] ) Add ( c [ i ][ j ], c [ i ][ j + 1 ] ); if ( c [ i + 1 ][ j ] ) Add ( c [ i ][ j ], c [ i + 1 ][ j ] ); } cnt -- ; flg = 1 ; for ( int i = 1 ; i <= cnt ; ++ i ){ int mx ( i ); for ( int j = i + 1 ; j <= cnt ; ++ j ) if ( c [ i ][ j ] > c [ i ][ mx ] ) mx = i ; if ( mx != i ){ flg = ! flg ; for ( int j = i ; j <= cnt ; ++ j ) swap ( c [ i ][ j ], c [ i ][ mx ] ); } if ( ! a [ i ][ i ] ){ printf ( \"0 \\n \" ); return 0 ; } for ( int j = i + 1 ; j <= cnt ; ++ j ){ while ( 1 ){ int t ( a [ j ][ i ] / a [ i ][ i ]); for ( int k = i ; k <= cnt ; ++ k ) a [ j ][ k ] = ( ( a [ j ][ k ] - ( a [ i ][ k ] * t ) % mod ) % mod + mod ) % mod ; if ( a [ j ][ i ] == 0 ) break ; for ( int k = i ; k <= cnt ; ++ k ) swap ( a [ i ][ k ], a [ j ][ k ] ); flg = ! flg ; } } } LL ans ( 1 ); for ( int i = 1 ; i <= cnt ; ++ i ) ans = ( ans * a [ i ][ i ] ) % mod ; printf ( \"%lld \\n \" , flg ? ans : mod - ans ); return 0 ; }","title":"[HEOI2015]\u5c0fZ\u7684\u623f\u95f4"},{"location":"math/la/matrix-tree/#bzoj4894","text":"\u8fd8\u662f\u6a21\u677f\u9898\u54e6","title":"bzoj4894 \u5929\u8d4b"},{"location":"math/la/matrix-tree/#shoi2016","text":"","title":"[SHOI2016]\u9ed1\u6697\u524d\u7684\u5e7b\u60f3\u4e61"},{"location":"math/la/matrix-tree/#sdoi2014","text":"","title":"[SDOI2014]\u91cd\u5efa"},{"location":"math/la/matrix-tree/#jsoi2008","text":"","title":"[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570"},{"location":"math/la/matrix-tree/#bzoj5056-oi","text":"","title":"bzoj5056 OI\u6e38\u620f"}]}